-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accel_pad_windows_1c_float_28u_28u_3u_3u_32u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2d_32_window_stream_dout : IN STD_LOGIC_VECTOR (287 downto 0);
    conv2d_32_window_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_32_window_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_32_window_stream_empty_n : IN STD_LOGIC;
    conv2d_32_window_stream_read : OUT STD_LOGIC;
    conv2d_32_padded_window_stream_din : OUT STD_LOGIC_VECTOR (287 downto 0);
    conv2d_32_padded_window_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_32_padded_window_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_32_padded_window_stream_full_n : IN STD_LOGIC;
    conv2d_32_padded_window_stream_write : OUT STD_LOGIC );
end;


architecture behav of accel_pad_windows_1c_float_28u_28u_3u_3u_32u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln111_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal conv2d_32_window_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal conv2d_32_padded_window_stream_blk_n : STD_LOGIC;
    signal select_ln111_1_fu_209_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln111_1_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln111_2_fu_229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln111_2_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_x_fu_90 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln121_1_fu_261_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_in_x_load : STD_LOGIC_VECTOR (4 downto 0);
    signal in_y_fu_94 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln111_3_fu_237_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_in_y_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_98 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln111_fu_170_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal in_y_cast_fu_136_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_140_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_156_fu_152_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln112_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_y_cast_mid1_fu_193_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid1_fu_197_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid15_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_155_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid17_fu_217_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid19_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_157_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln111_fu_185_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln121_fu_245_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln121_fu_249_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln121_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_1_fu_292_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln121_1_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_2_fu_302_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_3_fu_312_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_5_fu_332_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln121_2_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_6_fu_342_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_7_fu_352_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln121_3_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_8_fu_362_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_7_fu_440_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_6_fu_433_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_5_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_4_fu_418_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_4_fu_322_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_3_fu_411_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_2_fu_403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_1_fu_396_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln174_fu_388_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_99 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component accel_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component accel_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    in_x_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_99)) then
                if ((icmp_ln111_fu_164_p2 = ap_const_lv1_0)) then 
                    in_x_fu_90 <= add_ln121_1_fu_261_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    in_x_fu_90 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    in_y_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_99)) then
                if ((icmp_ln111_fu_164_p2 = ap_const_lv1_0)) then 
                    in_y_fu_94 <= select_ln111_3_fu_237_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    in_y_fu_94 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_99)) then
                if ((icmp_ln111_fu_164_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_98 <= add_ln111_fu_170_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_98 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_fu_164_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln121_1_reg_516 <= icmp_ln121_1_fu_267_p2;
                icmp_ln121_reg_509 <= icmp_ln121_fu_255_p2;
                select_ln111_1_reg_495 <= select_ln111_1_fu_209_p3;
                select_ln111_2_reg_502 <= select_ln111_2_fu_229_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln111_fu_170_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln121_1_fu_261_p2 <= std_logic_vector(unsigned(select_ln111_fu_185_p3) + unsigned(ap_const_lv5_1));
    add_ln121_fu_249_p2 <= std_logic_vector(unsigned(zext_ln121_fu_245_p1) + unsigned(ap_const_lv6_3F));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, conv2d_32_window_stream_empty_n, conv2d_32_padded_window_stream_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((conv2d_32_padded_window_stream_full_n = ap_const_logic_0) or (conv2d_32_window_stream_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, conv2d_32_window_stream_empty_n, conv2d_32_padded_window_stream_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((conv2d_32_padded_window_stream_full_n = ap_const_logic_0) or (conv2d_32_window_stream_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, conv2d_32_window_stream_empty_n, conv2d_32_padded_window_stream_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((conv2d_32_padded_window_stream_full_n = ap_const_logic_0) or (conv2d_32_window_stream_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(conv2d_32_window_stream_empty_n, conv2d_32_padded_window_stream_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((conv2d_32_padded_window_stream_full_n = ap_const_logic_0) or (conv2d_32_window_stream_empty_n = ap_const_logic_0));
    end process;


    ap_condition_99_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_99 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln111_fu_164_p2, ap_start_int)
    begin
        if (((icmp_ln111_fu_164_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_in_x_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in_x_fu_90, ap_loop_init, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_in_x_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_in_x_load <= in_x_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_in_y_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, in_y_fu_94, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_in_y_2 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_in_y_2 <= in_y_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_98, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_98;
        end if; 
    end process;


    conv2d_32_padded_window_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv2d_32_padded_window_stream_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_32_padded_window_stream_blk_n <= conv2d_32_padded_window_stream_full_n;
        else 
            conv2d_32_padded_window_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv2d_32_padded_window_stream_din <= ((((((((select_ln174_7_fu_440_p3 & select_ln174_6_fu_433_p3) & select_ln174_5_fu_425_p3) & select_ln174_4_fu_418_p3) & trunc_ln145_4_fu_322_p4) & select_ln174_3_fu_411_p3) & select_ln174_2_fu_403_p3) & select_ln174_1_fu_396_p3) & select_ln174_fu_388_p3);

    conv2d_32_padded_window_stream_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_32_padded_window_stream_write <= ap_const_logic_1;
        else 
            conv2d_32_padded_window_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    conv2d_32_window_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv2d_32_window_stream_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_32_window_stream_blk_n <= conv2d_32_window_stream_empty_n;
        else 
            conv2d_32_window_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    conv2d_32_window_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_32_window_stream_read <= ap_const_logic_1;
        else 
            conv2d_32_window_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_155_fu_146_p2 <= "1" when (unsigned(empty_fu_140_p2) > unsigned(ap_const_lv6_1B)) else "0";
    empty_156_fu_152_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_in_y_2) + unsigned(ap_const_lv5_1));
    empty_157_fu_158_p2 <= "1" when (unsigned(empty_156_fu_152_p2) > unsigned(ap_const_lv5_1B)) else "0";
    empty_fu_140_p2 <= std_logic_vector(unsigned(in_y_cast_fu_136_p1) + unsigned(ap_const_lv6_3F));
    icmp_ln111_fu_164_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_310) else "0";
    icmp_ln112_fu_179_p2 <= "1" when (ap_sig_allocacmp_in_x_load = ap_const_lv5_1C) else "0";
    icmp_ln121_1_fu_267_p2 <= "1" when (unsigned(add_ln121_1_fu_261_p2) > unsigned(ap_const_lv5_1B)) else "0";
    icmp_ln121_fu_255_p2 <= "1" when (unsigned(add_ln121_fu_249_p2) > unsigned(ap_const_lv6_1B)) else "0";
    in_y_cast_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_in_y_2),6));
    in_y_cast_mid1_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_156_fu_152_p2),6));
    or_ln121_1_fu_376_p2 <= (select_ln111_1_reg_495 or icmp_ln121_1_reg_516);
    or_ln121_2_fu_380_p2 <= (select_ln111_2_reg_502 or icmp_ln121_reg_509);
    or_ln121_3_fu_384_p2 <= (select_ln111_2_reg_502 or icmp_ln121_1_reg_516);
    or_ln121_fu_372_p2 <= (select_ln111_1_reg_495 or icmp_ln121_reg_509);
    p_mid15_fu_203_p2 <= "1" when (unsigned(p_mid1_fu_197_p2) > unsigned(ap_const_lv6_1B)) else "0";
    p_mid17_fu_217_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_in_y_2) + unsigned(ap_const_lv5_2));
    p_mid19_fu_223_p2 <= "1" when (unsigned(p_mid17_fu_217_p2) > unsigned(ap_const_lv5_1B)) else "0";
    p_mid1_fu_197_p2 <= std_logic_vector(unsigned(in_y_cast_mid1_fu_193_p1) + unsigned(ap_const_lv6_3F));
    select_ln111_1_fu_209_p3 <= 
        p_mid15_fu_203_p2 when (icmp_ln112_fu_179_p2(0) = '1') else 
        empty_155_fu_146_p2;
    select_ln111_2_fu_229_p3 <= 
        p_mid19_fu_223_p2 when (icmp_ln112_fu_179_p2(0) = '1') else 
        empty_157_fu_158_p2;
    select_ln111_3_fu_237_p3 <= 
        empty_156_fu_152_p2 when (icmp_ln112_fu_179_p2(0) = '1') else 
        ap_sig_allocacmp_in_y_2;
    select_ln111_fu_185_p3 <= 
        ap_const_lv5_0 when (icmp_ln112_fu_179_p2(0) = '1') else 
        ap_sig_allocacmp_in_x_load;
    select_ln174_1_fu_396_p3 <= 
        ap_const_lv32_0 when (select_ln111_1_reg_495(0) = '1') else 
        trunc_ln145_1_fu_292_p4;
    select_ln174_2_fu_403_p3 <= 
        ap_const_lv32_0 when (or_ln121_1_fu_376_p2(0) = '1') else 
        trunc_ln145_2_fu_302_p4;
    select_ln174_3_fu_411_p3 <= 
        ap_const_lv32_0 when (icmp_ln121_reg_509(0) = '1') else 
        trunc_ln145_3_fu_312_p4;
    select_ln174_4_fu_418_p3 <= 
        ap_const_lv32_0 when (icmp_ln121_1_reg_516(0) = '1') else 
        trunc_ln145_5_fu_332_p4;
    select_ln174_5_fu_425_p3 <= 
        ap_const_lv32_0 when (or_ln121_2_fu_380_p2(0) = '1') else 
        trunc_ln145_6_fu_342_p4;
    select_ln174_6_fu_433_p3 <= 
        ap_const_lv32_0 when (select_ln111_2_reg_502(0) = '1') else 
        trunc_ln145_7_fu_352_p4;
    select_ln174_7_fu_440_p3 <= 
        ap_const_lv32_0 when (or_ln121_3_fu_384_p2(0) = '1') else 
        trunc_ln145_8_fu_362_p4;
    select_ln174_fu_388_p3 <= 
        ap_const_lv32_0 when (or_ln121_fu_372_p2(0) = '1') else 
        trunc_ln145_fu_288_p1;
    trunc_ln145_1_fu_292_p4 <= conv2d_32_window_stream_dout(63 downto 32);
    trunc_ln145_2_fu_302_p4 <= conv2d_32_window_stream_dout(95 downto 64);
    trunc_ln145_3_fu_312_p4 <= conv2d_32_window_stream_dout(127 downto 96);
    trunc_ln145_4_fu_322_p4 <= conv2d_32_window_stream_dout(159 downto 128);
    trunc_ln145_5_fu_332_p4 <= conv2d_32_window_stream_dout(191 downto 160);
    trunc_ln145_6_fu_342_p4 <= conv2d_32_window_stream_dout(223 downto 192);
    trunc_ln145_7_fu_352_p4 <= conv2d_32_window_stream_dout(255 downto 224);
    trunc_ln145_8_fu_362_p4 <= conv2d_32_window_stream_dout(287 downto 256);
    trunc_ln145_fu_288_p1 <= conv2d_32_window_stream_dout(32 - 1 downto 0);
    zext_ln121_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln111_fu_185_p3),6));
end behav;
