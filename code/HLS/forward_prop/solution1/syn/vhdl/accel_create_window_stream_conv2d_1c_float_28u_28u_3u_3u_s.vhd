-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accel_create_window_stream_conv2d_1c_float_28u_28u_3u_3u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_stream_TVALID : IN STD_LOGIC;
    conv2d_32_window_stream_din : OUT STD_LOGIC_VECTOR (287 downto 0);
    conv2d_32_window_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_32_window_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_32_window_stream_full_n : IN STD_LOGIC;
    conv2d_32_window_stream_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    input_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_stream_TREADY : OUT STD_LOGIC;
    input_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of accel_create_window_stream_conv2d_1c_float_28u_28u_3u_3u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_32D : STD_LOGIC_VECTOR (9 downto 0) := "1100101101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal icmp_ln67_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op114_read_state1 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln94_reg_2150 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal input_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal conv2d_32_window_stream_blk_n : STD_LOGIC;
    signal new_pixel_2_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_load_reg_2110 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal new_pixel_58_load_reg_2116 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_load_1_reg_2122 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_816_p30 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_2136 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_878_p30 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_2141 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln90_fu_1002_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln94_fu_1426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_new_pixel_2_phi_fu_504_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_input_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_new_pixel_2_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixel_counter_fu_114 : STD_LOGIC_VECTOR (9 downto 0);
    signal pixel_counter_4_fu_540_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_pixel_counter_3 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_ptr_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ptr_18_fu_1447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_col_ptr_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_col_ptr_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_load_13_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_load_16_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_load_0_0_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_3_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_4_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_5_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_6_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_7_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_8_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_9_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_10_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_11_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_12_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_13_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_14_fu_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_15_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_16_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_17_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_18_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_19_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_20_fu_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_21_fu_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_22_fu_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_23_fu_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_24_fu_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_25_fu_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_26_fu_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_27_fu_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_28_fu_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_29_fu_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_load_2_0_fu_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_940_p30 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_load_1_0_fu_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_2_load_1_0_fu_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_3_load_1_0_fu_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_4_load_1_0_fu_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_5_load_1_0_fu_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_6_load_0_fu_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_7_load_0_fu_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_8_load_0_fu_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_9_load_0_fu_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_10_load_0_fu_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_11_load_0_fu_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_12_load_0_fu_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_13_load_0_fu_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_14_load_0_fu_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_15_load_0_fu_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_16_load_0_fu_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_17_load_0_fu_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_18_load_0_fu_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_19_load_0_fu_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_20_load_0_fu_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_21_load_0_fu_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_22_load_0_fu_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_23_load_0_fu_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_24_load_0_fu_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_25_load_0_fu_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_26_load_0_fu_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_27_load_0_fu_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_30_fu_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_31_fu_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_32_fu_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_33_fu_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_34_fu_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_35_fu_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_36_fu_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_37_fu_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_38_fu_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_39_fu_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_40_fu_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_41_fu_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_42_fu_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_43_fu_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_44_fu_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_45_fu_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_46_fu_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_47_fu_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_48_fu_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_49_fu_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_50_fu_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_51_fu_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_52_fu_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_53_fu_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_54_fu_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_55_fu_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_56_fu_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_57_fu_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_load_14_fu_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_58_fu_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_load_0_1_fu_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln97_fu_1435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_ptr_17_fu_1441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_277_fu_1516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_276_fu_1513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_275_fu_1509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_274_fu_1506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_273_fu_1503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_272_fu_1499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_271_fu_1496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_270_fu_1493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_fu_1489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal regslice_both_input_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input_stream_TVALID_int_regslice : STD_LOGIC;
    signal input_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_stream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_stream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_stream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_stream_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_condition_133 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component accel_mux_2832_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accel_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component accel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mux_2832_32_1_1_U135 : component accel_mux_2832_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => line_buffer_load_2_0_fu_246,
        din1 => line_buffer_1_load_1_0_fu_250,
        din2 => line_buffer_2_load_1_0_fu_254,
        din3 => line_buffer_3_load_1_0_fu_258,
        din4 => line_buffer_4_load_1_0_fu_262,
        din5 => line_buffer_5_load_1_0_fu_266,
        din6 => line_buffer_6_load_0_fu_270,
        din7 => line_buffer_7_load_0_fu_274,
        din8 => line_buffer_8_load_0_fu_278,
        din9 => line_buffer_9_load_0_fu_282,
        din10 => line_buffer_10_load_0_fu_286,
        din11 => line_buffer_11_load_0_fu_290,
        din12 => line_buffer_12_load_0_fu_294,
        din13 => line_buffer_13_load_0_fu_298,
        din14 => line_buffer_14_load_0_fu_302,
        din15 => line_buffer_15_load_0_fu_306,
        din16 => line_buffer_16_load_0_fu_310,
        din17 => line_buffer_17_load_0_fu_314,
        din18 => line_buffer_18_load_0_fu_318,
        din19 => line_buffer_19_load_0_fu_322,
        din20 => line_buffer_20_load_0_fu_326,
        din21 => line_buffer_21_load_0_fu_330,
        din22 => line_buffer_22_load_0_fu_334,
        din23 => line_buffer_23_load_0_fu_338,
        din24 => line_buffer_24_load_0_fu_342,
        din25 => line_buffer_25_load_0_fu_346,
        din26 => line_buffer_26_load_0_fu_350,
        din27 => line_buffer_27_load_0_fu_354,
        din28 => ap_sig_allocacmp_col_ptr_load,
        dout => tmp_s_fu_816_p30);

    mux_2832_32_1_1_U136 : component accel_mux_2832_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => new_pixel_30_fu_358,
        din1 => new_pixel_31_fu_362,
        din2 => new_pixel_32_fu_366,
        din3 => new_pixel_33_fu_370,
        din4 => new_pixel_34_fu_374,
        din5 => new_pixel_35_fu_378,
        din6 => new_pixel_36_fu_382,
        din7 => new_pixel_37_fu_386,
        din8 => new_pixel_38_fu_390,
        din9 => new_pixel_39_fu_394,
        din10 => new_pixel_40_fu_398,
        din11 => new_pixel_41_fu_402,
        din12 => new_pixel_42_fu_406,
        din13 => new_pixel_43_fu_410,
        din14 => new_pixel_44_fu_414,
        din15 => new_pixel_45_fu_418,
        din16 => new_pixel_46_fu_422,
        din17 => new_pixel_47_fu_426,
        din18 => new_pixel_48_fu_430,
        din19 => new_pixel_49_fu_434,
        din20 => new_pixel_50_fu_438,
        din21 => new_pixel_51_fu_442,
        din22 => new_pixel_52_fu_446,
        din23 => new_pixel_53_fu_450,
        din24 => new_pixel_54_fu_454,
        din25 => new_pixel_55_fu_458,
        din26 => new_pixel_56_fu_462,
        din27 => new_pixel_57_fu_466,
        din28 => ap_sig_allocacmp_col_ptr_load,
        dout => tmp_1_fu_878_p30);

    mux_2832_32_1_1_U137 : component accel_mux_2832_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => new_pixel_24_fu_222,
        din1 => new_pixel_25_fu_226,
        din2 => new_pixel_26_fu_230,
        din3 => new_pixel_27_fu_234,
        din4 => new_pixel_28_fu_238,
        din5 => new_pixel_29_fu_242,
        din6 => new_pixel_23_fu_218,
        din7 => new_pixel_fu_134,
        din8 => new_pixel_3_fu_138,
        din9 => new_pixel_4_fu_142,
        din10 => new_pixel_5_fu_146,
        din11 => new_pixel_6_fu_150,
        din12 => new_pixel_7_fu_154,
        din13 => new_pixel_8_fu_158,
        din14 => new_pixel_9_fu_162,
        din15 => new_pixel_10_fu_166,
        din16 => new_pixel_11_fu_170,
        din17 => new_pixel_12_fu_174,
        din18 => new_pixel_13_fu_178,
        din19 => new_pixel_14_fu_182,
        din20 => new_pixel_15_fu_186,
        din21 => new_pixel_16_fu_190,
        din22 => new_pixel_17_fu_194,
        din23 => new_pixel_18_fu_198,
        din24 => new_pixel_19_fu_202,
        din25 => new_pixel_20_fu_206,
        din26 => new_pixel_21_fu_210,
        din27 => new_pixel_22_fu_214,
        din28 => ap_sig_allocacmp_col_ptr_load,
        dout => tmp_fu_940_p30);

    flow_control_loop_pipe_U : component accel_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);

    regslice_both_input_stream_V_data_V_U : component accel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => input_stream_TDATA,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_data_V_U_ack_in,
        data_out => input_stream_TDATA_int_regslice,
        vld_out => input_stream_TVALID_int_regslice,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_data_V_U_apdone_blk);

    regslice_both_input_stream_V_keep_V_U : component accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => input_stream_TKEEP,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_keep_V_U_ack_in,
        data_out => input_stream_TKEEP_int_regslice,
        vld_out => regslice_both_input_stream_V_keep_V_U_vld_out,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_keep_V_U_apdone_blk);

    regslice_both_input_stream_V_strb_V_U : component accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => input_stream_TSTRB,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_strb_V_U_ack_in,
        data_out => input_stream_TSTRB_int_regslice,
        vld_out => regslice_both_input_stream_V_strb_V_U_vld_out,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_strb_V_U_apdone_blk);

    regslice_both_input_stream_V_last_V_U : component accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => input_stream_TLAST,
        vld_in => input_stream_TVALID,
        ack_in => regslice_both_input_stream_V_last_V_U_ack_in,
        data_out => input_stream_TLAST_int_regslice,
        vld_out => regslice_both_input_stream_V_last_V_U_vld_out,
        ack_out => input_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_ptr_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_133)) then
                if ((icmp_ln67_fu_534_p2 = ap_const_lv1_0)) then 
                    col_ptr_fu_118 <= col_ptr_18_fu_1447_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_ptr_fu_118 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    new_pixel_2_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_133)) then
                if (((icmp_ln71_fu_546_p2 = ap_const_lv1_0) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0))) then 
                    new_pixel_2_reg_501 <= ap_const_lv32_0;
                elsif (((icmp_ln71_fu_546_p2 = ap_const_lv1_1) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0))) then 
                    new_pixel_2_reg_501 <= temp_input_fu_556_p1;
                elsif (not((icmp_ln67_fu_534_p2 = ap_const_lv1_1))) then 
                    new_pixel_2_reg_501 <= ap_phi_reg_pp0_iter0_new_pixel_2_reg_501;
                end if;
            end if; 
        end if;
    end process;

    pixel_counter_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_133)) then
                if ((icmp_ln67_fu_534_p2 = ap_const_lv1_0)) then 
                    pixel_counter_fu_114 <= pixel_counter_4_fu_540_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    pixel_counter_fu_114 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln94_reg_2150 <= icmp_ln94_fu_1426_p2;
                tmp_1_reg_2141 <= tmp_1_fu_878_p30;
                tmp_s_reg_2136 <= tmp_s_fu_816_p30;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_A))) then
                line_buffer_10_load_0_fu_286 <= tmp_fu_940_p30;
                new_pixel_40_fu_398 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_5_fu_146 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_B))) then
                line_buffer_11_load_0_fu_290 <= tmp_fu_940_p30;
                new_pixel_41_fu_402 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_6_fu_150 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_C))) then
                line_buffer_12_load_0_fu_294 <= tmp_fu_940_p30;
                new_pixel_42_fu_406 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_7_fu_154 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_D))) then
                line_buffer_13_load_0_fu_298 <= tmp_fu_940_p30;
                new_pixel_43_fu_410 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_8_fu_158 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_E))) then
                line_buffer_14_load_0_fu_302 <= tmp_fu_940_p30;
                new_pixel_44_fu_414 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_9_fu_162 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_F))) then
                line_buffer_15_load_0_fu_306 <= tmp_fu_940_p30;
                new_pixel_10_fu_166 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_45_fu_418 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_10))) then
                line_buffer_16_load_0_fu_310 <= tmp_fu_940_p30;
                new_pixel_11_fu_170 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_46_fu_422 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_11))) then
                line_buffer_17_load_0_fu_314 <= tmp_fu_940_p30;
                new_pixel_12_fu_174 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_47_fu_426 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_12))) then
                line_buffer_18_load_0_fu_318 <= tmp_fu_940_p30;
                new_pixel_13_fu_178 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_48_fu_430 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_13))) then
                line_buffer_19_load_0_fu_322 <= tmp_fu_940_p30;
                new_pixel_14_fu_182 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_49_fu_434 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_1))) then
                line_buffer_1_load_1_0_fu_250 <= tmp_fu_940_p30;
                new_pixel_25_fu_226 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_31_fu_362 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_14))) then
                line_buffer_20_load_0_fu_326 <= tmp_fu_940_p30;
                new_pixel_15_fu_186 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_50_fu_438 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_15))) then
                line_buffer_21_load_0_fu_330 <= tmp_fu_940_p30;
                new_pixel_16_fu_190 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_51_fu_442 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_16))) then
                line_buffer_22_load_0_fu_334 <= tmp_fu_940_p30;
                new_pixel_17_fu_194 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_52_fu_446 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_17))) then
                line_buffer_23_load_0_fu_338 <= tmp_fu_940_p30;
                new_pixel_18_fu_198 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_53_fu_450 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_18))) then
                line_buffer_24_load_0_fu_342 <= tmp_fu_940_p30;
                new_pixel_19_fu_202 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_54_fu_454 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_19))) then
                line_buffer_25_load_0_fu_346 <= tmp_fu_940_p30;
                new_pixel_20_fu_206 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_55_fu_458 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_1A))) then
                line_buffer_26_load_0_fu_350 <= tmp_fu_940_p30;
                new_pixel_21_fu_210 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_56_fu_462 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((((((icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_1E)) or ((icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_1F))) or ((icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_1D))) or ((icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_1C))) or ((icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_1B))))) then
                line_buffer_27_load_0_fu_354 <= tmp_fu_940_p30;
                new_pixel_22_fu_214 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_57_fu_466 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_2))) then
                line_buffer_2_load_1_0_fu_254 <= tmp_fu_940_p30;
                new_pixel_26_fu_230 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_32_fu_366 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_3))) then
                line_buffer_3_load_1_0_fu_258 <= tmp_fu_940_p30;
                new_pixel_27_fu_234 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_33_fu_370 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_4))) then
                line_buffer_4_load_1_0_fu_262 <= tmp_fu_940_p30;
                new_pixel_28_fu_238 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_34_fu_374 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_5))) then
                line_buffer_5_load_1_0_fu_266 <= tmp_fu_940_p30;
                new_pixel_29_fu_242 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_35_fu_378 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_6))) then
                line_buffer_6_load_0_fu_270 <= tmp_fu_940_p30;
                new_pixel_23_fu_218 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_36_fu_382 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_7))) then
                line_buffer_7_load_0_fu_274 <= tmp_fu_940_p30;
                new_pixel_37_fu_386 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_fu_134 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_8))) then
                line_buffer_8_load_0_fu_278 <= tmp_fu_940_p30;
                new_pixel_38_fu_390 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_3_fu_138 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_9))) then
                line_buffer_9_load_0_fu_282 <= tmp_fu_940_p30;
                new_pixel_39_fu_394 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_4_fu_142 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln90_fu_1002_p1 = ap_const_lv5_0))) then
                line_buffer_load_2_0_fu_246 <= tmp_fu_940_p30;
                new_pixel_24_fu_222 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                new_pixel_30_fu_358 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                new_pixel_58_fu_474 <= ap_phi_mux_new_pixel_2_phi_fu_504_p4;
                temp_windows_elements_load_0_1_fu_478 <= tmp_s_fu_816_p30;
                temp_windows_elements_load_14_fu_470 <= tmp_1_fu_878_p30;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                new_pixel_58_load_reg_2116 <= new_pixel_58_fu_474;
                temp_windows_elements_load_1_reg_2122 <= temp_windows_elements_load_0_1_fu_478;
                temp_windows_elements_load_reg_2110 <= temp_windows_elements_load_14_fu_470;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                temp_windows_elements_load_0_0_fu_130 <= temp_windows_elements_load_1_reg_2122;
                temp_windows_elements_load_13_fu_122 <= temp_windows_elements_load_reg_2110;
                temp_windows_elements_load_16_fu_126 <= new_pixel_58_load_reg_2116;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_predicate_op114_read_state1, ap_done_reg, conv2d_32_window_stream_full_n, icmp_ln94_reg_2150, ap_start_int, input_stream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((icmp_ln94_reg_2150 = ap_const_lv1_1) and (conv2d_32_window_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((input_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op114_read_state1 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_predicate_op114_read_state1, ap_done_reg, conv2d_32_window_stream_full_n, icmp_ln94_reg_2150, ap_start_int, input_stream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((icmp_ln94_reg_2150 = ap_const_lv1_1) and (conv2d_32_window_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((input_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op114_read_state1 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_predicate_op114_read_state1, ap_done_reg, conv2d_32_window_stream_full_n, icmp_ln94_reg_2150, ap_start_int, input_stream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((icmp_ln94_reg_2150 = ap_const_lv1_1) and (conv2d_32_window_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((input_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op114_read_state1 = ap_const_boolean_1)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_predicate_op114_read_state1, ap_done_reg, input_stream_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or ((input_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op114_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(conv2d_32_window_stream_full_n, icmp_ln94_reg_2150)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln94_reg_2150 = ap_const_lv1_1) and (conv2d_32_window_stream_full_n = ap_const_logic_0));
    end process;


    ap_condition_133_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_133 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_534_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln67_fu_534_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_new_pixel_2_phi_fu_504_p4_assign_proc : process(icmp_ln67_fu_534_p2, icmp_ln71_fu_546_p2, temp_input_fu_556_p1, ap_phi_reg_pp0_iter0_new_pixel_2_reg_501)
    begin
        if ((icmp_ln67_fu_534_p2 = ap_const_lv1_0)) then
            if ((icmp_ln71_fu_546_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_new_pixel_2_phi_fu_504_p4 <= ap_const_lv32_0;
            elsif ((icmp_ln71_fu_546_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_new_pixel_2_phi_fu_504_p4 <= temp_input_fu_556_p1;
            else 
                ap_phi_mux_new_pixel_2_phi_fu_504_p4 <= ap_phi_reg_pp0_iter0_new_pixel_2_reg_501;
            end if;
        else 
            ap_phi_mux_new_pixel_2_phi_fu_504_p4 <= ap_phi_reg_pp0_iter0_new_pixel_2_reg_501;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_new_pixel_2_reg_501 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op114_read_state1_assign_proc : process(icmp_ln67_fu_534_p2, icmp_ln71_fu_546_p2)
    begin
                ap_predicate_op114_read_state1 <= ((icmp_ln71_fu_546_p2 = ap_const_lv1_1) and (icmp_ln67_fu_534_p2 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_ptr_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, col_ptr_fu_118, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_col_ptr_load <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_col_ptr_load <= col_ptr_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_col_ptr_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, col_ptr_fu_118, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_col_ptr_load_1 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_col_ptr_load_1 <= col_ptr_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_pixel_counter_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, pixel_counter_fu_114, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_pixel_counter_3 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_pixel_counter_3 <= pixel_counter_fu_114;
        end if; 
    end process;

    bitcast_ln174_270_fu_1493_p1 <= temp_windows_elements_load_1_reg_2122;
    bitcast_ln174_271_fu_1496_p1 <= tmp_s_reg_2136;
    bitcast_ln174_272_fu_1499_p1 <= temp_windows_elements_load_13_fu_122;
    bitcast_ln174_273_fu_1503_p1 <= temp_windows_elements_load_reg_2110;
    bitcast_ln174_274_fu_1506_p1 <= tmp_1_reg_2141;
    bitcast_ln174_275_fu_1509_p1 <= temp_windows_elements_load_16_fu_126;
    bitcast_ln174_276_fu_1513_p1 <= new_pixel_58_load_reg_2116;
    bitcast_ln174_277_fu_1516_p1 <= new_pixel_2_reg_501;
    bitcast_ln174_fu_1489_p1 <= temp_windows_elements_load_0_0_fu_130;
    col_ptr_17_fu_1441_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_ptr_load_1) + unsigned(ap_const_lv32_1));
    col_ptr_18_fu_1447_p3 <= 
        ap_const_lv32_0 when (icmp_ln97_fu_1435_p2(0) = '1') else 
        col_ptr_17_fu_1441_p2;

    conv2d_32_window_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv2d_32_window_stream_full_n, icmp_ln94_reg_2150, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln94_reg_2150 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_32_window_stream_blk_n <= conv2d_32_window_stream_full_n;
        else 
            conv2d_32_window_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv2d_32_window_stream_din <= ((((((((bitcast_ln174_277_fu_1516_p1 & bitcast_ln174_276_fu_1513_p1) & bitcast_ln174_275_fu_1509_p1) & bitcast_ln174_274_fu_1506_p1) & bitcast_ln174_273_fu_1503_p1) & bitcast_ln174_272_fu_1499_p1) & bitcast_ln174_271_fu_1496_p1) & bitcast_ln174_270_fu_1493_p1) & bitcast_ln174_fu_1489_p1);

    conv2d_32_window_stream_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln94_reg_2150, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln94_reg_2150 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_32_window_stream_write <= ap_const_logic_1;
        else 
            conv2d_32_window_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln67_fu_534_p2 <= "1" when (ap_sig_allocacmp_pixel_counter_3 = ap_const_lv10_32D) else "0";
    icmp_ln71_fu_546_p2 <= "1" when (unsigned(ap_sig_allocacmp_pixel_counter_3) < unsigned(ap_const_lv10_310)) else "0";
    icmp_ln94_fu_1426_p2 <= "1" when (unsigned(ap_sig_allocacmp_pixel_counter_3) > unsigned(ap_const_lv10_1C)) else "0";
    icmp_ln97_fu_1435_p2 <= "1" when (ap_sig_allocacmp_col_ptr_load_1 = ap_const_lv32_1B) else "0";

    input_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op114_read_state1, ap_done_reg, ap_block_pp0_stage0, ap_start_int, input_stream_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_predicate_op114_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_stream_TDATA_blk_n <= input_stream_TVALID_int_regslice;
        else 
            input_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_stream_TREADY <= regslice_both_input_stream_V_data_V_U_ack_in;

    input_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op114_read_state1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op114_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    pixel_counter_4_fu_540_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_pixel_counter_3) + unsigned(ap_const_lv10_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    temp_input_fu_556_p1 <= input_stream_TDATA_int_regslice;
    trunc_ln90_fu_1002_p1 <= ap_sig_allocacmp_col_ptr_load(5 - 1 downto 0);
end behav;
