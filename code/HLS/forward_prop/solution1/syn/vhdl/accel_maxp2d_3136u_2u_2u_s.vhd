-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accel_maxp2d_3136u_2u_2u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    maxp2d_64_window_stream_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    maxp2d_64_window_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    maxp2d_64_window_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    maxp2d_64_window_stream_empty_n : IN STD_LOGIC;
    maxp2d_64_window_stream_read : OUT STD_LOGIC;
    maxp2d_64_feature_map_stream127_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    maxp2d_64_feature_map_stream127_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    maxp2d_64_feature_map_stream127_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    maxp2d_64_feature_map_stream127_full_n : IN STD_LOGIC;
    maxp2d_64_feature_map_stream127_write : OUT STD_LOGIC;
    maxp2d_64_activations_window_stream_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    maxp2d_64_activations_window_stream_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
    maxp2d_64_activations_window_stream_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
    maxp2d_64_activations_window_stream_full_n : IN STD_LOGIC;
    maxp2d_64_activations_window_stream_write : OUT STD_LOGIC;
    maxp2d_64_f_map_out133_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    maxp2d_64_f_map_out133_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
    maxp2d_64_f_map_out133_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
    maxp2d_64_f_map_out133_full_n : IN STD_LOGIC;
    maxp2d_64_f_map_out133_write : OUT STD_LOGIC );
end;


architecture behav of accel_maxp2d_3136u_2u_2u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FF800000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111100000000000000000000000";
    constant ap_const_lv12_C40 : STD_LOGIC_VECTOR (11 downto 0) := "110001000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln390_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal maxp2d_64_window_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal maxp2d_64_feature_map_stream127_blk_n : STD_LOGIC;
    signal maxp2d_64_activations_window_stream_blk_n : STD_LOGIC;
    signal maxp2d_64_f_map_out133_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln145_s_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_2_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_2_reg_266_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_3_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_3_reg_271_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_3_reg_271_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_reg_276_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_reg_276_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_reg_276_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_4_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_4_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_4_reg_283_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_4_reg_283_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal max_8_fu_192_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_8_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_11_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_11_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_11_reg_296_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal max_10_fu_204_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_10_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_13_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_13_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_12_fu_215_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_12_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_14_fu_222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_14_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_fu_60 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_4_fu_138_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_w_3 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln174_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_91_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_100_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_100_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_104_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_104_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_91_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_91_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_96_ce : STD_LOGIC;
    signal grp_fu_100_ce : STD_LOGIC;
    signal grp_fu_104_ce : STD_LOGIC;
    signal grp_fu_108_ce : STD_LOGIC;
    signal grp_fu_112_ce : STD_LOGIC;
    signal grp_fu_116_ce : STD_LOGIC;
    signal grp_fu_120_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_176 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component accel_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component accel_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U19763 : component accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_91_p0,
        din1 => ap_const_lv32_FF800000,
        ce => grp_fu_91_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_91_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U19764 : component accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_96_p0,
        din1 => grp_fu_96_p1,
        ce => grp_fu_96_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_96_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U19765 : component accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_100_p0,
        din1 => grp_fu_100_p1,
        ce => grp_fu_100_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_100_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U19766 : component accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_104_p0,
        din1 => grp_fu_104_p1,
        ce => grp_fu_104_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_104_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U19767 : component accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => temp_window_elements_reg_276_pp0_iter4_reg,
        din1 => max_14_fu_222_p3,
        ce => grp_fu_108_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_108_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U19768 : component accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => temp_window_elements_4_reg_283_pp0_iter4_reg,
        din1 => max_14_fu_222_p3,
        ce => grp_fu_112_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_112_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U19769 : component accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_11_reg_296_pp0_iter4_reg,
        din1 => max_14_fu_222_p3,
        ce => grp_fu_116_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_116_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U19770 : component accel_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => max_13_reg_309,
        din1 => max_14_fu_222_p3,
        ce => grp_fu_120_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_120_p2);

    flow_control_loop_pipe_U : component accel_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    w_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_176)) then
                if ((icmp_ln390_fu_132_p2 = ap_const_lv1_0)) then 
                    w_fu_60 <= w_4_fu_138_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    w_fu_60 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                temp_window_elements_reg_276 <= temp_window_elements_fu_183_p1;
                trunc_ln145_2_reg_266 <= maxp2d_64_window_stream_dout(95 downto 64);
                trunc_ln145_3_reg_271 <= maxp2d_64_window_stream_dout(127 downto 96);
                trunc_ln145_s_reg_261 <= maxp2d_64_window_stream_dout(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                max_10_reg_303 <= max_10_fu_204_p3;
                max_11_reg_296 <= max_11_fu_200_p1;
                max_11_reg_296_pp0_iter4_reg <= max_11_reg_296;
                max_12_reg_316 <= max_12_fu_215_p3;
                max_13_reg_309 <= max_13_fu_211_p1;
                max_14_reg_322 <= max_14_fu_222_p3;
                max_8_reg_290 <= max_8_fu_192_p3;
                temp_window_elements_4_reg_283 <= temp_window_elements_4_fu_188_p1;
                temp_window_elements_4_reg_283_pp0_iter3_reg <= temp_window_elements_4_reg_283;
                temp_window_elements_4_reg_283_pp0_iter4_reg <= temp_window_elements_4_reg_283_pp0_iter3_reg;
                temp_window_elements_reg_276_pp0_iter2_reg <= temp_window_elements_reg_276;
                temp_window_elements_reg_276_pp0_iter3_reg <= temp_window_elements_reg_276_pp0_iter2_reg;
                temp_window_elements_reg_276_pp0_iter4_reg <= temp_window_elements_reg_276_pp0_iter3_reg;
                trunc_ln145_2_reg_266_pp0_iter2_reg <= trunc_ln145_2_reg_266;
                trunc_ln145_3_reg_271_pp0_iter2_reg <= trunc_ln145_3_reg_271;
                trunc_ln145_3_reg_271_pp0_iter3_reg <= trunc_ln145_3_reg_271_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_done_reg, maxp2d_64_window_stream_empty_n, maxp2d_64_feature_map_stream127_full_n, maxp2d_64_activations_window_stream_full_n, maxp2d_64_f_map_out133_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_00001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((maxp2d_64_f_map_out133_full_n = ap_const_logic_0) or (maxp2d_64_activations_window_stream_full_n = ap_const_logic_0) or (maxp2d_64_feature_map_stream127_full_n = ap_const_logic_0))) or ((maxp2d_64_window_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_done_reg, maxp2d_64_window_stream_empty_n, maxp2d_64_feature_map_stream127_full_n, maxp2d_64_activations_window_stream_full_n, maxp2d_64_f_map_out133_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((maxp2d_64_f_map_out133_full_n = ap_const_logic_0) or (maxp2d_64_activations_window_stream_full_n = ap_const_logic_0) or (maxp2d_64_feature_map_stream127_full_n = ap_const_logic_0))) or ((maxp2d_64_window_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_done_reg, maxp2d_64_window_stream_empty_n, maxp2d_64_feature_map_stream127_full_n, maxp2d_64_activations_window_stream_full_n, maxp2d_64_f_map_out133_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((maxp2d_64_f_map_out133_full_n = ap_const_logic_0) or (maxp2d_64_activations_window_stream_full_n = ap_const_logic_0) or (maxp2d_64_feature_map_stream127_full_n = ap_const_logic_0))) or ((maxp2d_64_window_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_done_reg, maxp2d_64_window_stream_empty_n, maxp2d_64_feature_map_stream127_full_n, maxp2d_64_activations_window_stream_full_n, maxp2d_64_f_map_out133_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((maxp2d_64_f_map_out133_full_n = ap_const_logic_0) or (maxp2d_64_activations_window_stream_full_n = ap_const_logic_0) or (maxp2d_64_feature_map_stream127_full_n = ap_const_logic_0))) or ((maxp2d_64_window_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(maxp2d_64_window_stream_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (maxp2d_64_window_stream_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(maxp2d_64_feature_map_stream127_full_n, maxp2d_64_activations_window_stream_full_n, maxp2d_64_f_map_out133_full_n)
    begin
                ap_block_state7_pp0_stage0_iter6 <= ((maxp2d_64_f_map_out133_full_n = ap_const_logic_0) or (maxp2d_64_activations_window_stream_full_n = ap_const_logic_0) or (maxp2d_64_feature_map_stream127_full_n = ap_const_logic_0));
    end process;


    ap_condition_176_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_176 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln390_fu_132_p2, ap_start_int)
    begin
        if (((icmp_ln390_fu_132_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_w_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, w_fu_60, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_w_3 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_w_3 <= w_fu_60;
        end if; 
    end process;

    bitcast_ln174_fu_232_p1 <= max_14_reg_322;

    grp_fu_100_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_100_ce <= ap_const_logic_1;
        else 
            grp_fu_100_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_100_p0 <= trunc_ln145_2_reg_266_pp0_iter2_reg;
    grp_fu_100_p1 <= 
        temp_window_elements_4_reg_283 when (grp_fu_96_p2(0) = '1') else 
        max_8_reg_290;

    grp_fu_104_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_104_ce <= ap_const_logic_1;
        else 
            grp_fu_104_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_104_p0 <= trunc_ln145_3_reg_271_pp0_iter3_reg;
    grp_fu_104_p1 <= 
        max_11_reg_296 when (grp_fu_100_p2(0) = '1') else 
        max_10_reg_303;

    grp_fu_108_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_108_ce <= ap_const_logic_1;
        else 
            grp_fu_108_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_112_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_112_ce <= ap_const_logic_1;
        else 
            grp_fu_112_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_116_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_116_ce <= ap_const_logic_1;
        else 
            grp_fu_116_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_120_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_120_ce <= ap_const_logic_1;
        else 
            grp_fu_120_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_91_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_91_ce <= ap_const_logic_1;
        else 
            grp_fu_91_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_91_p0 <= trunc_ln145_fu_149_p1;

    grp_fu_96_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_96_ce <= ap_const_logic_1;
        else 
            grp_fu_96_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_96_p0 <= trunc_ln145_s_reg_261;
    grp_fu_96_p1 <= 
        temp_window_elements_reg_276 when (grp_fu_91_p2(0) = '1') else 
        ap_const_lv32_FF800000;
    icmp_ln390_fu_132_p2 <= "1" when (ap_sig_allocacmp_w_3 = ap_const_lv12_C40) else "0";
    max_10_fu_204_p3 <= 
        temp_window_elements_4_reg_283 when (grp_fu_96_p2(0) = '1') else 
        max_8_reg_290;
    max_11_fu_200_p1 <= trunc_ln145_2_reg_266_pp0_iter2_reg;
    max_12_fu_215_p3 <= 
        max_11_reg_296 when (grp_fu_100_p2(0) = '1') else 
        max_10_reg_303;
    max_13_fu_211_p1 <= trunc_ln145_3_reg_271_pp0_iter3_reg;
    max_14_fu_222_p3 <= 
        max_13_reg_309 when (grp_fu_104_p2(0) = '1') else 
        max_12_reg_316;
    max_8_fu_192_p3 <= 
        temp_window_elements_reg_276 when (grp_fu_91_p2(0) = '1') else 
        ap_const_lv32_FF800000;

    maxp2d_64_activations_window_stream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter6, maxp2d_64_activations_window_stream_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            maxp2d_64_activations_window_stream_blk_n <= maxp2d_64_activations_window_stream_full_n;
        else 
            maxp2d_64_activations_window_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    maxp2d_64_activations_window_stream_din <= (((grp_fu_120_p2 & grp_fu_116_p2) & grp_fu_112_p2) & grp_fu_108_p2);

    maxp2d_64_activations_window_stream_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            maxp2d_64_activations_window_stream_write <= ap_const_logic_1;
        else 
            maxp2d_64_activations_window_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    maxp2d_64_f_map_out133_blk_n_assign_proc : process(ap_enable_reg_pp0_iter6, maxp2d_64_f_map_out133_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            maxp2d_64_f_map_out133_blk_n <= maxp2d_64_f_map_out133_full_n;
        else 
            maxp2d_64_f_map_out133_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    maxp2d_64_f_map_out133_din <= bitcast_ln174_fu_232_p1;

    maxp2d_64_f_map_out133_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            maxp2d_64_f_map_out133_write <= ap_const_logic_1;
        else 
            maxp2d_64_f_map_out133_write <= ap_const_logic_0;
        end if; 
    end process;


    maxp2d_64_feature_map_stream127_blk_n_assign_proc : process(ap_enable_reg_pp0_iter6, maxp2d_64_feature_map_stream127_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            maxp2d_64_feature_map_stream127_blk_n <= maxp2d_64_feature_map_stream127_full_n;
        else 
            maxp2d_64_feature_map_stream127_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    maxp2d_64_feature_map_stream127_din <= bitcast_ln174_fu_232_p1;

    maxp2d_64_feature_map_stream127_write_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            maxp2d_64_feature_map_stream127_write <= ap_const_logic_1;
        else 
            maxp2d_64_feature_map_stream127_write <= ap_const_logic_0;
        end if; 
    end process;


    maxp2d_64_window_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, maxp2d_64_window_stream_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            maxp2d_64_window_stream_blk_n <= maxp2d_64_window_stream_empty_n;
        else 
            maxp2d_64_window_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    maxp2d_64_window_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            maxp2d_64_window_stream_read <= ap_const_logic_1;
        else 
            maxp2d_64_window_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    temp_window_elements_4_fu_188_p1 <= trunc_ln145_s_reg_261;
    temp_window_elements_fu_183_p1 <= trunc_ln145_fu_149_p1;
    trunc_ln145_fu_149_p1 <= maxp2d_64_window_stream_dout(32 - 1 downto 0);
    w_4_fu_138_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_w_3) + unsigned(ap_const_lv12_1));
end behav;
