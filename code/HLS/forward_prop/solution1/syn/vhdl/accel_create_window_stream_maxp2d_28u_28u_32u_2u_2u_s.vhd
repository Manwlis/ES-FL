-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accel_create_window_stream_maxp2d_28u_28u_32u_2u_2u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2d_32_feature_map_stream122_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2d_32_feature_map_stream122_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_32_feature_map_stream122_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_32_feature_map_stream122_empty_n : IN STD_LOGIC;
    conv2d_32_feature_map_stream122_read : OUT STD_LOGIC;
    maxp2d_32_window_stream_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    maxp2d_32_window_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    maxp2d_32_window_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    maxp2d_32_window_stream_full_n : IN STD_LOGIC;
    maxp2d_32_window_stream_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of accel_create_window_stream_maxp2d_28u_28u_32u_2u_2u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv15_6200 : STD_LOGIC_VECTOR (14 downto 0) := "110001000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal select_ln351_3_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln351_3_reg_912_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln351_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal conv2d_32_feature_map_stream122_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal maxp2d_32_window_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal pos_y_0_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_y_0_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_861_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_866_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_871 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_876 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_ptr_5_fu_325_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_ptr_5_reg_885 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_ptr_5_reg_885_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ptr_7_fu_333_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ptr_7_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln353_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_898_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln358_fu_413_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln358_reg_907 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln351_3_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln367_1_fu_439_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln367_1_reg_916 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln364_1_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln364_1_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln364_1_reg_921_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln367_3_fu_457_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln367_3_reg_927 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln358_2_fu_483_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln358_2_reg_932 : STD_LOGIC_VECTOR (10 downto 0);
    signal pos_y_0_mid1_fu_537_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_y_0_mid1_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_3_fu_683_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_3_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_fu_691_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_reg_965 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_ce0 : STD_LOGIC;
    signal line_buffer_we0 : STD_LOGIC;
    signal line_buffer_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_ce1 : STD_LOGIC;
    signal line_buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_address2 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_ce2 : STD_LOGIC;
    signal line_buffer_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_address3 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_ce3 : STD_LOGIC;
    signal line_buffer_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln367_4_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_3_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_2_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_3_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal channel_fu_70 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln353_fu_498_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_channel_load : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_window_elements_load2_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_1_fu_751_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_load_176_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_2_fu_759_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_load_1810_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_load_1914_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_ptr_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln351_2_fu_397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_row_ptr_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ptr_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln351_1_fu_359_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_col_ptr_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_98 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln351_fu_284_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln351_fu_194_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_not_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln364_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln366_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln366_1_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln366_2_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln366_3_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_ptr_4_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ptr_5_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln377_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln373_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_ptr_6_fu_317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_367_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_6_fu_379_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln358_fu_375_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln358_1_fu_387_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sub_ln358_fu_391_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln358_fu_405_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln358_1_fu_409_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln351_1_fu_355_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_not_mid1_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan_mid1_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln351_6_fu_449_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln367_4_fu_461_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln367_5_fu_465_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln367_2_fu_469_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln351_fu_347_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_475_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln367_5_fu_487_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln351_4_fu_542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_548_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_9_fu_560_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln367_fu_556_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln367_1_fu_568_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sub_ln367_fu_572_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln367_fu_578_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln367_fu_582_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln367_2_fu_595_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln367_1_fu_599_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln366_6_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_616_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_7_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_634_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_530_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln358_1_fu_648_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_604_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln367_3_fu_658_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_587_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln367_4_fu_668_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln351_8_fu_624_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln351_9_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_4_fu_715_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_719_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_5_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_737_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln351_5_fu_727_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln351_7_fu_745_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln174_258_fu_778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_257_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_256_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_fu_767_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_214 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component accel_create_window_stream_maxp2d_28u_28u_32u_2u_2u_s_line_buffer_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accel_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    line_buffer_U : component accel_create_window_stream_maxp2d_28u_28u_32u_2u_2u_s_line_buffer_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1792,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_address0,
        ce0 => line_buffer_ce0,
        we0 => line_buffer_we0,
        d0 => tmp_fu_678_p1,
        address1 => line_buffer_address1,
        ce1 => line_buffer_ce1,
        q1 => line_buffer_q1,
        address2 => line_buffer_address2,
        ce2 => line_buffer_ce2,
        q2 => line_buffer_q2,
        address3 => line_buffer_address3,
        ce3 => line_buffer_ce3,
        q3 => line_buffer_q3);

    flow_control_loop_pipe_U : component accel_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    channel_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_214)) then
                if ((icmp_ln351_fu_278_p2 = ap_const_lv1_0)) then 
                    channel_fu_70 <= add_ln353_fu_498_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    channel_fu_70 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    col_ptr_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_214)) then
                if ((icmp_ln351_fu_278_p2 = ap_const_lv1_0)) then 
                    col_ptr_fu_94 <= select_ln351_1_fu_359_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_ptr_fu_94 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_214)) then
                if ((icmp_ln351_fu_278_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_98 <= add_ln351_fu_284_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_98 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;

    row_ptr_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_214)) then
                if ((icmp_ln351_fu_278_p2 = ap_const_lv1_0)) then 
                    row_ptr_fu_90 <= select_ln351_2_fu_397_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    row_ptr_fu_90 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln351_fu_278_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln358_reg_907 <= add_ln358_fu_413_p2;
                add_ln364_1_reg_921 <= add_ln364_1_fu_443_p2;
                col_ptr_7_reg_891 <= col_ptr_7_fu_333_p3;
                icmp_ln353_reg_898 <= icmp_ln353_fu_341_p2;
                row_ptr_5_reg_885 <= row_ptr_5_fu_325_p3;
                select_ln351_3_reg_912 <= select_ln351_3_fu_431_p3;
                trunc_ln367_1_reg_916 <= trunc_ln367_1_fu_439_p1;
                trunc_ln367_3_reg_927 <= trunc_ln367_3_fu_457_p1;
                    zext_ln358_2_reg_932(5 downto 0) <= zext_ln358_2_fu_483_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln364_1_reg_921_pp0_iter1_reg <= add_ln364_1_reg_921;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln353_reg_898_pp0_iter1_reg <= icmp_ln353_reg_898;
                pos_y_0_mid1_reg_944 <= pos_y_0_mid1_fu_537_p2;
                pos_y_0_reg_856 <= pos_y_0_fu_210_p2;
                row_ptr_5_reg_885_pp0_iter1_reg <= row_ptr_5_reg_885;
                select_ln351_3_reg_912_pp0_iter1_reg <= select_ln351_3_reg_912;
                select_ln366_3_reg_960 <= select_ln366_3_fu_683_p3;
                select_ln366_reg_965 <= select_ln366_fu_691_p3;
                tmp_18_reg_861 <= or_ln366_fu_222_p2(31 downto 31);
                tmp_18_reg_861_pp0_iter1_reg <= tmp_18_reg_861;
                tmp_19_reg_866 <= or_ln366_1_fu_236_p2(31 downto 31);
                tmp_19_reg_866_pp0_iter1_reg <= tmp_19_reg_866;
                tmp_20_reg_871 <= or_ln366_2_fu_250_p2(31 downto 31);
                tmp_23_reg_876 <= or_ln366_3_fu_264_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                temp_window_elements_load2_fu_74 <= select_ln366_1_fu_751_p3;
                temp_window_elements_load_176_fu_78 <= select_ln366_2_fu_759_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                temp_window_elements_load_1810_fu_82 <= select_ln366_3_fu_683_p3;
                temp_window_elements_load_1914_fu_86 <= select_ln366_fu_691_p3;
            end if;
        end if;
    end process;
    zext_ln358_2_reg_932(10 downto 6) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln351_fu_284_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv15_1));
    add_ln353_fu_498_p2 <= std_logic_vector(unsigned(select_ln351_fu_347_p3) + unsigned(ap_const_lv6_1));
    add_ln358_1_fu_648_p2 <= std_logic_vector(unsigned(tmp_7_fu_530_p3) + unsigned(zext_ln358_2_reg_932));
    add_ln358_fu_413_p2 <= std_logic_vector(unsigned(trunc_ln358_fu_405_p1) + unsigned(trunc_ln358_1_fu_409_p1));
    add_ln364_1_fu_443_p2 <= std_logic_vector(unsigned(row_ptr_5_fu_325_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln364_fu_216_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_row_ptr_1) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln367_1_fu_599_p2 <= std_logic_vector(unsigned(trunc_ln367_2_fu_595_p1) + unsigned(trunc_ln367_3_reg_927));
    add_ln367_2_fu_469_p2 <= std_logic_vector(unsigned(trunc_ln367_4_fu_461_p1) + unsigned(trunc_ln367_5_fu_465_p1));
    add_ln367_3_fu_658_p2 <= std_logic_vector(unsigned(tmp_11_fu_604_p3) + unsigned(zext_ln358_2_reg_932));
    add_ln367_4_fu_668_p2 <= std_logic_vector(unsigned(tmp_10_fu_587_p3) + unsigned(zext_ln358_2_reg_932));
    add_ln367_5_fu_487_p2 <= std_logic_vector(unsigned(tmp_12_fu_475_p3) + unsigned(zext_ln358_2_fu_483_p1));
    add_ln367_fu_582_p2 <= std_logic_vector(unsigned(trunc_ln367_fu_578_p1) + unsigned(trunc_ln367_1_reg_916));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, conv2d_32_feature_map_stream122_empty_n, maxp2d_32_window_stream_full_n, select_ln351_3_reg_912_pp0_iter1_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((select_ln351_3_reg_912_pp0_iter1_reg = ap_const_lv1_1) and (maxp2d_32_window_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((conv2d_32_feature_map_stream122_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, conv2d_32_feature_map_stream122_empty_n, maxp2d_32_window_stream_full_n, select_ln351_3_reg_912_pp0_iter1_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((select_ln351_3_reg_912_pp0_iter1_reg = ap_const_lv1_1) and (maxp2d_32_window_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((conv2d_32_feature_map_stream122_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, conv2d_32_feature_map_stream122_empty_n, maxp2d_32_window_stream_full_n, select_ln351_3_reg_912_pp0_iter1_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((select_ln351_3_reg_912_pp0_iter1_reg = ap_const_lv1_1) and (maxp2d_32_window_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((conv2d_32_feature_map_stream122_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(conv2d_32_feature_map_stream122_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (conv2d_32_feature_map_stream122_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(maxp2d_32_window_stream_full_n, select_ln351_3_reg_912_pp0_iter1_reg)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((select_ln351_3_reg_912_pp0_iter1_reg = ap_const_lv1_1) and (maxp2d_32_window_stream_full_n = ap_const_logic_0));
    end process;


    ap_condition_214_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_214 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln351_fu_278_p2, ap_start_int)
    begin
        if (((icmp_ln351_fu_278_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_channel_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, channel_fu_70, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_channel_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_channel_load <= channel_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_col_ptr_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, col_ptr_fu_94, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_col_ptr_1 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_col_ptr_1 <= col_ptr_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_98, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_row_ptr_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, row_ptr_fu_90, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_row_ptr_1 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_row_ptr_1 <= row_ptr_fu_90;
        end if; 
    end process;

    bitcast_ln174_256_fu_771_p1 <= select_ln366_2_fu_759_p3;
    bitcast_ln174_257_fu_775_p1 <= select_ln366_3_reg_960;
    bitcast_ln174_258_fu_778_p1 <= select_ln366_reg_965;
    bitcast_ln174_fu_767_p1 <= select_ln366_1_fu_751_p3;
    cmp34_not_fu_198_p2 <= "1" when (ap_sig_allocacmp_col_ptr_1 = ap_const_lv32_1) else "0";
    cmp34_not_mid1_fu_419_p2 <= "1" when (col_ptr_7_fu_333_p3 = ap_const_lv32_1) else "0";
    col_ptr_5_fu_305_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_ptr_1) + unsigned(ap_const_lv32_1));
    col_ptr_6_fu_317_p3 <= 
        ap_const_lv32_0 when (icmp_ln377_fu_311_p2(0) = '1') else 
        col_ptr_5_fu_305_p2;
    col_ptr_7_fu_333_p3 <= 
        col_ptr_6_fu_317_p3 when (icmp_ln373_fu_299_p2(0) = '1') else 
        ap_sig_allocacmp_col_ptr_1;

    conv2d_32_feature_map_stream122_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv2d_32_feature_map_stream122_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_32_feature_map_stream122_blk_n <= conv2d_32_feature_map_stream122_empty_n;
        else 
            conv2d_32_feature_map_stream122_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    conv2d_32_feature_map_stream122_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_32_feature_map_stream122_read <= ap_const_logic_1;
        else 
            conv2d_32_feature_map_stream122_read <= ap_const_logic_0;
        end if; 
    end process;

    demorgan_fu_204_p2 <= (trunc_ln351_fu_194_p1 and cmp34_not_fu_198_p2);
    demorgan_mid1_fu_425_p2 <= (trunc_ln351_1_fu_355_p1 and cmp34_not_mid1_fu_419_p2);
    icmp_ln351_fu_278_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv15_6200) else "0";
    icmp_ln353_fu_341_p2 <= "1" when (ap_sig_allocacmp_channel_load = ap_const_lv6_20) else "0";
    icmp_ln373_fu_299_p2 <= "1" when (row_ptr_4_fu_293_p2 = ap_const_lv32_1C) else "0";
    icmp_ln377_fu_311_p2 <= "1" when (col_ptr_5_fu_305_p2 = ap_const_lv32_2) else "0";
    line_buffer_address0 <= zext_ln358_3_fu_653_p1(11 - 1 downto 0);
    line_buffer_address1 <= zext_ln367_3_fu_673_p1(11 - 1 downto 0);
    line_buffer_address2 <= zext_ln367_2_fu_663_p1(11 - 1 downto 0);
    line_buffer_address3 <= zext_ln367_4_fu_493_p1(11 - 1 downto 0);

    line_buffer_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_ce0 <= ap_const_logic_1;
        else 
            line_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_ce1 <= ap_const_logic_1;
        else 
            line_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_ce2 <= ap_const_logic_1;
        else 
            line_buffer_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_ce3 <= ap_const_logic_1;
        else 
            line_buffer_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_we0 <= ap_const_logic_1;
        else 
            line_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    maxp2d_32_window_stream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, maxp2d_32_window_stream_full_n, select_ln351_3_reg_912_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln351_3_reg_912_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            maxp2d_32_window_stream_blk_n <= maxp2d_32_window_stream_full_n;
        else 
            maxp2d_32_window_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    maxp2d_32_window_stream_din <= (((bitcast_ln174_258_fu_778_p1 & bitcast_ln174_257_fu_775_p1) & bitcast_ln174_256_fu_771_p1) & bitcast_ln174_fu_767_p1);

    maxp2d_32_window_stream_write_assign_proc : process(ap_enable_reg_pp0_iter2, select_ln351_3_reg_912_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln351_3_reg_912_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            maxp2d_32_window_stream_write <= ap_const_logic_1;
        else 
            maxp2d_32_window_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln366_1_fu_236_p2 <= (pos_y_0_fu_210_p2 or ap_sig_allocacmp_row_ptr_1);
    or_ln366_2_fu_250_p2 <= (ap_sig_allocacmp_col_ptr_1 or add_ln364_fu_216_p2);
    or_ln366_3_fu_264_p2 <= (ap_sig_allocacmp_row_ptr_1 or ap_sig_allocacmp_col_ptr_1);
    or_ln366_4_fu_715_p2 <= (pos_y_0_mid1_reg_944 or add_ln364_1_reg_921_pp0_iter1_reg);
    or_ln366_5_fu_733_p2 <= (row_ptr_5_reg_885_pp0_iter1_reg or pos_y_0_mid1_reg_944);
    or_ln366_6_fu_612_p2 <= (col_ptr_7_reg_891 or add_ln364_1_reg_921);
    or_ln366_7_fu_630_p2 <= (row_ptr_5_reg_885 or col_ptr_7_reg_891);
    or_ln366_fu_222_p2 <= (pos_y_0_fu_210_p2 or add_ln364_fu_216_p2);
    pos_y_0_fu_210_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_ptr_1) + unsigned(ap_const_lv32_FFFFFFFF));
    pos_y_0_mid1_fu_537_p2 <= std_logic_vector(unsigned(col_ptr_7_reg_891) + unsigned(ap_const_lv32_FFFFFFFF));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    row_ptr_4_fu_293_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_row_ptr_1) + unsigned(ap_const_lv32_1));
    row_ptr_5_fu_325_p3 <= 
        ap_const_lv32_0 when (icmp_ln373_fu_299_p2(0) = '1') else 
        row_ptr_4_fu_293_p2;
    select_ln351_1_fu_359_p3 <= 
        col_ptr_7_fu_333_p3 when (icmp_ln353_fu_341_p2(0) = '1') else 
        ap_sig_allocacmp_col_ptr_1;
    select_ln351_2_fu_397_p3 <= 
        row_ptr_5_fu_325_p3 when (icmp_ln353_fu_341_p2(0) = '1') else 
        ap_sig_allocacmp_row_ptr_1;
    select_ln351_3_fu_431_p3 <= 
        demorgan_mid1_fu_425_p2 when (icmp_ln353_fu_341_p2(0) = '1') else 
        demorgan_fu_204_p2;
    select_ln351_4_fu_542_p3 <= 
        pos_y_0_mid1_fu_537_p2 when (icmp_ln353_reg_898(0) = '1') else 
        pos_y_0_reg_856;
    select_ln351_5_fu_727_p3 <= 
        tmp_24_fu_719_p3 when (icmp_ln353_reg_898_pp0_iter1_reg(0) = '1') else 
        tmp_18_reg_861_pp0_iter1_reg;
    select_ln351_6_fu_449_p3 <= 
        add_ln364_1_fu_443_p2 when (icmp_ln353_fu_341_p2(0) = '1') else 
        add_ln364_fu_216_p2;
    select_ln351_7_fu_745_p3 <= 
        tmp_25_fu_737_p3 when (icmp_ln353_reg_898_pp0_iter1_reg(0) = '1') else 
        tmp_19_reg_866_pp0_iter1_reg;
    select_ln351_8_fu_624_p3 <= 
        tmp_26_fu_616_p3 when (icmp_ln353_reg_898(0) = '1') else 
        tmp_20_reg_871;
    select_ln351_9_fu_642_p3 <= 
        tmp_27_fu_634_p3 when (icmp_ln353_reg_898(0) = '1') else 
        tmp_23_reg_876;
    select_ln351_fu_347_p3 <= 
        ap_const_lv6_0 when (icmp_ln353_fu_341_p2(0) = '1') else 
        ap_sig_allocacmp_channel_load;
    select_ln366_1_fu_751_p3 <= 
        temp_window_elements_load2_fu_74 when (select_ln351_5_fu_727_p3(0) = '1') else 
        line_buffer_q2;
    select_ln366_2_fu_759_p3 <= 
        temp_window_elements_load_176_fu_78 when (select_ln351_7_fu_745_p3(0) = '1') else 
        line_buffer_q1;
    select_ln366_3_fu_683_p3 <= 
        temp_window_elements_load_1810_fu_82 when (select_ln351_8_fu_624_p3(0) = '1') else 
        line_buffer_q3;
    select_ln366_fu_691_p3 <= 
        temp_window_elements_load_1914_fu_86 when (select_ln351_9_fu_642_p3(0) = '1') else 
        tmp_fu_678_p1;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln358_fu_391_p2 <= std_logic_vector(unsigned(zext_ln358_fu_375_p1) - unsigned(zext_ln358_1_fu_387_p1));
    sub_ln367_fu_572_p2 <= std_logic_vector(unsigned(zext_ln367_fu_556_p1) - unsigned(zext_ln367_1_fu_568_p1));
    tmp_10_fu_587_p3 <= (add_ln367_fu_582_p2 & ap_const_lv5_0);
    tmp_11_fu_604_p3 <= (add_ln367_1_fu_599_p2 & ap_const_lv5_0);
    tmp_12_fu_475_p3 <= (add_ln367_2_fu_469_p2 & ap_const_lv5_0);
    tmp_24_fu_719_p3 <= or_ln366_4_fu_715_p2(31 downto 31);
    tmp_25_fu_737_p3 <= or_ln366_5_fu_733_p2(31 downto 31);
    tmp_26_fu_616_p3 <= or_ln366_6_fu_612_p2(31 downto 31);
    tmp_27_fu_634_p3 <= or_ln366_7_fu_630_p2(31 downto 31);
    tmp_5_fu_367_p3 <= (select_ln351_1_fu_359_p3 & ap_const_lv5_0);
    tmp_6_fu_379_p3 <= (select_ln351_1_fu_359_p3 & ap_const_lv2_0);
    tmp_7_fu_530_p3 <= (add_ln358_reg_907 & ap_const_lv5_0);
    tmp_8_fu_548_p3 <= (select_ln351_4_fu_542_p3 & ap_const_lv5_0);
    tmp_9_fu_560_p3 <= (select_ln351_4_fu_542_p3 & ap_const_lv2_0);
    tmp_fu_678_p1 <= conv2d_32_feature_map_stream122_dout;
    trunc_ln351_1_fu_355_p1 <= row_ptr_5_fu_325_p3(1 - 1 downto 0);
    trunc_ln351_fu_194_p1 <= ap_sig_allocacmp_row_ptr_1(1 - 1 downto 0);
    trunc_ln358_1_fu_409_p1 <= select_ln351_2_fu_397_p3(6 - 1 downto 0);
    trunc_ln358_fu_405_p1 <= sub_ln358_fu_391_p2(6 - 1 downto 0);
    trunc_ln367_1_fu_439_p1 <= select_ln351_2_fu_397_p3(6 - 1 downto 0);
    trunc_ln367_2_fu_595_p1 <= sub_ln367_fu_572_p2(6 - 1 downto 0);
    trunc_ln367_3_fu_457_p1 <= select_ln351_6_fu_449_p3(6 - 1 downto 0);
    trunc_ln367_4_fu_461_p1 <= sub_ln358_fu_391_p2(6 - 1 downto 0);
    trunc_ln367_5_fu_465_p1 <= select_ln351_6_fu_449_p3(6 - 1 downto 0);
    trunc_ln367_fu_578_p1 <= sub_ln367_fu_572_p2(6 - 1 downto 0);
    zext_ln358_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_379_p3),38));
    zext_ln358_2_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln351_fu_347_p3),11));
    zext_ln358_3_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln358_1_fu_648_p2),64));
    zext_ln358_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_367_p3),38));
    zext_ln367_1_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_560_p3),38));
    zext_ln367_2_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln367_3_fu_658_p2),64));
    zext_ln367_3_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln367_4_fu_668_p2),64));
    zext_ln367_4_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln367_5_fu_487_p2),64));
    zext_ln367_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_548_p3),38));
end behav;
