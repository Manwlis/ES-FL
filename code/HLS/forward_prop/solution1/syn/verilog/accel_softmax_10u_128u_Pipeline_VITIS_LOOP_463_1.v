// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accel_softmax_10u_128u_Pipeline_VITIS_LOOP_463_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        biases_address0,
        biases_ce0,
        biases_q0,
        sum_9_out,
        sum_9_out_ap_vld,
        sum_8_out,
        sum_8_out_ap_vld,
        sum_7_out,
        sum_7_out_ap_vld,
        sum_6_out,
        sum_6_out_ap_vld,
        sum_5_out,
        sum_5_out_ap_vld,
        sum_4_out,
        sum_4_out_ap_vld,
        sum_3_out,
        sum_3_out_ap_vld,
        sum_2_out,
        sum_2_out_ap_vld,
        sum_1_out,
        sum_1_out_ap_vld,
        sum_out,
        sum_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] biases_address0;
output   biases_ce0;
input  [31:0] biases_q0;
output  [31:0] sum_9_out;
output   sum_9_out_ap_vld;
output  [31:0] sum_8_out;
output   sum_8_out_ap_vld;
output  [31:0] sum_7_out;
output   sum_7_out_ap_vld;
output  [31:0] sum_6_out;
output   sum_6_out_ap_vld;
output  [31:0] sum_5_out;
output   sum_5_out_ap_vld;
output  [31:0] sum_4_out;
output   sum_4_out_ap_vld;
output  [31:0] sum_3_out;
output   sum_3_out_ap_vld;
output  [31:0] sum_2_out;
output   sum_2_out_ap_vld;
output  [31:0] sum_1_out;
output   sum_1_out_ap_vld;
output  [31:0] sum_out;
output   sum_out_ap_vld;

reg ap_idle;
reg biases_ce0;
reg sum_9_out_ap_vld;
reg sum_8_out_ap_vld;
reg sum_7_out_ap_vld;
reg sum_6_out_ap_vld;
reg sum_5_out_ap_vld;
reg sum_4_out_ap_vld;
reg sum_3_out_ap_vld;
reg sum_2_out_ap_vld;
reg sum_1_out_ap_vld;
reg sum_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln463_fu_199_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [3:0] kernel_2_reg_378;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] trunc_ln464_cast_fu_211_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] kernel_fu_64;
wire   [3:0] add_ln463_fu_205_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_kernel_2;
reg   [31:0] sum_fu_68;
reg   [31:0] sum_1_fu_72;
reg   [31:0] sum_2_fu_76;
reg   [31:0] sum_3_fu_80;
reg   [31:0] sum_4_fu_84;
reg   [31:0] sum_5_fu_88;
reg   [31:0] sum_6_fu_92;
reg   [31:0] sum_7_fu_96;
reg   [31:0] sum_8_fu_100;
reg   [31:0] sum_9_fu_104;
wire    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln463_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            kernel_fu_64 <= add_ln463_fu_205_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            kernel_fu_64 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_2_reg_378 <= ap_sig_allocacmp_kernel_2;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_2_reg_378 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_1_fu_72 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_2_reg_378 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_2_fu_76 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_2_reg_378 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_3_fu_80 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_2_reg_378 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_4_fu_84 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_2_reg_378 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_5_fu_88 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_2_reg_378 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_6_fu_92 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_2_reg_378 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_7_fu_96 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_2_reg_378 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_8_fu_100 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((kernel_2_reg_378 == 4'd9) | ((kernel_2_reg_378 == 4'd10) | ((kernel_2_reg_378 == 4'd11) | ((kernel_2_reg_378 == 4'd12) | ((kernel_2_reg_378 == 4'd13) | ((kernel_2_reg_378 == 4'd14) | (kernel_2_reg_378 == 4'd15))))))))) begin
        sum_9_fu_104 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_2_reg_378 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_fu_68 <= biases_q0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_kernel_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_kernel_2 = kernel_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        biases_ce0 = 1'b1;
    end else begin
        biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_1_out_ap_vld = 1'b1;
    end else begin
        sum_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_2_out_ap_vld = 1'b1;
    end else begin
        sum_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_3_out_ap_vld = 1'b1;
    end else begin
        sum_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_4_out_ap_vld = 1'b1;
    end else begin
        sum_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_5_out_ap_vld = 1'b1;
    end else begin
        sum_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_6_out_ap_vld = 1'b1;
    end else begin
        sum_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_7_out_ap_vld = 1'b1;
    end else begin
        sum_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_8_out_ap_vld = 1'b1;
    end else begin
        sum_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_9_out_ap_vld = 1'b1;
    end else begin
        sum_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln463_fu_199_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_out_ap_vld = 1'b1;
    end else begin
        sum_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln463_fu_205_p2 = (ap_sig_allocacmp_kernel_2 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign biases_address0 = trunc_ln464_cast_fu_211_p1;

assign icmp_ln463_fu_199_p2 = ((ap_sig_allocacmp_kernel_2 == 4'd10) ? 1'b1 : 1'b0);

assign sum_1_out = sum_1_fu_72;

assign sum_2_out = sum_2_fu_76;

assign sum_3_out = sum_3_fu_80;

assign sum_4_out = sum_4_fu_84;

assign sum_5_out = sum_5_fu_88;

assign sum_6_out = sum_6_fu_92;

assign sum_7_out = sum_7_fu_96;

assign sum_8_out = sum_8_fu_100;

assign sum_9_out = sum_9_fu_104;

assign sum_out = sum_fu_68;

assign trunc_ln464_cast_fu_211_p1 = ap_sig_allocacmp_kernel_2;

endmodule //accel_softmax_10u_128u_Pipeline_VITIS_LOOP_463_1
