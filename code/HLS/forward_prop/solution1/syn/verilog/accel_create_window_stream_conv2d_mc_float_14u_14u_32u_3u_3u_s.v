// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        maxp2d_32_feature_map_stream124_dout,
        maxp2d_32_feature_map_stream124_num_data_valid,
        maxp2d_32_feature_map_stream124_fifo_cap,
        maxp2d_32_feature_map_stream124_empty_n,
        maxp2d_32_feature_map_stream124_read,
        conv2d_64_window_stream_din,
        conv2d_64_window_stream_num_data_valid,
        conv2d_64_window_stream_fifo_cap,
        conv2d_64_window_stream_full_n,
        conv2d_64_window_stream_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] maxp2d_32_feature_map_stream124_dout;
input  [2:0] maxp2d_32_feature_map_stream124_num_data_valid;
input  [2:0] maxp2d_32_feature_map_stream124_fifo_cap;
input   maxp2d_32_feature_map_stream124_empty_n;
output   maxp2d_32_feature_map_stream124_read;
output  [287:0] conv2d_64_window_stream_din;
input  [2:0] conv2d_64_window_stream_num_data_valid;
input  [2:0] conv2d_64_window_stream_fifo_cap;
input   conv2d_64_window_stream_full_n;
output   conv2d_64_window_stream_write;
output   start_out;
output   start_write;

reg ap_idle;
reg maxp2d_32_feature_map_stream124_read;
reg conv2d_64_window_stream_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln203_reg_1246;
reg   [0:0] select_ln203_1_reg_1250;
reg    ap_predicate_op168_read_state2;
reg   [0:0] select_ln203_2_reg_1254;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln203_fu_887_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    maxp2d_32_feature_map_stream124_blk_n;
wire    ap_block_pp0_stage0;
reg    conv2d_64_window_stream_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] select_ln203_1_fu_960_p3;
wire   [0:0] select_ln203_2_fu_980_p3;
wire   [31:0] select_ln203_3_fu_988_p3;
reg   [31:0] select_ln203_3_reg_1258;
wire   [3:0] trunc_ln203_fu_996_p1;
reg   [3:0] trunc_ln203_reg_1264;
reg   [4:0] temp_windows_elements_0_1_addr_reg_1268;
reg   [4:0] temp_windows_elements_0_2_addr_reg_1274;
reg   [4:0] line_buffer_0_addr_reg_1280;
reg   [4:0] line_buffer_0_1_addr_reg_1286;
reg   [4:0] line_buffer_0_2_addr_reg_1292;
reg   [4:0] line_buffer_0_3_addr_reg_1298;
reg   [4:0] line_buffer_0_4_addr_reg_1304;
reg   [4:0] line_buffer_0_5_addr_reg_1310;
reg   [4:0] line_buffer_0_6_addr_reg_1316;
reg   [4:0] line_buffer_0_7_addr_reg_1322;
reg   [4:0] line_buffer_0_8_addr_reg_1328;
reg   [4:0] line_buffer_0_9_addr_reg_1334;
reg   [4:0] line_buffer_0_10_addr_reg_1340;
reg   [4:0] line_buffer_0_11_addr_reg_1346;
reg   [4:0] line_buffer_0_12_addr_reg_1352;
reg   [4:0] line_buffer_0_13_addr_reg_1358;
reg   [4:0] temp_windows_elements_1_1_addr_reg_1364;
reg   [4:0] temp_windows_elements_1_2_addr_reg_1370;
reg   [4:0] line_buffer_1_addr_reg_1376;
reg   [4:0] line_buffer_1_1_addr_reg_1382;
reg   [4:0] line_buffer_1_2_addr_reg_1388;
reg   [4:0] line_buffer_1_3_addr_reg_1394;
reg   [4:0] line_buffer_1_4_addr_reg_1400;
reg   [4:0] line_buffer_1_5_addr_reg_1406;
reg   [4:0] line_buffer_1_6_addr_reg_1412;
reg   [4:0] line_buffer_1_7_addr_reg_1418;
reg   [4:0] line_buffer_1_8_addr_reg_1424;
reg   [4:0] line_buffer_1_9_addr_reg_1430;
reg   [4:0] line_buffer_1_10_addr_reg_1436;
reg   [4:0] line_buffer_1_11_addr_reg_1442;
reg   [4:0] line_buffer_1_12_addr_reg_1448;
reg   [4:0] line_buffer_1_13_addr_reg_1454;
reg   [4:0] temp_windows_elements_2_1_addr_reg_1460;
reg   [4:0] temp_windows_elements_2_2_addr_reg_1466;
reg    line_buffer_0_ce0;
reg    line_buffer_0_we0;
wire   [4:0] line_buffer_0_address1;
reg    line_buffer_0_ce1;
wire   [31:0] line_buffer_0_q1;
reg    line_buffer_1_ce0;
reg    line_buffer_1_we0;
wire   [4:0] line_buffer_1_address1;
reg    line_buffer_1_ce1;
wire   [31:0] line_buffer_1_q1;
reg    line_buffer_0_1_ce0;
reg    line_buffer_0_1_we0;
wire   [4:0] line_buffer_0_1_address1;
reg    line_buffer_0_1_ce1;
wire   [31:0] line_buffer_0_1_q1;
reg    line_buffer_1_1_ce0;
reg    line_buffer_1_1_we0;
wire   [4:0] line_buffer_1_1_address1;
reg    line_buffer_1_1_ce1;
wire   [31:0] line_buffer_1_1_q1;
reg    line_buffer_0_2_ce0;
reg    line_buffer_0_2_we0;
wire   [4:0] line_buffer_0_2_address1;
reg    line_buffer_0_2_ce1;
wire   [31:0] line_buffer_0_2_q1;
reg    line_buffer_1_2_ce0;
reg    line_buffer_1_2_we0;
wire   [4:0] line_buffer_1_2_address1;
reg    line_buffer_1_2_ce1;
wire   [31:0] line_buffer_1_2_q1;
reg    line_buffer_0_3_ce0;
reg    line_buffer_0_3_we0;
wire   [4:0] line_buffer_0_3_address1;
reg    line_buffer_0_3_ce1;
wire   [31:0] line_buffer_0_3_q1;
reg    line_buffer_1_3_ce0;
reg    line_buffer_1_3_we0;
wire   [4:0] line_buffer_1_3_address1;
reg    line_buffer_1_3_ce1;
wire   [31:0] line_buffer_1_3_q1;
reg    line_buffer_0_4_ce0;
reg    line_buffer_0_4_we0;
wire   [4:0] line_buffer_0_4_address1;
reg    line_buffer_0_4_ce1;
wire   [31:0] line_buffer_0_4_q1;
reg    line_buffer_1_4_ce0;
reg    line_buffer_1_4_we0;
wire   [4:0] line_buffer_1_4_address1;
reg    line_buffer_1_4_ce1;
wire   [31:0] line_buffer_1_4_q1;
reg    line_buffer_0_5_ce0;
reg    line_buffer_0_5_we0;
wire   [4:0] line_buffer_0_5_address1;
reg    line_buffer_0_5_ce1;
wire   [31:0] line_buffer_0_5_q1;
reg    line_buffer_1_5_ce0;
reg    line_buffer_1_5_we0;
wire   [4:0] line_buffer_1_5_address1;
reg    line_buffer_1_5_ce1;
wire   [31:0] line_buffer_1_5_q1;
reg    line_buffer_0_6_ce0;
reg    line_buffer_0_6_we0;
wire   [4:0] line_buffer_0_6_address1;
reg    line_buffer_0_6_ce1;
wire   [31:0] line_buffer_0_6_q1;
reg    line_buffer_1_6_ce0;
reg    line_buffer_1_6_we0;
wire   [4:0] line_buffer_1_6_address1;
reg    line_buffer_1_6_ce1;
wire   [31:0] line_buffer_1_6_q1;
reg    line_buffer_0_7_ce0;
reg    line_buffer_0_7_we0;
wire   [4:0] line_buffer_0_7_address1;
reg    line_buffer_0_7_ce1;
wire   [31:0] line_buffer_0_7_q1;
reg    line_buffer_1_7_ce0;
reg    line_buffer_1_7_we0;
wire   [4:0] line_buffer_1_7_address1;
reg    line_buffer_1_7_ce1;
wire   [31:0] line_buffer_1_7_q1;
reg    line_buffer_0_8_ce0;
reg    line_buffer_0_8_we0;
wire   [4:0] line_buffer_0_8_address1;
reg    line_buffer_0_8_ce1;
wire   [31:0] line_buffer_0_8_q1;
reg    line_buffer_1_8_ce0;
reg    line_buffer_1_8_we0;
wire   [4:0] line_buffer_1_8_address1;
reg    line_buffer_1_8_ce1;
wire   [31:0] line_buffer_1_8_q1;
reg    line_buffer_0_9_ce0;
reg    line_buffer_0_9_we0;
wire   [4:0] line_buffer_0_9_address1;
reg    line_buffer_0_9_ce1;
wire   [31:0] line_buffer_0_9_q1;
reg    line_buffer_1_9_ce0;
reg    line_buffer_1_9_we0;
wire   [4:0] line_buffer_1_9_address1;
reg    line_buffer_1_9_ce1;
wire   [31:0] line_buffer_1_9_q1;
reg    line_buffer_0_10_ce0;
reg    line_buffer_0_10_we0;
wire   [4:0] line_buffer_0_10_address1;
reg    line_buffer_0_10_ce1;
wire   [31:0] line_buffer_0_10_q1;
reg    line_buffer_1_10_ce0;
reg    line_buffer_1_10_we0;
wire   [4:0] line_buffer_1_10_address1;
reg    line_buffer_1_10_ce1;
wire   [31:0] line_buffer_1_10_q1;
reg    line_buffer_0_11_ce0;
reg    line_buffer_0_11_we0;
wire   [4:0] line_buffer_0_11_address1;
reg    line_buffer_0_11_ce1;
wire   [31:0] line_buffer_0_11_q1;
reg    line_buffer_1_11_ce0;
reg    line_buffer_1_11_we0;
wire   [4:0] line_buffer_1_11_address1;
reg    line_buffer_1_11_ce1;
wire   [31:0] line_buffer_1_11_q1;
reg    line_buffer_0_12_ce0;
reg    line_buffer_0_12_we0;
wire   [4:0] line_buffer_0_12_address1;
reg    line_buffer_0_12_ce1;
wire   [31:0] line_buffer_0_12_q1;
reg    line_buffer_1_12_ce0;
reg    line_buffer_1_12_we0;
wire   [4:0] line_buffer_1_12_address1;
reg    line_buffer_1_12_ce1;
wire   [31:0] line_buffer_1_12_q1;
reg    line_buffer_0_13_ce0;
reg    line_buffer_0_13_we0;
wire   [4:0] line_buffer_0_13_address1;
reg    line_buffer_0_13_ce1;
wire   [31:0] line_buffer_0_13_q1;
reg    line_buffer_1_13_ce0;
reg    line_buffer_1_13_we0;
wire   [4:0] line_buffer_1_13_address1;
reg    line_buffer_1_13_ce1;
wire   [31:0] line_buffer_1_13_q1;
reg    temp_windows_elements_0_1_ce0;
reg    temp_windows_elements_0_1_we0;
wire   [4:0] temp_windows_elements_0_1_address1;
reg    temp_windows_elements_0_1_ce1;
wire   [31:0] temp_windows_elements_0_1_q1;
reg    temp_windows_elements_0_2_ce0;
reg    temp_windows_elements_0_2_we0;
wire   [4:0] temp_windows_elements_0_2_address1;
reg    temp_windows_elements_0_2_ce1;
wire   [31:0] temp_windows_elements_0_2_q1;
reg    temp_windows_elements_1_1_ce0;
reg    temp_windows_elements_1_1_we0;
wire   [4:0] temp_windows_elements_1_1_address1;
reg    temp_windows_elements_1_1_ce1;
wire   [31:0] temp_windows_elements_1_1_q1;
reg    temp_windows_elements_1_2_ce0;
reg    temp_windows_elements_1_2_we0;
wire   [4:0] temp_windows_elements_1_2_address1;
reg    temp_windows_elements_1_2_ce1;
wire   [31:0] temp_windows_elements_1_2_q1;
reg    temp_windows_elements_2_1_ce0;
reg    temp_windows_elements_2_1_we0;
wire   [4:0] temp_windows_elements_2_1_address1;
reg    temp_windows_elements_2_1_ce1;
wire   [31:0] temp_windows_elements_2_1_q1;
reg    temp_windows_elements_2_2_ce0;
reg    temp_windows_elements_2_2_we0;
wire   [4:0] temp_windows_elements_2_2_address1;
reg    temp_windows_elements_2_2_ce1;
wire   [31:0] temp_windows_elements_2_2_q1;
reg   [31:0] ap_phi_mux_new_pixel_1_phi_fu_842_p4;
wire   [31:0] tmp_fu_1072_p1;
reg   [31:0] ap_phi_reg_pp0_iter1_new_pixel_1_reg_838;
wire   [31:0] ap_phi_reg_pp0_iter0_new_pixel_1_reg_838;
wire   [63:0] channel_1_cast_fu_1008_p1;
reg   [5:0] channel_fu_92;
wire   [5:0] add_ln205_fu_1046_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_channel_load;
reg   [7:0] pixel_counter_fu_96;
wire   [7:0] select_ln203_4_fu_1000_p3;
reg   [7:0] ap_sig_allocacmp_pixel_counter_load;
reg   [31:0] col_ptr_fu_100;
reg   [31:0] ap_sig_allocacmp_col_ptr_load;
reg   [12:0] indvar_flatten_fu_104;
wire   [12:0] add_ln203_fu_893_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_s_fu_1077_p16;
wire   [31:0] tmp_1_fu_1111_p16;
wire   [0:0] icmp_ln232_fu_908_p2;
wire   [31:0] col_ptr_15_fu_914_p2;
wire   [0:0] icmp_ln205_fu_934_p2;
wire   [7:0] pixel_counter_2_fu_928_p2;
wire   [0:0] cmp6_mid1_fu_948_p2;
wire   [0:0] cmp6203_fu_954_p2;
wire   [0:0] cmp77_mid1_fu_968_p2;
wire   [0:0] cmp77202_fu_974_p2;
wire   [31:0] col_ptr_16_fu_920_p3;
wire   [5:0] select_ln203_fu_940_p3;
wire   [31:0] bitcast_ln174_269_fu_1191_p1;
wire   [31:0] bitcast_ln174_268_fu_1187_p1;
wire   [31:0] bitcast_ln174_267_fu_1183_p1;
wire   [31:0] bitcast_ln174_266_fu_1179_p1;
wire   [31:0] bitcast_ln174_265_fu_1175_p1;
wire   [31:0] bitcast_ln174_264_fu_1171_p1;
wire   [31:0] bitcast_ln174_263_fu_1167_p1;
wire   [31:0] bitcast_ln174_262_fu_1163_p1;
wire   [31:0] bitcast_ln174_fu_1159_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_571;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_addr_reg_1280),
    .ce0(line_buffer_0_ce0),
    .we0(line_buffer_0_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_address1),
    .ce1(line_buffer_0_ce1),
    .q1(line_buffer_0_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_addr_reg_1376),
    .ce0(line_buffer_1_ce0),
    .we0(line_buffer_1_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_address1),
    .ce1(line_buffer_1_ce1),
    .q1(line_buffer_1_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_1_addr_reg_1286),
    .ce0(line_buffer_0_1_ce0),
    .we0(line_buffer_0_1_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_1_address1),
    .ce1(line_buffer_0_1_ce1),
    .q1(line_buffer_0_1_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_1_addr_reg_1382),
    .ce0(line_buffer_1_1_ce0),
    .we0(line_buffer_1_1_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_1_address1),
    .ce1(line_buffer_1_1_ce1),
    .q1(line_buffer_1_1_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_2_addr_reg_1292),
    .ce0(line_buffer_0_2_ce0),
    .we0(line_buffer_0_2_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_2_address1),
    .ce1(line_buffer_0_2_ce1),
    .q1(line_buffer_0_2_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_2_addr_reg_1388),
    .ce0(line_buffer_1_2_ce0),
    .we0(line_buffer_1_2_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_2_address1),
    .ce1(line_buffer_1_2_ce1),
    .q1(line_buffer_1_2_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_3_addr_reg_1298),
    .ce0(line_buffer_0_3_ce0),
    .we0(line_buffer_0_3_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_3_address1),
    .ce1(line_buffer_0_3_ce1),
    .q1(line_buffer_0_3_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_3_addr_reg_1394),
    .ce0(line_buffer_1_3_ce0),
    .we0(line_buffer_1_3_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_3_address1),
    .ce1(line_buffer_1_3_ce1),
    .q1(line_buffer_1_3_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_4_addr_reg_1304),
    .ce0(line_buffer_0_4_ce0),
    .we0(line_buffer_0_4_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_4_address1),
    .ce1(line_buffer_0_4_ce1),
    .q1(line_buffer_0_4_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_4_addr_reg_1400),
    .ce0(line_buffer_1_4_ce0),
    .we0(line_buffer_1_4_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_4_address1),
    .ce1(line_buffer_1_4_ce1),
    .q1(line_buffer_1_4_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_5_addr_reg_1310),
    .ce0(line_buffer_0_5_ce0),
    .we0(line_buffer_0_5_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_5_address1),
    .ce1(line_buffer_0_5_ce1),
    .q1(line_buffer_0_5_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_5_addr_reg_1406),
    .ce0(line_buffer_1_5_ce0),
    .we0(line_buffer_1_5_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_5_address1),
    .ce1(line_buffer_1_5_ce1),
    .q1(line_buffer_1_5_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_6_addr_reg_1316),
    .ce0(line_buffer_0_6_ce0),
    .we0(line_buffer_0_6_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_6_address1),
    .ce1(line_buffer_0_6_ce1),
    .q1(line_buffer_0_6_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_6_addr_reg_1412),
    .ce0(line_buffer_1_6_ce0),
    .we0(line_buffer_1_6_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_6_address1),
    .ce1(line_buffer_1_6_ce1),
    .q1(line_buffer_1_6_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_7_addr_reg_1322),
    .ce0(line_buffer_0_7_ce0),
    .we0(line_buffer_0_7_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_7_address1),
    .ce1(line_buffer_0_7_ce1),
    .q1(line_buffer_0_7_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_7_addr_reg_1418),
    .ce0(line_buffer_1_7_ce0),
    .we0(line_buffer_1_7_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_7_address1),
    .ce1(line_buffer_1_7_ce1),
    .q1(line_buffer_1_7_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_8_addr_reg_1328),
    .ce0(line_buffer_0_8_ce0),
    .we0(line_buffer_0_8_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_8_address1),
    .ce1(line_buffer_0_8_ce1),
    .q1(line_buffer_0_8_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_8_addr_reg_1424),
    .ce0(line_buffer_1_8_ce0),
    .we0(line_buffer_1_8_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_8_address1),
    .ce1(line_buffer_1_8_ce1),
    .q1(line_buffer_1_8_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_9_addr_reg_1334),
    .ce0(line_buffer_0_9_ce0),
    .we0(line_buffer_0_9_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_9_address1),
    .ce1(line_buffer_0_9_ce1),
    .q1(line_buffer_0_9_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_9_addr_reg_1430),
    .ce0(line_buffer_1_9_ce0),
    .we0(line_buffer_1_9_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_9_address1),
    .ce1(line_buffer_1_9_ce1),
    .q1(line_buffer_1_9_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_10_addr_reg_1340),
    .ce0(line_buffer_0_10_ce0),
    .we0(line_buffer_0_10_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_10_address1),
    .ce1(line_buffer_0_10_ce1),
    .q1(line_buffer_0_10_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_10_addr_reg_1436),
    .ce0(line_buffer_1_10_ce0),
    .we0(line_buffer_1_10_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_10_address1),
    .ce1(line_buffer_1_10_ce1),
    .q1(line_buffer_1_10_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_11_addr_reg_1346),
    .ce0(line_buffer_0_11_ce0),
    .we0(line_buffer_0_11_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_11_address1),
    .ce1(line_buffer_0_11_ce1),
    .q1(line_buffer_0_11_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_11_addr_reg_1442),
    .ce0(line_buffer_1_11_ce0),
    .we0(line_buffer_1_11_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_11_address1),
    .ce1(line_buffer_1_11_ce1),
    .q1(line_buffer_1_11_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_12_addr_reg_1352),
    .ce0(line_buffer_0_12_ce0),
    .we0(line_buffer_0_12_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_12_address1),
    .ce1(line_buffer_0_12_ce1),
    .q1(line_buffer_0_12_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_12_addr_reg_1448),
    .ce0(line_buffer_1_12_ce0),
    .we0(line_buffer_1_12_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_12_address1),
    .ce1(line_buffer_1_12_ce1),
    .q1(line_buffer_1_12_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_0_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_13_addr_reg_1358),
    .ce0(line_buffer_0_13_ce0),
    .we0(line_buffer_0_13_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(line_buffer_0_13_address1),
    .ce1(line_buffer_0_13_ce1),
    .q1(line_buffer_0_13_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
line_buffer_1_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_13_addr_reg_1454),
    .ce0(line_buffer_1_13_ce0),
    .we0(line_buffer_1_13_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(line_buffer_1_13_address1),
    .ce1(line_buffer_1_13_ce1),
    .q1(line_buffer_1_13_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_windows_elements_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_windows_elements_0_1_addr_reg_1268),
    .ce0(temp_windows_elements_0_1_ce0),
    .we0(temp_windows_elements_0_1_we0),
    .d0(temp_windows_elements_0_2_q1),
    .address1(temp_windows_elements_0_1_address1),
    .ce1(temp_windows_elements_0_1_ce1),
    .q1(temp_windows_elements_0_1_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_windows_elements_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_windows_elements_0_2_addr_reg_1274),
    .ce0(temp_windows_elements_0_2_ce0),
    .we0(temp_windows_elements_0_2_we0),
    .d0(tmp_s_fu_1077_p16),
    .address1(temp_windows_elements_0_2_address1),
    .ce1(temp_windows_elements_0_2_ce1),
    .q1(temp_windows_elements_0_2_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_windows_elements_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_windows_elements_1_1_addr_reg_1364),
    .ce0(temp_windows_elements_1_1_ce0),
    .we0(temp_windows_elements_1_1_we0),
    .d0(temp_windows_elements_1_2_q1),
    .address1(temp_windows_elements_1_1_address1),
    .ce1(temp_windows_elements_1_1_ce1),
    .q1(temp_windows_elements_1_1_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_windows_elements_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_windows_elements_1_2_addr_reg_1370),
    .ce0(temp_windows_elements_1_2_ce0),
    .we0(temp_windows_elements_1_2_we0),
    .d0(tmp_1_fu_1111_p16),
    .address1(temp_windows_elements_1_2_address1),
    .ce1(temp_windows_elements_1_2_ce1),
    .q1(temp_windows_elements_1_2_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_windows_elements_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_windows_elements_2_1_addr_reg_1460),
    .ce0(temp_windows_elements_2_1_ce0),
    .we0(temp_windows_elements_2_1_we0),
    .d0(temp_windows_elements_2_2_q1),
    .address1(temp_windows_elements_2_1_address1),
    .ce1(temp_windows_elements_2_1_ce1),
    .q1(temp_windows_elements_2_1_q1)
);

accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
temp_windows_elements_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_windows_elements_2_2_addr_reg_1466),
    .ce0(temp_windows_elements_2_2_ce0),
    .we0(temp_windows_elements_2_2_we0),
    .d0(ap_phi_mux_new_pixel_1_phi_fu_842_p4),
    .address1(temp_windows_elements_2_2_address1),
    .ce1(temp_windows_elements_2_2_ce1),
    .q1(temp_windows_elements_2_2_q1)
);

accel_mux_1432_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mux_1432_32_1_1_U517(
    .din0(line_buffer_0_q1),
    .din1(line_buffer_0_1_q1),
    .din2(line_buffer_0_2_q1),
    .din3(line_buffer_0_3_q1),
    .din4(line_buffer_0_4_q1),
    .din5(line_buffer_0_5_q1),
    .din6(line_buffer_0_6_q1),
    .din7(line_buffer_0_7_q1),
    .din8(line_buffer_0_8_q1),
    .din9(line_buffer_0_9_q1),
    .din10(line_buffer_0_10_q1),
    .din11(line_buffer_0_11_q1),
    .din12(line_buffer_0_12_q1),
    .din13(line_buffer_0_13_q1),
    .din14(select_ln203_3_reg_1258),
    .dout(tmp_s_fu_1077_p16)
);

accel_mux_1432_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mux_1432_32_1_1_U518(
    .din0(line_buffer_1_q1),
    .din1(line_buffer_1_1_q1),
    .din2(line_buffer_1_2_q1),
    .din3(line_buffer_1_3_q1),
    .din4(line_buffer_1_4_q1),
    .din5(line_buffer_1_5_q1),
    .din6(line_buffer_1_6_q1),
    .din7(line_buffer_1_7_q1),
    .din8(line_buffer_1_8_q1),
    .din9(line_buffer_1_9_q1),
    .din10(line_buffer_1_10_q1),
    .din11(line_buffer_1_11_q1),
    .din12(line_buffer_1_12_q1),
    .din13(line_buffer_1_13_q1),
    .din14(select_ln203_3_reg_1258),
    .dout(tmp_1_fu_1111_p16)
);

accel_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_571)) begin
        if (((icmp_ln203_fu_887_p2 == 1'd0) & (select_ln203_1_fu_960_p3 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_new_pixel_1_reg_838 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_new_pixel_1_reg_838 <= ap_phi_reg_pp0_iter0_new_pixel_1_reg_838;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_571)) begin
        if ((icmp_ln203_fu_887_p2 == 1'd0)) begin
            channel_fu_92 <= add_ln205_fu_1046_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            channel_fu_92 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_571)) begin
        if ((icmp_ln203_fu_887_p2 == 1'd0)) begin
            col_ptr_fu_100 <= select_ln203_3_fu_988_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            col_ptr_fu_100 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_571)) begin
        if ((icmp_ln203_fu_887_p2 == 1'd0)) begin
            indvar_flatten_fu_104 <= add_ln203_fu_893_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_571)) begin
        if ((icmp_ln203_fu_887_p2 == 1'd0)) begin
            pixel_counter_fu_96 <= select_ln203_4_fu_1000_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            pixel_counter_fu_96 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln203_reg_1246 <= icmp_ln203_fu_887_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_887_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_10_addr_reg_1340 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_11_addr_reg_1346 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_12_addr_reg_1352 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_13_addr_reg_1358 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_1_addr_reg_1286 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_2_addr_reg_1292 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_3_addr_reg_1298 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_4_addr_reg_1304 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_5_addr_reg_1310 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_6_addr_reg_1316 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_7_addr_reg_1322 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_8_addr_reg_1328 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_9_addr_reg_1334 <= channel_1_cast_fu_1008_p1;
        line_buffer_0_addr_reg_1280 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_10_addr_reg_1436 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_11_addr_reg_1442 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_12_addr_reg_1448 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_13_addr_reg_1454 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_1_addr_reg_1382 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_2_addr_reg_1388 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_3_addr_reg_1394 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_4_addr_reg_1400 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_5_addr_reg_1406 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_6_addr_reg_1412 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_7_addr_reg_1418 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_8_addr_reg_1424 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_9_addr_reg_1430 <= channel_1_cast_fu_1008_p1;
        line_buffer_1_addr_reg_1376 <= channel_1_cast_fu_1008_p1;
        select_ln203_1_reg_1250 <= select_ln203_1_fu_960_p3;
        select_ln203_2_reg_1254 <= select_ln203_2_fu_980_p3;
        select_ln203_3_reg_1258 <= select_ln203_3_fu_988_p3;
        temp_windows_elements_0_1_addr_reg_1268 <= channel_1_cast_fu_1008_p1;
        temp_windows_elements_0_2_addr_reg_1274 <= channel_1_cast_fu_1008_p1;
        temp_windows_elements_1_1_addr_reg_1364 <= channel_1_cast_fu_1008_p1;
        temp_windows_elements_1_2_addr_reg_1370 <= channel_1_cast_fu_1008_p1;
        temp_windows_elements_2_1_addr_reg_1460 <= channel_1_cast_fu_1008_p1;
        temp_windows_elements_2_2_addr_reg_1466 <= channel_1_cast_fu_1008_p1;
        trunc_ln203_reg_1264 <= trunc_ln203_fu_996_p1;
    end
end

always @ (*) begin
    if (((icmp_ln203_fu_887_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln203_1_reg_1250 == 1'd1) & (icmp_ln203_reg_1246 == 1'd0))) begin
        ap_phi_mux_new_pixel_1_phi_fu_842_p4 = tmp_fu_1072_p1;
    end else begin
        ap_phi_mux_new_pixel_1_phi_fu_842_p4 = ap_phi_reg_pp0_iter1_new_pixel_1_reg_838;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_channel_load = 6'd0;
    end else begin
        ap_sig_allocacmp_channel_load = channel_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_col_ptr_load = 32'd0;
    end else begin
        ap_sig_allocacmp_col_ptr_load = col_ptr_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_pixel_counter_load = 8'd0;
    end else begin
        ap_sig_allocacmp_pixel_counter_load = pixel_counter_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln203_2_reg_1254 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_64_window_stream_blk_n = conv2d_64_window_stream_full_n;
    end else begin
        conv2d_64_window_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln203_2_reg_1254 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_64_window_stream_write = 1'b1;
    end else begin
        conv2d_64_window_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_10_ce0 = 1'b1;
    end else begin
        line_buffer_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_10_ce1 = 1'b1;
    end else begin
        line_buffer_0_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd10))) begin
        line_buffer_0_10_we0 = 1'b1;
    end else begin
        line_buffer_0_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_11_ce0 = 1'b1;
    end else begin
        line_buffer_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_11_ce1 = 1'b1;
    end else begin
        line_buffer_0_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd11))) begin
        line_buffer_0_11_we0 = 1'b1;
    end else begin
        line_buffer_0_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_12_ce0 = 1'b1;
    end else begin
        line_buffer_0_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_12_ce1 = 1'b1;
    end else begin
        line_buffer_0_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd12))) begin
        line_buffer_0_12_we0 = 1'b1;
    end else begin
        line_buffer_0_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_13_ce0 = 1'b1;
    end else begin
        line_buffer_0_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_13_ce1 = 1'b1;
    end else begin
        line_buffer_0_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((trunc_ln203_reg_1264 == 4'd13) | ((trunc_ln203_reg_1264 == 4'd14) | (trunc_ln203_reg_1264 == 4'd15))))) begin
        line_buffer_0_13_we0 = 1'b1;
    end else begin
        line_buffer_0_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_1_ce0 = 1'b1;
    end else begin
        line_buffer_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_1_ce1 = 1'b1;
    end else begin
        line_buffer_0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd1))) begin
        line_buffer_0_1_we0 = 1'b1;
    end else begin
        line_buffer_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_2_ce0 = 1'b1;
    end else begin
        line_buffer_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_2_ce1 = 1'b1;
    end else begin
        line_buffer_0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd2))) begin
        line_buffer_0_2_we0 = 1'b1;
    end else begin
        line_buffer_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_3_ce0 = 1'b1;
    end else begin
        line_buffer_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_3_ce1 = 1'b1;
    end else begin
        line_buffer_0_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd3))) begin
        line_buffer_0_3_we0 = 1'b1;
    end else begin
        line_buffer_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_4_ce0 = 1'b1;
    end else begin
        line_buffer_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_4_ce1 = 1'b1;
    end else begin
        line_buffer_0_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd4))) begin
        line_buffer_0_4_we0 = 1'b1;
    end else begin
        line_buffer_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_5_ce0 = 1'b1;
    end else begin
        line_buffer_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_5_ce1 = 1'b1;
    end else begin
        line_buffer_0_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd5))) begin
        line_buffer_0_5_we0 = 1'b1;
    end else begin
        line_buffer_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_6_ce0 = 1'b1;
    end else begin
        line_buffer_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_6_ce1 = 1'b1;
    end else begin
        line_buffer_0_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd6))) begin
        line_buffer_0_6_we0 = 1'b1;
    end else begin
        line_buffer_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_7_ce0 = 1'b1;
    end else begin
        line_buffer_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_7_ce1 = 1'b1;
    end else begin
        line_buffer_0_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd7))) begin
        line_buffer_0_7_we0 = 1'b1;
    end else begin
        line_buffer_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_8_ce0 = 1'b1;
    end else begin
        line_buffer_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_8_ce1 = 1'b1;
    end else begin
        line_buffer_0_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd8))) begin
        line_buffer_0_8_we0 = 1'b1;
    end else begin
        line_buffer_0_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_9_ce0 = 1'b1;
    end else begin
        line_buffer_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_9_ce1 = 1'b1;
    end else begin
        line_buffer_0_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd9))) begin
        line_buffer_0_9_we0 = 1'b1;
    end else begin
        line_buffer_0_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_ce0 = 1'b1;
    end else begin
        line_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_ce1 = 1'b1;
    end else begin
        line_buffer_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd0))) begin
        line_buffer_0_we0 = 1'b1;
    end else begin
        line_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_10_ce0 = 1'b1;
    end else begin
        line_buffer_1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_10_ce1 = 1'b1;
    end else begin
        line_buffer_1_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd10))) begin
        line_buffer_1_10_we0 = 1'b1;
    end else begin
        line_buffer_1_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_11_ce0 = 1'b1;
    end else begin
        line_buffer_1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_11_ce1 = 1'b1;
    end else begin
        line_buffer_1_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd11))) begin
        line_buffer_1_11_we0 = 1'b1;
    end else begin
        line_buffer_1_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_12_ce0 = 1'b1;
    end else begin
        line_buffer_1_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_12_ce1 = 1'b1;
    end else begin
        line_buffer_1_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd12))) begin
        line_buffer_1_12_we0 = 1'b1;
    end else begin
        line_buffer_1_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_13_ce0 = 1'b1;
    end else begin
        line_buffer_1_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_13_ce1 = 1'b1;
    end else begin
        line_buffer_1_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((trunc_ln203_reg_1264 == 4'd13) | ((trunc_ln203_reg_1264 == 4'd14) | (trunc_ln203_reg_1264 == 4'd15))))) begin
        line_buffer_1_13_we0 = 1'b1;
    end else begin
        line_buffer_1_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_1_ce0 = 1'b1;
    end else begin
        line_buffer_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_1_ce1 = 1'b1;
    end else begin
        line_buffer_1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd1))) begin
        line_buffer_1_1_we0 = 1'b1;
    end else begin
        line_buffer_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_2_ce0 = 1'b1;
    end else begin
        line_buffer_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_2_ce1 = 1'b1;
    end else begin
        line_buffer_1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd2))) begin
        line_buffer_1_2_we0 = 1'b1;
    end else begin
        line_buffer_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_3_ce0 = 1'b1;
    end else begin
        line_buffer_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_3_ce1 = 1'b1;
    end else begin
        line_buffer_1_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd3))) begin
        line_buffer_1_3_we0 = 1'b1;
    end else begin
        line_buffer_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_4_ce0 = 1'b1;
    end else begin
        line_buffer_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_4_ce1 = 1'b1;
    end else begin
        line_buffer_1_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd4))) begin
        line_buffer_1_4_we0 = 1'b1;
    end else begin
        line_buffer_1_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_5_ce0 = 1'b1;
    end else begin
        line_buffer_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_5_ce1 = 1'b1;
    end else begin
        line_buffer_1_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd5))) begin
        line_buffer_1_5_we0 = 1'b1;
    end else begin
        line_buffer_1_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_6_ce0 = 1'b1;
    end else begin
        line_buffer_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_6_ce1 = 1'b1;
    end else begin
        line_buffer_1_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd6))) begin
        line_buffer_1_6_we0 = 1'b1;
    end else begin
        line_buffer_1_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_7_ce0 = 1'b1;
    end else begin
        line_buffer_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_7_ce1 = 1'b1;
    end else begin
        line_buffer_1_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd7))) begin
        line_buffer_1_7_we0 = 1'b1;
    end else begin
        line_buffer_1_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_8_ce0 = 1'b1;
    end else begin
        line_buffer_1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_8_ce1 = 1'b1;
    end else begin
        line_buffer_1_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd8))) begin
        line_buffer_1_8_we0 = 1'b1;
    end else begin
        line_buffer_1_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_9_ce0 = 1'b1;
    end else begin
        line_buffer_1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_9_ce1 = 1'b1;
    end else begin
        line_buffer_1_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd9))) begin
        line_buffer_1_9_we0 = 1'b1;
    end else begin
        line_buffer_1_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_ce0 = 1'b1;
    end else begin
        line_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_ce1 = 1'b1;
    end else begin
        line_buffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1264 == 4'd0))) begin
        line_buffer_1_we0 = 1'b1;
    end else begin
        line_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op168_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        maxp2d_32_feature_map_stream124_blk_n = maxp2d_32_feature_map_stream124_empty_n;
    end else begin
        maxp2d_32_feature_map_stream124_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op168_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        maxp2d_32_feature_map_stream124_read = 1'b1;
    end else begin
        maxp2d_32_feature_map_stream124_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_0_1_ce0 = 1'b1;
    end else begin
        temp_windows_elements_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_0_1_ce1 = 1'b1;
    end else begin
        temp_windows_elements_0_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_0_1_we0 = 1'b1;
    end else begin
        temp_windows_elements_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_0_2_ce0 = 1'b1;
    end else begin
        temp_windows_elements_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_0_2_ce1 = 1'b1;
    end else begin
        temp_windows_elements_0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_0_2_we0 = 1'b1;
    end else begin
        temp_windows_elements_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_1_1_ce0 = 1'b1;
    end else begin
        temp_windows_elements_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_1_1_ce1 = 1'b1;
    end else begin
        temp_windows_elements_1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_1_1_we0 = 1'b1;
    end else begin
        temp_windows_elements_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_1_2_ce0 = 1'b1;
    end else begin
        temp_windows_elements_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_1_2_ce1 = 1'b1;
    end else begin
        temp_windows_elements_1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_1_2_we0 = 1'b1;
    end else begin
        temp_windows_elements_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_2_1_ce0 = 1'b1;
    end else begin
        temp_windows_elements_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_2_1_ce1 = 1'b1;
    end else begin
        temp_windows_elements_2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_2_1_we0 = 1'b1;
    end else begin
        temp_windows_elements_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_2_2_ce0 = 1'b1;
    end else begin
        temp_windows_elements_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_2_2_ce1 = 1'b1;
    end else begin
        temp_windows_elements_2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_windows_elements_2_2_we0 = 1'b1;
    end else begin
        temp_windows_elements_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_fu_893_p2 = (ap_sig_allocacmp_indvar_flatten_load + 13'd1);

assign add_ln205_fu_1046_p2 = (select_ln203_fu_940_p3 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((select_ln203_2_reg_1254 == 1'd1) & (conv2d_64_window_stream_full_n == 1'b0)) | ((ap_predicate_op168_read_state2 == 1'b1) & (maxp2d_32_feature_map_stream124_empty_n == 1'b0)))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((select_ln203_2_reg_1254 == 1'd1) & (conv2d_64_window_stream_full_n == 1'b0)) | ((ap_predicate_op168_read_state2 == 1'b1) & (maxp2d_32_feature_map_stream124_empty_n == 1'b0)))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((select_ln203_2_reg_1254 == 1'd1) & (conv2d_64_window_stream_full_n == 1'b0)) | ((ap_predicate_op168_read_state2 == 1'b1) & (maxp2d_32_feature_map_stream124_empty_n == 1'b0)))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((select_ln203_2_reg_1254 == 1'd1) & (conv2d_64_window_stream_full_n == 1'b0)) | ((ap_predicate_op168_read_state2 == 1'b1) & (maxp2d_32_feature_map_stream124_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_571 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_new_pixel_1_reg_838 = 'bx;

always @ (*) begin
    ap_predicate_op168_read_state2 = ((select_ln203_1_reg_1250 == 1'd1) & (icmp_ln203_reg_1246 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign bitcast_ln174_262_fu_1163_p1 = temp_windows_elements_0_2_q1;

assign bitcast_ln174_263_fu_1167_p1 = tmp_s_fu_1077_p16;

assign bitcast_ln174_264_fu_1171_p1 = temp_windows_elements_1_1_q1;

assign bitcast_ln174_265_fu_1175_p1 = temp_windows_elements_1_2_q1;

assign bitcast_ln174_266_fu_1179_p1 = tmp_1_fu_1111_p16;

assign bitcast_ln174_267_fu_1183_p1 = temp_windows_elements_2_1_q1;

assign bitcast_ln174_268_fu_1187_p1 = temp_windows_elements_2_2_q1;

assign bitcast_ln174_269_fu_1191_p1 = ap_phi_mux_new_pixel_1_phi_fu_842_p4;

assign bitcast_ln174_fu_1159_p1 = temp_windows_elements_0_1_q1;

assign channel_1_cast_fu_1008_p1 = select_ln203_fu_940_p3;

assign cmp6203_fu_954_p2 = ((ap_sig_allocacmp_pixel_counter_load < 8'd196) ? 1'b1 : 1'b0);

assign cmp6_mid1_fu_948_p2 = ((pixel_counter_2_fu_928_p2 < 8'd196) ? 1'b1 : 1'b0);

assign cmp77202_fu_974_p2 = ((ap_sig_allocacmp_pixel_counter_load > 8'd14) ? 1'b1 : 1'b0);

assign cmp77_mid1_fu_968_p2 = ((pixel_counter_2_fu_928_p2 > 8'd14) ? 1'b1 : 1'b0);

assign col_ptr_15_fu_914_p2 = (ap_sig_allocacmp_col_ptr_load + 32'd1);

assign col_ptr_16_fu_920_p3 = ((icmp_ln232_fu_908_p2[0:0] == 1'b1) ? 32'd0 : col_ptr_15_fu_914_p2);

assign conv2d_64_window_stream_din = {{{{{{{{{bitcast_ln174_269_fu_1191_p1}, {bitcast_ln174_268_fu_1187_p1}}, {bitcast_ln174_267_fu_1183_p1}}, {bitcast_ln174_266_fu_1179_p1}}, {bitcast_ln174_265_fu_1175_p1}}, {bitcast_ln174_264_fu_1171_p1}}, {bitcast_ln174_263_fu_1167_p1}}, {bitcast_ln174_262_fu_1163_p1}}, {bitcast_ln174_fu_1159_p1}};

assign icmp_ln203_fu_887_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 13'd6752) ? 1'b1 : 1'b0);

assign icmp_ln205_fu_934_p2 = ((ap_sig_allocacmp_channel_load == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln232_fu_908_p2 = ((ap_sig_allocacmp_col_ptr_load == 32'd13) ? 1'b1 : 1'b0);

assign line_buffer_0_10_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_11_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_12_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_13_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_1_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_2_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_3_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_4_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_5_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_6_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_7_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_8_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_9_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_0_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_10_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_11_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_12_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_13_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_1_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_2_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_3_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_4_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_5_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_6_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_7_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_8_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_9_address1 = channel_1_cast_fu_1008_p1;

assign line_buffer_1_address1 = channel_1_cast_fu_1008_p1;

assign pixel_counter_2_fu_928_p2 = (ap_sig_allocacmp_pixel_counter_load + 8'd1);

assign select_ln203_1_fu_960_p3 = ((icmp_ln205_fu_934_p2[0:0] == 1'b1) ? cmp6_mid1_fu_948_p2 : cmp6203_fu_954_p2);

assign select_ln203_2_fu_980_p3 = ((icmp_ln205_fu_934_p2[0:0] == 1'b1) ? cmp77_mid1_fu_968_p2 : cmp77202_fu_974_p2);

assign select_ln203_3_fu_988_p3 = ((icmp_ln205_fu_934_p2[0:0] == 1'b1) ? col_ptr_16_fu_920_p3 : ap_sig_allocacmp_col_ptr_load);

assign select_ln203_4_fu_1000_p3 = ((icmp_ln205_fu_934_p2[0:0] == 1'b1) ? pixel_counter_2_fu_928_p2 : ap_sig_allocacmp_pixel_counter_load);

assign select_ln203_fu_940_p3 = ((icmp_ln205_fu_934_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_channel_load);

assign start_out = real_start;

assign temp_windows_elements_0_1_address1 = channel_1_cast_fu_1008_p1;

assign temp_windows_elements_0_2_address1 = channel_1_cast_fu_1008_p1;

assign temp_windows_elements_1_1_address1 = channel_1_cast_fu_1008_p1;

assign temp_windows_elements_1_2_address1 = channel_1_cast_fu_1008_p1;

assign temp_windows_elements_2_1_address1 = channel_1_cast_fu_1008_p1;

assign temp_windows_elements_2_2_address1 = channel_1_cast_fu_1008_p1;

assign tmp_fu_1072_p1 = maxp2d_32_feature_map_stream124_dout;

assign trunc_ln203_fu_996_p1 = select_ln203_3_fu_988_p3[3:0];

endmodule //accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s
