-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accel_create_window_stream_maxp2d_14u_14u_64u_2u_2u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2d_64_feature_map_stream125_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_feature_map_stream125_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_64_feature_map_stream125_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_64_feature_map_stream125_empty_n : IN STD_LOGIC;
    conv2d_64_feature_map_stream125_read : OUT STD_LOGIC;
    maxp2d_64_window_stream_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    maxp2d_64_window_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    maxp2d_64_window_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    maxp2d_64_window_stream_full_n : IN STD_LOGIC;
    maxp2d_64_window_stream_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of accel_create_window_stream_maxp2d_14u_14u_64u_2u_2u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_3100 : STD_LOGIC_VECTOR (13 downto 0) := "11000100000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal select_ln351_12_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln351_12_reg_914_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln351_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal conv2d_64_feature_map_stream125_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal maxp2d_64_window_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal pos_y_0_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_y_0_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_863_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_868_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_878 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_ptr_10_fu_327_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_ptr_10_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_ptr_10_reg_887_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ptr_14_fu_335_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ptr_14_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln353_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_900 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_900_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln358_fu_415_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln358_reg_909 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln351_12_fu_433_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln367_6_fu_441_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln367_6_reg_918 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln364_2_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln364_2_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln364_2_reg_923_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln367_8_fu_459_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln367_8_reg_929 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln358_5_fu_485_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln358_5_reg_934 : STD_LOGIC_VECTOR (10 downto 0);
    signal pos_y_0_mid1_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_y_0_mid1_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_6_fu_685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_6_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_fu_693_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_ce0 : STD_LOGIC;
    signal line_buffer_we0 : STD_LOGIC;
    signal line_buffer_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_ce1 : STD_LOGIC;
    signal line_buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_address2 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_ce2 : STD_LOGIC;
    signal line_buffer_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_address3 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_ce3 : STD_LOGIC;
    signal line_buffer_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln367_8_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_6_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_6_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_7_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal channel_fu_72 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln353_fu_500_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_channel_load : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_window_elements_load2_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_4_fu_753_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_load_206_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln366_5_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_load_2110_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_window_elements_load_2214_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_ptr_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln351_11_fu_399_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_row_ptr_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ptr_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln351_10_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_col_ptr_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_100 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln351_fu_286_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_680_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln351_fu_196_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_not_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln364_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln366_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln366_4_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln366_5_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln366_6_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_ptr_9_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ptr_12_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln377_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln373_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_ptr_13_fu_319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_369_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_14_fu_381_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln358_fu_377_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln358_4_fu_389_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln358_fu_393_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln358_fu_407_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln358_2_fu_411_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln351_2_fu_357_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_not_mid1_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan_mid1_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln351_15_fu_451_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln367_9_fu_463_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln367_10_fu_467_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln367_7_fu_471_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln351_fu_349_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_477_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln367_10_fu_489_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln351_13_fu_544_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_550_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_17_fu_562_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln367_fu_558_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln367_5_fu_570_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln367_fu_574_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln367_fu_580_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln367_fu_584_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln367_7_fu_597_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln367_6_fu_601_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln366_10_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_11_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_636_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_532_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln358_2_fu_650_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_606_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln367_8_fu_660_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_fu_589_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln367_9_fu_670_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln351_17_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln351_18_fu_644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_8_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_9_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_739_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln351_14_fu_729_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln351_16_fu_747_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln174_261_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_260_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_259_fu_773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_214 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component accel_create_window_stream_maxp2d_28u_28u_32u_2u_2u_s_line_buffer_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accel_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    line_buffer_U : component accel_create_window_stream_maxp2d_28u_28u_32u_2u_2u_s_line_buffer_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1792,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_address0,
        ce0 => line_buffer_ce0,
        we0 => line_buffer_we0,
        d0 => tmp_fu_680_p1,
        address1 => line_buffer_address1,
        ce1 => line_buffer_ce1,
        q1 => line_buffer_q1,
        address2 => line_buffer_address2,
        ce2 => line_buffer_ce2,
        q2 => line_buffer_q2,
        address3 => line_buffer_address3,
        ce3 => line_buffer_ce3,
        q3 => line_buffer_q3);

    flow_control_loop_pipe_U : component accel_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    channel_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_214)) then
                if ((icmp_ln351_fu_280_p2 = ap_const_lv1_0)) then 
                    channel_fu_72 <= add_ln353_fu_500_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    channel_fu_72 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    col_ptr_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_214)) then
                if ((icmp_ln351_fu_280_p2 = ap_const_lv1_0)) then 
                    col_ptr_fu_96 <= select_ln351_10_fu_361_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_ptr_fu_96 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_214)) then
                if ((icmp_ln351_fu_280_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_100 <= add_ln351_fu_286_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_100 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    row_ptr_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_214)) then
                if ((icmp_ln351_fu_280_p2 = ap_const_lv1_0)) then 
                    row_ptr_fu_92 <= select_ln351_11_fu_399_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    row_ptr_fu_92 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln351_fu_280_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln358_reg_909 <= add_ln358_fu_415_p2;
                add_ln364_2_reg_923 <= add_ln364_2_fu_445_p2;
                col_ptr_14_reg_893 <= col_ptr_14_fu_335_p3;
                icmp_ln353_reg_900 <= icmp_ln353_fu_343_p2;
                row_ptr_10_reg_887 <= row_ptr_10_fu_327_p3;
                select_ln351_12_reg_914 <= select_ln351_12_fu_433_p3;
                trunc_ln367_6_reg_918 <= trunc_ln367_6_fu_441_p1;
                trunc_ln367_8_reg_929 <= trunc_ln367_8_fu_459_p1;
                    zext_ln358_5_reg_934(6 downto 0) <= zext_ln358_5_fu_485_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln364_2_reg_923_pp0_iter1_reg <= add_ln364_2_reg_923;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln353_reg_900_pp0_iter1_reg <= icmp_ln353_reg_900;
                pos_y_0_mid1_reg_946 <= pos_y_0_mid1_fu_539_p2;
                pos_y_0_reg_858 <= pos_y_0_fu_212_p2;
                row_ptr_10_reg_887_pp0_iter1_reg <= row_ptr_10_reg_887;
                select_ln351_12_reg_914_pp0_iter1_reg <= select_ln351_12_reg_914;
                select_ln366_6_reg_962 <= select_ln366_6_fu_685_p3;
                select_ln366_reg_967 <= select_ln366_fu_693_p3;
                tmp_28_reg_863 <= or_ln366_fu_224_p2(31 downto 31);
                tmp_28_reg_863_pp0_iter1_reg <= tmp_28_reg_863;
                tmp_29_reg_868 <= or_ln366_4_fu_238_p2(31 downto 31);
                tmp_29_reg_868_pp0_iter1_reg <= tmp_29_reg_868;
                tmp_30_reg_873 <= or_ln366_5_fu_252_p2(31 downto 31);
                tmp_31_reg_878 <= or_ln366_6_fu_266_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                temp_window_elements_load2_fu_76 <= select_ln366_4_fu_753_p3;
                temp_window_elements_load_206_fu_80 <= select_ln366_5_fu_761_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                temp_window_elements_load_2110_fu_84 <= select_ln366_6_fu_685_p3;
                temp_window_elements_load_2214_fu_88 <= select_ln366_fu_693_p3;
            end if;
        end if;
    end process;
    zext_ln358_5_reg_934(10 downto 7) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln351_fu_286_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv14_1));
    add_ln353_fu_500_p2 <= std_logic_vector(unsigned(select_ln351_fu_349_p3) + unsigned(ap_const_lv7_1));
    add_ln358_2_fu_650_p2 <= std_logic_vector(unsigned(tmp_15_fu_532_p3) + unsigned(zext_ln358_5_reg_934));
    add_ln358_fu_415_p2 <= std_logic_vector(unsigned(trunc_ln358_fu_407_p1) + unsigned(trunc_ln358_2_fu_411_p1));
    add_ln364_2_fu_445_p2 <= std_logic_vector(unsigned(row_ptr_10_fu_327_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln364_fu_218_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_row_ptr_8) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln367_10_fu_489_p2 <= std_logic_vector(unsigned(tmp_20_fu_477_p3) + unsigned(zext_ln358_5_fu_485_p1));
    add_ln367_6_fu_601_p2 <= std_logic_vector(unsigned(trunc_ln367_7_fu_597_p1) + unsigned(trunc_ln367_8_reg_929));
    add_ln367_7_fu_471_p2 <= std_logic_vector(unsigned(trunc_ln367_9_fu_463_p1) + unsigned(trunc_ln367_10_fu_467_p1));
    add_ln367_8_fu_660_p2 <= std_logic_vector(unsigned(tmp_19_fu_606_p3) + unsigned(zext_ln358_5_reg_934));
    add_ln367_9_fu_670_p2 <= std_logic_vector(unsigned(tmp_18_fu_589_p3) + unsigned(zext_ln358_5_reg_934));
    add_ln367_fu_584_p2 <= std_logic_vector(unsigned(trunc_ln367_fu_580_p1) + unsigned(trunc_ln367_6_reg_918));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, conv2d_64_feature_map_stream125_empty_n, maxp2d_64_window_stream_full_n, select_ln351_12_reg_914_pp0_iter1_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((select_ln351_12_reg_914_pp0_iter1_reg = ap_const_lv1_1) and (maxp2d_64_window_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((conv2d_64_feature_map_stream125_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, conv2d_64_feature_map_stream125_empty_n, maxp2d_64_window_stream_full_n, select_ln351_12_reg_914_pp0_iter1_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((select_ln351_12_reg_914_pp0_iter1_reg = ap_const_lv1_1) and (maxp2d_64_window_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((conv2d_64_feature_map_stream125_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, conv2d_64_feature_map_stream125_empty_n, maxp2d_64_window_stream_full_n, select_ln351_12_reg_914_pp0_iter1_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((select_ln351_12_reg_914_pp0_iter1_reg = ap_const_lv1_1) and (maxp2d_64_window_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((conv2d_64_feature_map_stream125_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(conv2d_64_feature_map_stream125_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (conv2d_64_feature_map_stream125_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(maxp2d_64_window_stream_full_n, select_ln351_12_reg_914_pp0_iter1_reg)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((select_ln351_12_reg_914_pp0_iter1_reg = ap_const_lv1_1) and (maxp2d_64_window_stream_full_n = ap_const_logic_0));
    end process;


    ap_condition_214_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_214 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln351_fu_280_p2, ap_start_int)
    begin
        if (((icmp_ln351_fu_280_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_channel_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, channel_fu_72, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_channel_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_channel_load <= channel_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_col_ptr_8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, col_ptr_fu_96, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_col_ptr_8 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_col_ptr_8 <= col_ptr_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_100, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_row_ptr_8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, row_ptr_fu_92, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_row_ptr_8 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_row_ptr_8 <= row_ptr_fu_92;
        end if; 
    end process;

    bitcast_ln174_259_fu_773_p1 <= select_ln366_5_fu_761_p3;
    bitcast_ln174_260_fu_777_p1 <= select_ln366_6_reg_962;
    bitcast_ln174_261_fu_780_p1 <= select_ln366_reg_967;
    bitcast_ln174_fu_769_p1 <= select_ln366_4_fu_753_p3;
    cmp34_not_fu_200_p2 <= "1" when (ap_sig_allocacmp_col_ptr_8 = ap_const_lv32_1) else "0";
    cmp34_not_mid1_fu_421_p2 <= "1" when (col_ptr_14_fu_335_p3 = ap_const_lv32_1) else "0";
    col_ptr_12_fu_307_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_ptr_8) + unsigned(ap_const_lv32_1));
    col_ptr_13_fu_319_p3 <= 
        ap_const_lv32_0 when (icmp_ln377_fu_313_p2(0) = '1') else 
        col_ptr_12_fu_307_p2;
    col_ptr_14_fu_335_p3 <= 
        col_ptr_13_fu_319_p3 when (icmp_ln373_fu_301_p2(0) = '1') else 
        ap_sig_allocacmp_col_ptr_8;

    conv2d_64_feature_map_stream125_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv2d_64_feature_map_stream125_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_64_feature_map_stream125_blk_n <= conv2d_64_feature_map_stream125_empty_n;
        else 
            conv2d_64_feature_map_stream125_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    conv2d_64_feature_map_stream125_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_64_feature_map_stream125_read <= ap_const_logic_1;
        else 
            conv2d_64_feature_map_stream125_read <= ap_const_logic_0;
        end if; 
    end process;

    demorgan_fu_206_p2 <= (trunc_ln351_fu_196_p1 and cmp34_not_fu_200_p2);
    demorgan_mid1_fu_427_p2 <= (trunc_ln351_2_fu_357_p1 and cmp34_not_mid1_fu_421_p2);
    icmp_ln351_fu_280_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv14_3100) else "0";
    icmp_ln353_fu_343_p2 <= "1" when (ap_sig_allocacmp_channel_load = ap_const_lv7_40) else "0";
    icmp_ln373_fu_301_p2 <= "1" when (row_ptr_9_fu_295_p2 = ap_const_lv32_E) else "0";
    icmp_ln377_fu_313_p2 <= "1" when (col_ptr_12_fu_307_p2 = ap_const_lv32_2) else "0";
    line_buffer_address0 <= zext_ln358_6_fu_655_p1(11 - 1 downto 0);
    line_buffer_address1 <= zext_ln367_7_fu_675_p1(11 - 1 downto 0);
    line_buffer_address2 <= zext_ln367_6_fu_665_p1(11 - 1 downto 0);
    line_buffer_address3 <= zext_ln367_8_fu_495_p1(11 - 1 downto 0);

    line_buffer_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_ce0 <= ap_const_logic_1;
        else 
            line_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_ce1 <= ap_const_logic_1;
        else 
            line_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_ce2 <= ap_const_logic_1;
        else 
            line_buffer_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_ce3 <= ap_const_logic_1;
        else 
            line_buffer_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_we0 <= ap_const_logic_1;
        else 
            line_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    maxp2d_64_window_stream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, maxp2d_64_window_stream_full_n, select_ln351_12_reg_914_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln351_12_reg_914_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            maxp2d_64_window_stream_blk_n <= maxp2d_64_window_stream_full_n;
        else 
            maxp2d_64_window_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    maxp2d_64_window_stream_din <= (((bitcast_ln174_261_fu_780_p1 & bitcast_ln174_260_fu_777_p1) & bitcast_ln174_259_fu_773_p1) & bitcast_ln174_fu_769_p1);

    maxp2d_64_window_stream_write_assign_proc : process(ap_enable_reg_pp0_iter2, select_ln351_12_reg_914_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln351_12_reg_914_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            maxp2d_64_window_stream_write <= ap_const_logic_1;
        else 
            maxp2d_64_window_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln366_10_fu_614_p2 <= (col_ptr_14_reg_893 or add_ln364_2_reg_923);
    or_ln366_11_fu_632_p2 <= (row_ptr_10_reg_887 or col_ptr_14_reg_893);
    or_ln366_4_fu_238_p2 <= (pos_y_0_fu_212_p2 or ap_sig_allocacmp_row_ptr_8);
    or_ln366_5_fu_252_p2 <= (ap_sig_allocacmp_col_ptr_8 or add_ln364_fu_218_p2);
    or_ln366_6_fu_266_p2 <= (ap_sig_allocacmp_row_ptr_8 or ap_sig_allocacmp_col_ptr_8);
    or_ln366_8_fu_717_p2 <= (pos_y_0_mid1_reg_946 or add_ln364_2_reg_923_pp0_iter1_reg);
    or_ln366_9_fu_735_p2 <= (row_ptr_10_reg_887_pp0_iter1_reg or pos_y_0_mid1_reg_946);
    or_ln366_fu_224_p2 <= (pos_y_0_fu_212_p2 or add_ln364_fu_218_p2);
    pos_y_0_fu_212_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_ptr_8) + unsigned(ap_const_lv32_FFFFFFFF));
    pos_y_0_mid1_fu_539_p2 <= std_logic_vector(unsigned(col_ptr_14_reg_893) + unsigned(ap_const_lv32_FFFFFFFF));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    row_ptr_10_fu_327_p3 <= 
        ap_const_lv32_0 when (icmp_ln373_fu_301_p2(0) = '1') else 
        row_ptr_9_fu_295_p2;
    row_ptr_9_fu_295_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_row_ptr_8) + unsigned(ap_const_lv32_1));
    select_ln351_10_fu_361_p3 <= 
        col_ptr_14_fu_335_p3 when (icmp_ln353_fu_343_p2(0) = '1') else 
        ap_sig_allocacmp_col_ptr_8;
    select_ln351_11_fu_399_p3 <= 
        row_ptr_10_fu_327_p3 when (icmp_ln353_fu_343_p2(0) = '1') else 
        ap_sig_allocacmp_row_ptr_8;
    select_ln351_12_fu_433_p3 <= 
        demorgan_mid1_fu_427_p2 when (icmp_ln353_fu_343_p2(0) = '1') else 
        demorgan_fu_206_p2;
    select_ln351_13_fu_544_p3 <= 
        pos_y_0_mid1_fu_539_p2 when (icmp_ln353_reg_900(0) = '1') else 
        pos_y_0_reg_858;
    select_ln351_14_fu_729_p3 <= 
        tmp_32_fu_721_p3 when (icmp_ln353_reg_900_pp0_iter1_reg(0) = '1') else 
        tmp_28_reg_863_pp0_iter1_reg;
    select_ln351_15_fu_451_p3 <= 
        add_ln364_2_fu_445_p2 when (icmp_ln353_fu_343_p2(0) = '1') else 
        add_ln364_fu_218_p2;
    select_ln351_16_fu_747_p3 <= 
        tmp_33_fu_739_p3 when (icmp_ln353_reg_900_pp0_iter1_reg(0) = '1') else 
        tmp_29_reg_868_pp0_iter1_reg;
    select_ln351_17_fu_626_p3 <= 
        tmp_34_fu_618_p3 when (icmp_ln353_reg_900(0) = '1') else 
        tmp_30_reg_873;
    select_ln351_18_fu_644_p3 <= 
        tmp_35_fu_636_p3 when (icmp_ln353_reg_900(0) = '1') else 
        tmp_31_reg_878;
    select_ln351_fu_349_p3 <= 
        ap_const_lv7_0 when (icmp_ln353_fu_343_p2(0) = '1') else 
        ap_sig_allocacmp_channel_load;
    select_ln366_4_fu_753_p3 <= 
        temp_window_elements_load2_fu_76 when (select_ln351_14_fu_729_p3(0) = '1') else 
        line_buffer_q2;
    select_ln366_5_fu_761_p3 <= 
        temp_window_elements_load_206_fu_80 when (select_ln351_16_fu_747_p3(0) = '1') else 
        line_buffer_q1;
    select_ln366_6_fu_685_p3 <= 
        temp_window_elements_load_2110_fu_84 when (select_ln351_17_fu_626_p3(0) = '1') else 
        line_buffer_q3;
    select_ln366_fu_693_p3 <= 
        temp_window_elements_load_2214_fu_88 when (select_ln351_18_fu_644_p3(0) = '1') else 
        tmp_fu_680_p1;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln358_fu_393_p2 <= std_logic_vector(unsigned(zext_ln358_fu_377_p1) - unsigned(zext_ln358_4_fu_389_p1));
    sub_ln367_fu_574_p2 <= std_logic_vector(unsigned(zext_ln367_fu_558_p1) - unsigned(zext_ln367_5_fu_570_p1));
    tmp_13_fu_369_p3 <= (select_ln351_10_fu_361_p3 & ap_const_lv4_0);
    tmp_14_fu_381_p3 <= (select_ln351_10_fu_361_p3 & ap_const_lv1_0);
    tmp_15_fu_532_p3 <= (add_ln358_reg_909 & ap_const_lv6_0);
    tmp_16_fu_550_p3 <= (select_ln351_13_fu_544_p3 & ap_const_lv4_0);
    tmp_17_fu_562_p3 <= (select_ln351_13_fu_544_p3 & ap_const_lv1_0);
    tmp_18_fu_589_p3 <= (add_ln367_fu_584_p2 & ap_const_lv6_0);
    tmp_19_fu_606_p3 <= (add_ln367_6_fu_601_p2 & ap_const_lv6_0);
    tmp_20_fu_477_p3 <= (add_ln367_7_fu_471_p2 & ap_const_lv6_0);
    tmp_32_fu_721_p3 <= or_ln366_8_fu_717_p2(31 downto 31);
    tmp_33_fu_739_p3 <= or_ln366_9_fu_735_p2(31 downto 31);
    tmp_34_fu_618_p3 <= or_ln366_10_fu_614_p2(31 downto 31);
    tmp_35_fu_636_p3 <= or_ln366_11_fu_632_p2(31 downto 31);
    tmp_fu_680_p1 <= conv2d_64_feature_map_stream125_dout;
    trunc_ln351_2_fu_357_p1 <= row_ptr_10_fu_327_p3(1 - 1 downto 0);
    trunc_ln351_fu_196_p1 <= ap_sig_allocacmp_row_ptr_8(1 - 1 downto 0);
    trunc_ln358_2_fu_411_p1 <= select_ln351_11_fu_399_p3(5 - 1 downto 0);
    trunc_ln358_fu_407_p1 <= sub_ln358_fu_393_p2(5 - 1 downto 0);
    trunc_ln367_10_fu_467_p1 <= select_ln351_15_fu_451_p3(5 - 1 downto 0);
    trunc_ln367_6_fu_441_p1 <= select_ln351_11_fu_399_p3(5 - 1 downto 0);
    trunc_ln367_7_fu_597_p1 <= sub_ln367_fu_574_p2(5 - 1 downto 0);
    trunc_ln367_8_fu_459_p1 <= select_ln351_15_fu_451_p3(5 - 1 downto 0);
    trunc_ln367_9_fu_463_p1 <= sub_ln358_fu_393_p2(5 - 1 downto 0);
    trunc_ln367_fu_580_p1 <= sub_ln367_fu_574_p2(5 - 1 downto 0);
    zext_ln358_4_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_381_p3),37));
    zext_ln358_5_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln351_fu_349_p3),11));
    zext_ln358_6_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln358_2_fu_650_p2),64));
    zext_ln358_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_369_p3),37));
    zext_ln367_5_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_562_p3),37));
    zext_ln367_6_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln367_8_fu_660_p2),64));
    zext_ln367_7_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln367_9_fu_670_p2),64));
    zext_ln367_8_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln367_10_fu_489_p2),64));
    zext_ln367_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_550_p3),37));
end behav;
