-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accel_save_variables_locally_Pipeline_VITIS_LOOP_28_3_VITIS_LOOP_29_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln28 : IN STD_LOGIC_VECTOR (57 downto 0);
    conv2d_64_weights_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_0_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_0_we1 : OUT STD_LOGIC;
    conv2d_64_weights_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_1_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_1_we1 : OUT STD_LOGIC;
    conv2d_64_weights_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_2_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_2_we1 : OUT STD_LOGIC;
    conv2d_64_weights_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_3_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_3_we1 : OUT STD_LOGIC;
    conv2d_64_weights_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_4_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_4_we1 : OUT STD_LOGIC;
    conv2d_64_weights_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_5_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_5_we1 : OUT STD_LOGIC;
    conv2d_64_weights_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_6_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_6_we1 : OUT STD_LOGIC;
    conv2d_64_weights_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_7_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_7_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_7_we1 : OUT STD_LOGIC;
    conv2d_64_weights_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_8_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_8_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_8_we1 : OUT STD_LOGIC;
    conv2d_64_weights_8_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_9_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_9_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_9_we1 : OUT STD_LOGIC;
    conv2d_64_weights_9_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_10_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_10_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_10_we1 : OUT STD_LOGIC;
    conv2d_64_weights_10_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_11_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_11_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_11_we1 : OUT STD_LOGIC;
    conv2d_64_weights_11_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_12_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_12_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_12_we1 : OUT STD_LOGIC;
    conv2d_64_weights_12_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_13_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_13_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_13_we1 : OUT STD_LOGIC;
    conv2d_64_weights_13_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_14_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_14_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_14_we1 : OUT STD_LOGIC;
    conv2d_64_weights_14_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_15_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_15_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_15_we1 : OUT STD_LOGIC;
    conv2d_64_weights_15_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_16_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_16_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_16_we1 : OUT STD_LOGIC;
    conv2d_64_weights_16_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_17_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_17_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_17_we1 : OUT STD_LOGIC;
    conv2d_64_weights_17_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_18_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_18_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_18_we1 : OUT STD_LOGIC;
    conv2d_64_weights_18_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_19_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_19_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_19_we1 : OUT STD_LOGIC;
    conv2d_64_weights_19_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_20_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_20_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_20_we1 : OUT STD_LOGIC;
    conv2d_64_weights_20_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_21_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_21_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_21_we1 : OUT STD_LOGIC;
    conv2d_64_weights_21_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_22_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_22_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_22_we1 : OUT STD_LOGIC;
    conv2d_64_weights_22_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_23_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_23_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_23_we1 : OUT STD_LOGIC;
    conv2d_64_weights_23_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_24_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_24_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_24_we1 : OUT STD_LOGIC;
    conv2d_64_weights_24_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_25_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_25_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_25_we1 : OUT STD_LOGIC;
    conv2d_64_weights_25_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_26_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_26_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_26_we1 : OUT STD_LOGIC;
    conv2d_64_weights_26_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_27_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_27_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_27_we1 : OUT STD_LOGIC;
    conv2d_64_weights_27_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_28_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_28_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_28_we1 : OUT STD_LOGIC;
    conv2d_64_weights_28_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_29_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_29_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_29_we1 : OUT STD_LOGIC;
    conv2d_64_weights_29_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_30_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_30_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_30_we1 : OUT STD_LOGIC;
    conv2d_64_weights_30_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2d_64_weights_31_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2d_64_weights_31_ce1 : OUT STD_LOGIC;
    conv2d_64_weights_31_we1 : OUT STD_LOGIC;
    conv2d_64_weights_31_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of accel_save_variables_locally_Pipeline_VITIS_LOOP_28_3_VITIS_LOOP_29_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv480_lc_1 : STD_LOGIC_VECTOR (479 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv15_4800 : STD_LOGIC_VECTOR (14 downto 0) := "100100000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln28_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op128_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln28_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_reg_1035_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_1039_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_832_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln28_reg_1045 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln28_reg_1045_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln30_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1050_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_1054 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_phi_mux_empty_phi_fu_778_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_775 : STD_LOGIC_VECTOR (511 downto 0);
    signal shiftreg10_cast_fu_902_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_18_cast19_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shiftreg10_fu_204 : STD_LOGIC_VECTOR (479 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_208 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_850_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (9 downto 0);
    signal channel_fu_212 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln28_2_fu_891_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_fu_216 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln28_1_fu_817_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln28_fu_898_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln30_fu_946_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_140_fu_840_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_878_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln28_1_fu_884_p3 : STD_LOGIC_VECTOR (479 downto 0);
    signal trunc_ln30_fu_942_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    channel_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    channel_fu_212 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    channel_fu_212 <= select_ln28_2_fu_891_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln28_fu_811_p2 = ap_const_lv1_0))) then 
                    i_fu_208 <= add_ln29_fu_850_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_208 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln28_fu_811_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_216 <= add_ln28_1_fu_817_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_216 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;

    shiftreg10_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    shiftreg10_fu_204 <= ap_const_lv480_lc_1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    shiftreg10_fu_204 <= ap_phi_mux_empty_phi_fu_778_p4(511 downto 32);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln28_reg_1035 <= icmp_ln28_fu_811_p2;
                icmp_ln28_reg_1035_pp0_iter1_reg <= icmp_ln28_reg_1035;
                icmp_ln29_reg_1039_pp0_iter1_reg <= icmp_ln29_reg_1039;
                icmp_ln30_reg_1050_pp0_iter1_reg <= icmp_ln30_reg_1050;
                select_ln28_reg_1045_pp0_iter1_reg <= select_ln28_reg_1045;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op128_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_1054 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_fu_811_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln29_reg_1039 <= icmp_ln29_fu_826_p2;
                icmp_ln30_reg_1050 <= icmp_ln30_fu_844_p2;
                select_ln28_reg_1045 <= select_ln28_fu_832_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln28_1_fu_817_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv15_1));
    add_ln28_fu_878_p2 <= std_logic_vector(unsigned(channel_fu_212) + unsigned(ap_const_lv6_1));
    add_ln29_fu_850_p2 <= std_logic_vector(unsigned(select_ln28_fu_832_p3) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID, ap_predicate_op128_read_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_predicate_op128_read_state2 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID, ap_predicate_op128_read_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_predicate_op128_read_state2 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_gmem_RVALID, ap_predicate_op128_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op128_read_state2 = ap_const_boolean_1) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln28_fu_811_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_fu_811_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln28_reg_1035, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln28_reg_1035 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_empty_phi_fu_778_p4_assign_proc : process(icmp_ln28_reg_1035_pp0_iter1_reg, icmp_ln30_reg_1050_pp0_iter1_reg, gmem_addr_read_reg_1054, ap_phi_reg_pp0_iter2_empty_reg_775, shiftreg10_cast_fu_902_p1)
    begin
        if ((icmp_ln28_reg_1035_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((icmp_ln30_reg_1050_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_phi_fu_778_p4 <= shiftreg10_cast_fu_902_p1;
            elsif ((icmp_ln30_reg_1050_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_phi_fu_778_p4 <= gmem_addr_read_reg_1054;
            else 
                ap_phi_mux_empty_phi_fu_778_p4 <= ap_phi_reg_pp0_iter2_empty_reg_775;
            end if;
        else 
            ap_phi_mux_empty_phi_fu_778_p4 <= ap_phi_reg_pp0_iter2_empty_reg_775;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_reg_775 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op128_read_state2_assign_proc : process(icmp_ln28_reg_1035, icmp_ln30_reg_1050)
    begin
                ap_predicate_op128_read_state2 <= ((icmp_ln30_reg_1050 = ap_const_lv1_1) and (icmp_ln28_reg_1035 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_208)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_208;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_216)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_216;
        end if; 
    end process;

    bitcast_ln30_fu_946_p1 <= trunc_ln30_fu_942_p1;
    conv2d_64_weights_0_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_0_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_0_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_0_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_0_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_10_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_10_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_10_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_10_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_10_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_A) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_10_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_10_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_11_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_11_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_11_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_11_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_11_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_B) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_11_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_11_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_12_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_12_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_12_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_12_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_12_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_C) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_12_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_12_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_13_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_13_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_13_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_13_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_13_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_D) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_13_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_13_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_14_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_14_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_14_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_14_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_14_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_14_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_E) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_14_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_14_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_15_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_15_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_15_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_15_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_15_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_F) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_15_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_15_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_16_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_16_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_16_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_16_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_16_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_16_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_10) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_16_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_16_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_17_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_17_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_17_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_17_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_17_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_17_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_11) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_17_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_17_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_18_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_18_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_18_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_18_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_18_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_18_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_12) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_18_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_18_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_19_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_19_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_19_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_19_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_19_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_19_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_13) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_19_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_19_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_1_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_1_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_1_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_1_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_1_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_20_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_20_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_20_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_20_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_20_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_20_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_14) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_20_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_20_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_21_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_21_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_21_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_21_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_21_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_21_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_15) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_21_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_21_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_22_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_22_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_22_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_22_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_22_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_22_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_16) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_22_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_22_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_23_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_23_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_23_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_23_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_23_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_23_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_17) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_23_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_23_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_24_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_24_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_24_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_24_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_24_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_24_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_18) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_24_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_24_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_25_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_25_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_25_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_25_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_25_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_25_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_19) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_25_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_25_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_26_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_26_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_26_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_26_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_26_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_26_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_1A) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_26_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_26_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_27_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_27_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_27_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_27_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_27_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_27_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_1B) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_27_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_27_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_28_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_28_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_28_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_28_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_28_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_28_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_1C) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_28_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_28_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_29_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_29_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_29_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_29_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_29_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_29_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_1D) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_29_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_29_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_2_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_2_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_2_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_2_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_2_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_30_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_30_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_30_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_30_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_30_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_30_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_1E) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_30_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_30_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_31_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_31_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_31_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_31_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_31_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_31_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_1F) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_31_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_31_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_3_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_3_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_3_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_3_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_3_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_4_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_4_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_4_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_4_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_4_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_5_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_5_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_5_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_5_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_5_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_6_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_6_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_6_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_6_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_6_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_7_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_7_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_7_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_7_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_7_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_7_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_7_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_8_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_8_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_8_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_8_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_8_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_8) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_8_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_8_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_9_address1 <= i_18_cast19_fu_907_p1(10 - 1 downto 0);

    conv2d_64_weights_9_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_9_ce1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv2d_64_weights_9_d1 <= bitcast_ln30_fu_946_p1;

    conv2d_64_weights_9_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln28_fu_898_p1)
    begin
        if (((trunc_ln28_fu_898_p1 = ap_const_lv5_9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv2d_64_weights_9_we1 <= ap_const_logic_1;
        else 
            conv2d_64_weights_9_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_140_fu_840_p1 <= select_ln28_fu_832_p3(4 - 1 downto 0);

    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID, ap_predicate_op128_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op128_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_18_cast19_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_reg_1045_pp0_iter1_reg),64));
    icmp_ln28_fu_811_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv15_4800) else "0";
    icmp_ln29_fu_826_p2 <= "1" when (ap_sig_allocacmp_i_load = ap_const_lv10_240) else "0";
    icmp_ln30_fu_844_p2 <= "1" when (empty_140_fu_840_p1 = ap_const_lv4_0) else "0";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op128_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op128_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    select_ln28_1_fu_884_p3 <= 
        ap_const_lv480_lc_1 when (icmp_ln29_reg_1039_pp0_iter1_reg(0) = '1') else 
        shiftreg10_fu_204;
    select_ln28_2_fu_891_p3 <= 
        add_ln28_fu_878_p2 when (icmp_ln29_reg_1039_pp0_iter1_reg(0) = '1') else 
        channel_fu_212;
    select_ln28_fu_832_p3 <= 
        ap_const_lv10_0 when (icmp_ln29_fu_826_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    shiftreg10_cast_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_fu_884_p3),512));
    trunc_ln28_fu_898_p1 <= select_ln28_2_fu_891_p3(5 - 1 downto 0);
    trunc_ln30_fu_942_p1 <= ap_phi_mux_empty_phi_fu_778_p4(32 - 1 downto 0);
end behav;
