-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    maxp2d_32_feature_map_stream124_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    maxp2d_32_feature_map_stream124_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    maxp2d_32_feature_map_stream124_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    maxp2d_32_feature_map_stream124_empty_n : IN STD_LOGIC;
    maxp2d_32_feature_map_stream124_read : OUT STD_LOGIC;
    conv2d_64_window_stream_din : OUT STD_LOGIC_VECTOR (287 downto 0);
    conv2d_64_window_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_64_window_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    conv2d_64_window_stream_full_n : IN STD_LOGIC;
    conv2d_64_window_stream_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv13_1A60 : STD_LOGIC_VECTOR (12 downto 0) := "1101001100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln203_reg_1246 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_1_reg_1250 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op168_read_state2 : BOOLEAN;
    signal select_ln203_2_reg_1254 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln203_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal maxp2d_32_feature_map_stream124_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal conv2d_64_window_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln203_1_fu_960_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_2_fu_980_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_3_fu_988_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln203_3_reg_1258 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln203_fu_996_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln203_reg_1264 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_windows_elements_0_1_addr_reg_1268 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_0_2_addr_reg_1274 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_addr_reg_1280 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_1_addr_reg_1286 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_2_addr_reg_1292 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_3_addr_reg_1298 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_4_addr_reg_1304 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_5_addr_reg_1310 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_6_addr_reg_1316 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_7_addr_reg_1322 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_8_addr_reg_1328 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_9_addr_reg_1334 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_10_addr_reg_1340 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_11_addr_reg_1346 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_12_addr_reg_1352 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_13_addr_reg_1358 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_1_1_addr_reg_1364 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_1_2_addr_reg_1370 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_addr_reg_1376 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_1_addr_reg_1382 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_2_addr_reg_1388 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_3_addr_reg_1394 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_4_addr_reg_1400 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_5_addr_reg_1406 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_6_addr_reg_1412 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_7_addr_reg_1418 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_8_addr_reg_1424 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_9_addr_reg_1430 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_10_addr_reg_1436 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_11_addr_reg_1442 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_12_addr_reg_1448 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_13_addr_reg_1454 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_2_1_addr_reg_1460 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_2_2_addr_reg_1466 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_ce0 : STD_LOGIC;
    signal line_buffer_0_we0 : STD_LOGIC;
    signal line_buffer_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_ce1 : STD_LOGIC;
    signal line_buffer_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_ce0 : STD_LOGIC;
    signal line_buffer_1_we0 : STD_LOGIC;
    signal line_buffer_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_ce1 : STD_LOGIC;
    signal line_buffer_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_1_ce0 : STD_LOGIC;
    signal line_buffer_0_1_we0 : STD_LOGIC;
    signal line_buffer_0_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_1_ce1 : STD_LOGIC;
    signal line_buffer_0_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_1_ce0 : STD_LOGIC;
    signal line_buffer_1_1_we0 : STD_LOGIC;
    signal line_buffer_1_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_1_ce1 : STD_LOGIC;
    signal line_buffer_1_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_2_ce0 : STD_LOGIC;
    signal line_buffer_0_2_we0 : STD_LOGIC;
    signal line_buffer_0_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_2_ce1 : STD_LOGIC;
    signal line_buffer_0_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_2_ce0 : STD_LOGIC;
    signal line_buffer_1_2_we0 : STD_LOGIC;
    signal line_buffer_1_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_2_ce1 : STD_LOGIC;
    signal line_buffer_1_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_3_ce0 : STD_LOGIC;
    signal line_buffer_0_3_we0 : STD_LOGIC;
    signal line_buffer_0_3_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_3_ce1 : STD_LOGIC;
    signal line_buffer_0_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_3_ce0 : STD_LOGIC;
    signal line_buffer_1_3_we0 : STD_LOGIC;
    signal line_buffer_1_3_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_3_ce1 : STD_LOGIC;
    signal line_buffer_1_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_4_ce0 : STD_LOGIC;
    signal line_buffer_0_4_we0 : STD_LOGIC;
    signal line_buffer_0_4_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_4_ce1 : STD_LOGIC;
    signal line_buffer_0_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_4_ce0 : STD_LOGIC;
    signal line_buffer_1_4_we0 : STD_LOGIC;
    signal line_buffer_1_4_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_4_ce1 : STD_LOGIC;
    signal line_buffer_1_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_5_ce0 : STD_LOGIC;
    signal line_buffer_0_5_we0 : STD_LOGIC;
    signal line_buffer_0_5_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_5_ce1 : STD_LOGIC;
    signal line_buffer_0_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_5_ce0 : STD_LOGIC;
    signal line_buffer_1_5_we0 : STD_LOGIC;
    signal line_buffer_1_5_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_5_ce1 : STD_LOGIC;
    signal line_buffer_1_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_6_ce0 : STD_LOGIC;
    signal line_buffer_0_6_we0 : STD_LOGIC;
    signal line_buffer_0_6_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_6_ce1 : STD_LOGIC;
    signal line_buffer_0_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_6_ce0 : STD_LOGIC;
    signal line_buffer_1_6_we0 : STD_LOGIC;
    signal line_buffer_1_6_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_6_ce1 : STD_LOGIC;
    signal line_buffer_1_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_7_ce0 : STD_LOGIC;
    signal line_buffer_0_7_we0 : STD_LOGIC;
    signal line_buffer_0_7_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_7_ce1 : STD_LOGIC;
    signal line_buffer_0_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_7_ce0 : STD_LOGIC;
    signal line_buffer_1_7_we0 : STD_LOGIC;
    signal line_buffer_1_7_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_7_ce1 : STD_LOGIC;
    signal line_buffer_1_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_8_ce0 : STD_LOGIC;
    signal line_buffer_0_8_we0 : STD_LOGIC;
    signal line_buffer_0_8_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_8_ce1 : STD_LOGIC;
    signal line_buffer_0_8_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_8_ce0 : STD_LOGIC;
    signal line_buffer_1_8_we0 : STD_LOGIC;
    signal line_buffer_1_8_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_8_ce1 : STD_LOGIC;
    signal line_buffer_1_8_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_9_ce0 : STD_LOGIC;
    signal line_buffer_0_9_we0 : STD_LOGIC;
    signal line_buffer_0_9_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_9_ce1 : STD_LOGIC;
    signal line_buffer_0_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_9_ce0 : STD_LOGIC;
    signal line_buffer_1_9_we0 : STD_LOGIC;
    signal line_buffer_1_9_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_9_ce1 : STD_LOGIC;
    signal line_buffer_1_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_10_ce0 : STD_LOGIC;
    signal line_buffer_0_10_we0 : STD_LOGIC;
    signal line_buffer_0_10_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_10_ce1 : STD_LOGIC;
    signal line_buffer_0_10_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_10_ce0 : STD_LOGIC;
    signal line_buffer_1_10_we0 : STD_LOGIC;
    signal line_buffer_1_10_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_10_ce1 : STD_LOGIC;
    signal line_buffer_1_10_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_11_ce0 : STD_LOGIC;
    signal line_buffer_0_11_we0 : STD_LOGIC;
    signal line_buffer_0_11_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_11_ce1 : STD_LOGIC;
    signal line_buffer_0_11_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_11_ce0 : STD_LOGIC;
    signal line_buffer_1_11_we0 : STD_LOGIC;
    signal line_buffer_1_11_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_11_ce1 : STD_LOGIC;
    signal line_buffer_1_11_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_12_ce0 : STD_LOGIC;
    signal line_buffer_0_12_we0 : STD_LOGIC;
    signal line_buffer_0_12_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_12_ce1 : STD_LOGIC;
    signal line_buffer_0_12_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_12_ce0 : STD_LOGIC;
    signal line_buffer_1_12_we0 : STD_LOGIC;
    signal line_buffer_1_12_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_12_ce1 : STD_LOGIC;
    signal line_buffer_1_12_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_13_ce0 : STD_LOGIC;
    signal line_buffer_0_13_we0 : STD_LOGIC;
    signal line_buffer_0_13_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_13_ce1 : STD_LOGIC;
    signal line_buffer_0_13_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_13_ce0 : STD_LOGIC;
    signal line_buffer_1_13_we0 : STD_LOGIC;
    signal line_buffer_1_13_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_13_ce1 : STD_LOGIC;
    signal line_buffer_1_13_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_0_1_ce0 : STD_LOGIC;
    signal temp_windows_elements_0_1_we0 : STD_LOGIC;
    signal temp_windows_elements_0_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_0_1_ce1 : STD_LOGIC;
    signal temp_windows_elements_0_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_0_2_ce0 : STD_LOGIC;
    signal temp_windows_elements_0_2_we0 : STD_LOGIC;
    signal temp_windows_elements_0_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_0_2_ce1 : STD_LOGIC;
    signal temp_windows_elements_0_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_1_1_ce0 : STD_LOGIC;
    signal temp_windows_elements_1_1_we0 : STD_LOGIC;
    signal temp_windows_elements_1_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_1_1_ce1 : STD_LOGIC;
    signal temp_windows_elements_1_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_1_2_ce0 : STD_LOGIC;
    signal temp_windows_elements_1_2_we0 : STD_LOGIC;
    signal temp_windows_elements_1_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_1_2_ce1 : STD_LOGIC;
    signal temp_windows_elements_1_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_2_1_ce0 : STD_LOGIC;
    signal temp_windows_elements_2_1_we0 : STD_LOGIC;
    signal temp_windows_elements_2_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_2_1_ce1 : STD_LOGIC;
    signal temp_windows_elements_2_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_windows_elements_2_2_ce0 : STD_LOGIC;
    signal temp_windows_elements_2_2_we0 : STD_LOGIC;
    signal temp_windows_elements_2_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_windows_elements_2_2_ce1 : STD_LOGIC;
    signal temp_windows_elements_2_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_new_pixel_1_phi_fu_842_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1072_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_new_pixel_1_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_new_pixel_1_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_1_cast_fu_1008_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal channel_fu_92 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln205_fu_1046_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_channel_load : STD_LOGIC_VECTOR (5 downto 0);
    signal pixel_counter_fu_96 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln203_4_fu_1000_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_pixel_counter_load : STD_LOGIC_VECTOR (7 downto 0);
    signal col_ptr_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_col_ptr_load : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_fu_104 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_fu_893_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_s_fu_1077_p16 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1111_p16 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln232_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_ptr_15_fu_914_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln205_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_counter_2_fu_928_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp6_mid1_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp6203_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp77_mid1_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp77202_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_ptr_16_fu_920_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln203_fu_940_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln174_269_fu_1191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_268_fu_1187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_267_fu_1183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_266_fu_1179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_265_fu_1175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_264_fu_1171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_263_fu_1167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_262_fu_1163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln174_fu_1159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_571 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component accel_mux_1432_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accel_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    line_buffer_0_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_addr_reg_1280,
        ce0 => line_buffer_0_ce0,
        we0 => line_buffer_0_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_address1,
        ce1 => line_buffer_0_ce1,
        q1 => line_buffer_0_q1);

    line_buffer_1_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_addr_reg_1376,
        ce0 => line_buffer_1_ce0,
        we0 => line_buffer_1_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_address1,
        ce1 => line_buffer_1_ce1,
        q1 => line_buffer_1_q1);

    line_buffer_0_1_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_1_addr_reg_1286,
        ce0 => line_buffer_0_1_ce0,
        we0 => line_buffer_0_1_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_1_address1,
        ce1 => line_buffer_0_1_ce1,
        q1 => line_buffer_0_1_q1);

    line_buffer_1_1_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_1_addr_reg_1382,
        ce0 => line_buffer_1_1_ce0,
        we0 => line_buffer_1_1_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_1_address1,
        ce1 => line_buffer_1_1_ce1,
        q1 => line_buffer_1_1_q1);

    line_buffer_0_2_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_2_addr_reg_1292,
        ce0 => line_buffer_0_2_ce0,
        we0 => line_buffer_0_2_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_2_address1,
        ce1 => line_buffer_0_2_ce1,
        q1 => line_buffer_0_2_q1);

    line_buffer_1_2_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_2_addr_reg_1388,
        ce0 => line_buffer_1_2_ce0,
        we0 => line_buffer_1_2_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_2_address1,
        ce1 => line_buffer_1_2_ce1,
        q1 => line_buffer_1_2_q1);

    line_buffer_0_3_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_3_addr_reg_1298,
        ce0 => line_buffer_0_3_ce0,
        we0 => line_buffer_0_3_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_3_address1,
        ce1 => line_buffer_0_3_ce1,
        q1 => line_buffer_0_3_q1);

    line_buffer_1_3_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_3_addr_reg_1394,
        ce0 => line_buffer_1_3_ce0,
        we0 => line_buffer_1_3_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_3_address1,
        ce1 => line_buffer_1_3_ce1,
        q1 => line_buffer_1_3_q1);

    line_buffer_0_4_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_4_addr_reg_1304,
        ce0 => line_buffer_0_4_ce0,
        we0 => line_buffer_0_4_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_4_address1,
        ce1 => line_buffer_0_4_ce1,
        q1 => line_buffer_0_4_q1);

    line_buffer_1_4_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_4_addr_reg_1400,
        ce0 => line_buffer_1_4_ce0,
        we0 => line_buffer_1_4_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_4_address1,
        ce1 => line_buffer_1_4_ce1,
        q1 => line_buffer_1_4_q1);

    line_buffer_0_5_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_5_addr_reg_1310,
        ce0 => line_buffer_0_5_ce0,
        we0 => line_buffer_0_5_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_5_address1,
        ce1 => line_buffer_0_5_ce1,
        q1 => line_buffer_0_5_q1);

    line_buffer_1_5_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_5_addr_reg_1406,
        ce0 => line_buffer_1_5_ce0,
        we0 => line_buffer_1_5_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_5_address1,
        ce1 => line_buffer_1_5_ce1,
        q1 => line_buffer_1_5_q1);

    line_buffer_0_6_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_6_addr_reg_1316,
        ce0 => line_buffer_0_6_ce0,
        we0 => line_buffer_0_6_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_6_address1,
        ce1 => line_buffer_0_6_ce1,
        q1 => line_buffer_0_6_q1);

    line_buffer_1_6_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_6_addr_reg_1412,
        ce0 => line_buffer_1_6_ce0,
        we0 => line_buffer_1_6_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_6_address1,
        ce1 => line_buffer_1_6_ce1,
        q1 => line_buffer_1_6_q1);

    line_buffer_0_7_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_7_addr_reg_1322,
        ce0 => line_buffer_0_7_ce0,
        we0 => line_buffer_0_7_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_7_address1,
        ce1 => line_buffer_0_7_ce1,
        q1 => line_buffer_0_7_q1);

    line_buffer_1_7_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_7_addr_reg_1418,
        ce0 => line_buffer_1_7_ce0,
        we0 => line_buffer_1_7_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_7_address1,
        ce1 => line_buffer_1_7_ce1,
        q1 => line_buffer_1_7_q1);

    line_buffer_0_8_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_8_addr_reg_1328,
        ce0 => line_buffer_0_8_ce0,
        we0 => line_buffer_0_8_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_8_address1,
        ce1 => line_buffer_0_8_ce1,
        q1 => line_buffer_0_8_q1);

    line_buffer_1_8_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_8_addr_reg_1424,
        ce0 => line_buffer_1_8_ce0,
        we0 => line_buffer_1_8_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_8_address1,
        ce1 => line_buffer_1_8_ce1,
        q1 => line_buffer_1_8_q1);

    line_buffer_0_9_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_9_addr_reg_1334,
        ce0 => line_buffer_0_9_ce0,
        we0 => line_buffer_0_9_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_9_address1,
        ce1 => line_buffer_0_9_ce1,
        q1 => line_buffer_0_9_q1);

    line_buffer_1_9_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_9_addr_reg_1430,
        ce0 => line_buffer_1_9_ce0,
        we0 => line_buffer_1_9_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_9_address1,
        ce1 => line_buffer_1_9_ce1,
        q1 => line_buffer_1_9_q1);

    line_buffer_0_10_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_10_addr_reg_1340,
        ce0 => line_buffer_0_10_ce0,
        we0 => line_buffer_0_10_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_10_address1,
        ce1 => line_buffer_0_10_ce1,
        q1 => line_buffer_0_10_q1);

    line_buffer_1_10_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_10_addr_reg_1436,
        ce0 => line_buffer_1_10_ce0,
        we0 => line_buffer_1_10_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_10_address1,
        ce1 => line_buffer_1_10_ce1,
        q1 => line_buffer_1_10_q1);

    line_buffer_0_11_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_11_addr_reg_1346,
        ce0 => line_buffer_0_11_ce0,
        we0 => line_buffer_0_11_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_11_address1,
        ce1 => line_buffer_0_11_ce1,
        q1 => line_buffer_0_11_q1);

    line_buffer_1_11_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_11_addr_reg_1442,
        ce0 => line_buffer_1_11_ce0,
        we0 => line_buffer_1_11_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_11_address1,
        ce1 => line_buffer_1_11_ce1,
        q1 => line_buffer_1_11_q1);

    line_buffer_0_12_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_12_addr_reg_1352,
        ce0 => line_buffer_0_12_ce0,
        we0 => line_buffer_0_12_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_12_address1,
        ce1 => line_buffer_0_12_ce1,
        q1 => line_buffer_0_12_q1);

    line_buffer_1_12_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_12_addr_reg_1448,
        ce0 => line_buffer_1_12_ce0,
        we0 => line_buffer_1_12_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_12_address1,
        ce1 => line_buffer_1_12_ce1,
        q1 => line_buffer_1_12_q1);

    line_buffer_0_13_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_13_addr_reg_1358,
        ce0 => line_buffer_0_13_ce0,
        we0 => line_buffer_0_13_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => line_buffer_0_13_address1,
        ce1 => line_buffer_0_13_ce1,
        q1 => line_buffer_0_13_q1);

    line_buffer_1_13_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_13_addr_reg_1454,
        ce0 => line_buffer_1_13_ce0,
        we0 => line_buffer_1_13_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => line_buffer_1_13_address1,
        ce1 => line_buffer_1_13_ce1,
        q1 => line_buffer_1_13_q1);

    temp_windows_elements_0_1_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_windows_elements_0_1_addr_reg_1268,
        ce0 => temp_windows_elements_0_1_ce0,
        we0 => temp_windows_elements_0_1_we0,
        d0 => temp_windows_elements_0_2_q1,
        address1 => temp_windows_elements_0_1_address1,
        ce1 => temp_windows_elements_0_1_ce1,
        q1 => temp_windows_elements_0_1_q1);

    temp_windows_elements_0_2_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_windows_elements_0_2_addr_reg_1274,
        ce0 => temp_windows_elements_0_2_ce0,
        we0 => temp_windows_elements_0_2_we0,
        d0 => tmp_s_fu_1077_p16,
        address1 => temp_windows_elements_0_2_address1,
        ce1 => temp_windows_elements_0_2_ce1,
        q1 => temp_windows_elements_0_2_q1);

    temp_windows_elements_1_1_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_windows_elements_1_1_addr_reg_1364,
        ce0 => temp_windows_elements_1_1_ce0,
        we0 => temp_windows_elements_1_1_we0,
        d0 => temp_windows_elements_1_2_q1,
        address1 => temp_windows_elements_1_1_address1,
        ce1 => temp_windows_elements_1_1_ce1,
        q1 => temp_windows_elements_1_1_q1);

    temp_windows_elements_1_2_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_windows_elements_1_2_addr_reg_1370,
        ce0 => temp_windows_elements_1_2_ce0,
        we0 => temp_windows_elements_1_2_we0,
        d0 => tmp_1_fu_1111_p16,
        address1 => temp_windows_elements_1_2_address1,
        ce1 => temp_windows_elements_1_2_ce1,
        q1 => temp_windows_elements_1_2_q1);

    temp_windows_elements_2_1_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_windows_elements_2_1_addr_reg_1460,
        ce0 => temp_windows_elements_2_1_ce0,
        we0 => temp_windows_elements_2_1_we0,
        d0 => temp_windows_elements_2_2_q1,
        address1 => temp_windows_elements_2_1_address1,
        ce1 => temp_windows_elements_2_1_ce1,
        q1 => temp_windows_elements_2_1_q1);

    temp_windows_elements_2_2_U : component accel_create_window_stream_conv2d_mc_float_14u_14u_32u_3u_3u_s_line_buffer_0_RAM_AUbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_windows_elements_2_2_addr_reg_1466,
        ce0 => temp_windows_elements_2_2_ce0,
        we0 => temp_windows_elements_2_2_we0,
        d0 => ap_phi_mux_new_pixel_1_phi_fu_842_p4,
        address1 => temp_windows_elements_2_2_address1,
        ce1 => temp_windows_elements_2_2_ce1,
        q1 => temp_windows_elements_2_2_q1);

    mux_1432_32_1_1_U517 : component accel_mux_1432_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => line_buffer_0_q1,
        din1 => line_buffer_0_1_q1,
        din2 => line_buffer_0_2_q1,
        din3 => line_buffer_0_3_q1,
        din4 => line_buffer_0_4_q1,
        din5 => line_buffer_0_5_q1,
        din6 => line_buffer_0_6_q1,
        din7 => line_buffer_0_7_q1,
        din8 => line_buffer_0_8_q1,
        din9 => line_buffer_0_9_q1,
        din10 => line_buffer_0_10_q1,
        din11 => line_buffer_0_11_q1,
        din12 => line_buffer_0_12_q1,
        din13 => line_buffer_0_13_q1,
        din14 => select_ln203_3_reg_1258,
        dout => tmp_s_fu_1077_p16);

    mux_1432_32_1_1_U518 : component accel_mux_1432_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => line_buffer_1_q1,
        din1 => line_buffer_1_1_q1,
        din2 => line_buffer_1_2_q1,
        din3 => line_buffer_1_3_q1,
        din4 => line_buffer_1_4_q1,
        din5 => line_buffer_1_5_q1,
        din6 => line_buffer_1_6_q1,
        din7 => line_buffer_1_7_q1,
        din8 => line_buffer_1_8_q1,
        din9 => line_buffer_1_9_q1,
        din10 => line_buffer_1_10_q1,
        din11 => line_buffer_1_11_q1,
        din12 => line_buffer_1_12_q1,
        din13 => line_buffer_1_13_q1,
        din14 => select_ln203_3_reg_1258,
        dout => tmp_1_fu_1111_p16);

    flow_control_loop_pipe_U : component accel_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_new_pixel_1_reg_838_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_571)) then
                if (((icmp_ln203_fu_887_p2 = ap_const_lv1_0) and (select_ln203_1_fu_960_p3 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_new_pixel_1_reg_838 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_new_pixel_1_reg_838 <= ap_phi_reg_pp0_iter0_new_pixel_1_reg_838;
                end if;
            end if; 
        end if;
    end process;

    channel_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_571)) then
                if ((icmp_ln203_fu_887_p2 = ap_const_lv1_0)) then 
                    channel_fu_92 <= add_ln205_fu_1046_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    channel_fu_92 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    col_ptr_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_571)) then
                if ((icmp_ln203_fu_887_p2 = ap_const_lv1_0)) then 
                    col_ptr_fu_100 <= select_ln203_3_fu_988_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_ptr_fu_100 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_571)) then
                if ((icmp_ln203_fu_887_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_104 <= add_ln203_fu_893_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_104 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    pixel_counter_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_571)) then
                if ((icmp_ln203_fu_887_p2 = ap_const_lv1_0)) then 
                    pixel_counter_fu_96 <= select_ln203_4_fu_1000_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    pixel_counter_fu_96 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln203_reg_1246 <= icmp_ln203_fu_887_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_887_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                line_buffer_0_10_addr_reg_1340 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_11_addr_reg_1346 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_12_addr_reg_1352 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_13_addr_reg_1358 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_1_addr_reg_1286 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_2_addr_reg_1292 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_3_addr_reg_1298 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_4_addr_reg_1304 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_5_addr_reg_1310 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_6_addr_reg_1316 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_7_addr_reg_1322 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_8_addr_reg_1328 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_9_addr_reg_1334 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_0_addr_reg_1280 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_10_addr_reg_1436 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_11_addr_reg_1442 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_12_addr_reg_1448 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_13_addr_reg_1454 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_1_addr_reg_1382 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_2_addr_reg_1388 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_3_addr_reg_1394 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_4_addr_reg_1400 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_5_addr_reg_1406 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_6_addr_reg_1412 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_7_addr_reg_1418 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_8_addr_reg_1424 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_9_addr_reg_1430 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                line_buffer_1_addr_reg_1376 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                select_ln203_1_reg_1250 <= select_ln203_1_fu_960_p3;
                select_ln203_2_reg_1254 <= select_ln203_2_fu_980_p3;
                select_ln203_3_reg_1258 <= select_ln203_3_fu_988_p3;
                temp_windows_elements_0_1_addr_reg_1268 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                temp_windows_elements_0_2_addr_reg_1274 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                temp_windows_elements_1_1_addr_reg_1364 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                temp_windows_elements_1_2_addr_reg_1370 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                temp_windows_elements_2_1_addr_reg_1460 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                temp_windows_elements_2_2_addr_reg_1466 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);
                trunc_ln203_reg_1264 <= trunc_ln203_fu_996_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln203_fu_893_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv13_1));
    add_ln205_fu_1046_p2 <= std_logic_vector(unsigned(select_ln203_fu_940_p3) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, maxp2d_32_feature_map_stream124_empty_n, ap_predicate_op168_read_state2, conv2d_64_window_stream_full_n, select_ln203_2_reg_1254, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln203_2_reg_1254 = ap_const_lv1_1) and (conv2d_64_window_stream_full_n = ap_const_logic_0)) or ((ap_predicate_op168_read_state2 = ap_const_boolean_1) and (maxp2d_32_feature_map_stream124_empty_n = ap_const_logic_0)))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, maxp2d_32_feature_map_stream124_empty_n, ap_predicate_op168_read_state2, conv2d_64_window_stream_full_n, select_ln203_2_reg_1254, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln203_2_reg_1254 = ap_const_lv1_1) and (conv2d_64_window_stream_full_n = ap_const_logic_0)) or ((ap_predicate_op168_read_state2 = ap_const_boolean_1) and (maxp2d_32_feature_map_stream124_empty_n = ap_const_logic_0)))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, maxp2d_32_feature_map_stream124_empty_n, ap_predicate_op168_read_state2, conv2d_64_window_stream_full_n, select_ln203_2_reg_1254, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln203_2_reg_1254 = ap_const_lv1_1) and (conv2d_64_window_stream_full_n = ap_const_logic_0)) or ((ap_predicate_op168_read_state2 = ap_const_boolean_1) and (maxp2d_32_feature_map_stream124_empty_n = ap_const_logic_0)))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(maxp2d_32_feature_map_stream124_empty_n, ap_predicate_op168_read_state2, conv2d_64_window_stream_full_n, select_ln203_2_reg_1254)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((select_ln203_2_reg_1254 = ap_const_lv1_1) and (conv2d_64_window_stream_full_n = ap_const_logic_0)) or ((ap_predicate_op168_read_state2 = ap_const_boolean_1) and (maxp2d_32_feature_map_stream124_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_571_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_571 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln203_fu_887_p2, ap_start_int)
    begin
        if (((icmp_ln203_fu_887_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_new_pixel_1_phi_fu_842_p4_assign_proc : process(icmp_ln203_reg_1246, select_ln203_1_reg_1250, tmp_fu_1072_p1, ap_phi_reg_pp0_iter1_new_pixel_1_reg_838)
    begin
        if (((select_ln203_1_reg_1250 = ap_const_lv1_1) and (icmp_ln203_reg_1246 = ap_const_lv1_0))) then 
            ap_phi_mux_new_pixel_1_phi_fu_842_p4 <= tmp_fu_1072_p1;
        else 
            ap_phi_mux_new_pixel_1_phi_fu_842_p4 <= ap_phi_reg_pp0_iter1_new_pixel_1_reg_838;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_new_pixel_1_reg_838 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op168_read_state2_assign_proc : process(icmp_ln203_reg_1246, select_ln203_1_reg_1250)
    begin
                ap_predicate_op168_read_state2 <= ((select_ln203_1_reg_1250 = ap_const_lv1_1) and (icmp_ln203_reg_1246 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_channel_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, channel_fu_92, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_channel_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_channel_load <= channel_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_col_ptr_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, col_ptr_fu_100, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_col_ptr_load <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_col_ptr_load <= col_ptr_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_104, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_pixel_counter_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, pixel_counter_fu_96, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_pixel_counter_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_pixel_counter_load <= pixel_counter_fu_96;
        end if; 
    end process;

    bitcast_ln174_262_fu_1163_p1 <= temp_windows_elements_0_2_q1;
    bitcast_ln174_263_fu_1167_p1 <= tmp_s_fu_1077_p16;
    bitcast_ln174_264_fu_1171_p1 <= temp_windows_elements_1_1_q1;
    bitcast_ln174_265_fu_1175_p1 <= temp_windows_elements_1_2_q1;
    bitcast_ln174_266_fu_1179_p1 <= tmp_1_fu_1111_p16;
    bitcast_ln174_267_fu_1183_p1 <= temp_windows_elements_2_1_q1;
    bitcast_ln174_268_fu_1187_p1 <= temp_windows_elements_2_2_q1;
    bitcast_ln174_269_fu_1191_p1 <= ap_phi_mux_new_pixel_1_phi_fu_842_p4;
    bitcast_ln174_fu_1159_p1 <= temp_windows_elements_0_1_q1;
    channel_1_cast_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_fu_940_p3),64));
    cmp6203_fu_954_p2 <= "1" when (unsigned(ap_sig_allocacmp_pixel_counter_load) < unsigned(ap_const_lv8_C4)) else "0";
    cmp6_mid1_fu_948_p2 <= "1" when (unsigned(pixel_counter_2_fu_928_p2) < unsigned(ap_const_lv8_C4)) else "0";
    cmp77202_fu_974_p2 <= "1" when (unsigned(ap_sig_allocacmp_pixel_counter_load) > unsigned(ap_const_lv8_E)) else "0";
    cmp77_mid1_fu_968_p2 <= "1" when (unsigned(pixel_counter_2_fu_928_p2) > unsigned(ap_const_lv8_E)) else "0";
    col_ptr_15_fu_914_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_col_ptr_load) + unsigned(ap_const_lv32_1));
    col_ptr_16_fu_920_p3 <= 
        ap_const_lv32_0 when (icmp_ln232_fu_908_p2(0) = '1') else 
        col_ptr_15_fu_914_p2;

    conv2d_64_window_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv2d_64_window_stream_full_n, select_ln203_2_reg_1254, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln203_2_reg_1254 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_64_window_stream_blk_n <= conv2d_64_window_stream_full_n;
        else 
            conv2d_64_window_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv2d_64_window_stream_din <= ((((((((bitcast_ln174_269_fu_1191_p1 & bitcast_ln174_268_fu_1187_p1) & bitcast_ln174_267_fu_1183_p1) & bitcast_ln174_266_fu_1179_p1) & bitcast_ln174_265_fu_1175_p1) & bitcast_ln174_264_fu_1171_p1) & bitcast_ln174_263_fu_1167_p1) & bitcast_ln174_262_fu_1163_p1) & bitcast_ln174_fu_1159_p1);

    conv2d_64_window_stream_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln203_2_reg_1254, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln203_2_reg_1254 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_64_window_stream_write <= ap_const_logic_1;
        else 
            conv2d_64_window_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln203_fu_887_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv13_1A60) else "0";
    icmp_ln205_fu_934_p2 <= "1" when (ap_sig_allocacmp_channel_load = ap_const_lv6_20) else "0";
    icmp_ln232_fu_908_p2 <= "1" when (ap_sig_allocacmp_col_ptr_load = ap_const_lv32_D) else "0";
    line_buffer_0_10_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_10_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_10_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_10_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_10_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_A))) then 
            line_buffer_0_10_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_11_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_11_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_11_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_11_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_11_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_B))) then 
            line_buffer_0_11_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_12_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_12_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_12_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_12_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_12_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_C))) then 
            line_buffer_0_12_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_13_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_13_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_13_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_13_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_13_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((trunc_ln203_reg_1264 = ap_const_lv4_D) or ((trunc_ln203_reg_1264 = ap_const_lv4_E) or (trunc_ln203_reg_1264 = ap_const_lv4_F))))) then 
            line_buffer_0_13_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_1_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_1))) then 
            line_buffer_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_2_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_2_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_2))) then 
            line_buffer_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_3_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_3_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_3))) then 
            line_buffer_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_4_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_4_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_4_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_4))) then 
            line_buffer_0_4_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_5_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_5_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_5_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_5))) then 
            line_buffer_0_5_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_6_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_6_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_6_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_6))) then 
            line_buffer_0_6_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_7_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_7_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_7_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_7))) then 
            line_buffer_0_7_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_8_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_8_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_8_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_8_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_8_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_8))) then 
            line_buffer_0_8_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_9_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_9_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_9_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_9_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_9_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_9))) then 
            line_buffer_0_9_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_0))) then 
            line_buffer_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_10_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_10_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_10_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_10_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_10_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_A))) then 
            line_buffer_1_10_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_11_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_11_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_11_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_11_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_11_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_B))) then 
            line_buffer_1_11_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_12_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_12_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_12_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_12_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_12_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_C))) then 
            line_buffer_1_12_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_13_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_13_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_13_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_13_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_13_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((trunc_ln203_reg_1264 = ap_const_lv4_D) or ((trunc_ln203_reg_1264 = ap_const_lv4_E) or (trunc_ln203_reg_1264 = ap_const_lv4_F))))) then 
            line_buffer_1_13_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_1_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_1))) then 
            line_buffer_1_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_2_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_2_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_2))) then 
            line_buffer_1_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_3_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_3_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_3))) then 
            line_buffer_1_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_4_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_4_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_4_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_4))) then 
            line_buffer_1_4_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_5_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_5_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_5_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_5))) then 
            line_buffer_1_5_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_6_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_6_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_6_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_6))) then 
            line_buffer_1_6_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_7_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_7_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_7_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_7))) then 
            line_buffer_1_7_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_8_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_8_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_8_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_8_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_8_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_8))) then 
            line_buffer_1_8_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_9_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_9_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_9_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_9_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_9_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_9))) then 
            line_buffer_1_9_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    line_buffer_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln203_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1264 = ap_const_lv4_0))) then 
            line_buffer_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    maxp2d_32_feature_map_stream124_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, maxp2d_32_feature_map_stream124_empty_n, ap_predicate_op168_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op168_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            maxp2d_32_feature_map_stream124_blk_n <= maxp2d_32_feature_map_stream124_empty_n;
        else 
            maxp2d_32_feature_map_stream124_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    maxp2d_32_feature_map_stream124_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op168_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op168_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            maxp2d_32_feature_map_stream124_read <= ap_const_logic_1;
        else 
            maxp2d_32_feature_map_stream124_read <= ap_const_logic_0;
        end if; 
    end process;

    pixel_counter_2_fu_928_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_pixel_counter_load) + unsigned(ap_const_lv8_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln203_1_fu_960_p3 <= 
        cmp6_mid1_fu_948_p2 when (icmp_ln205_fu_934_p2(0) = '1') else 
        cmp6203_fu_954_p2;
    select_ln203_2_fu_980_p3 <= 
        cmp77_mid1_fu_968_p2 when (icmp_ln205_fu_934_p2(0) = '1') else 
        cmp77202_fu_974_p2;
    select_ln203_3_fu_988_p3 <= 
        col_ptr_16_fu_920_p3 when (icmp_ln205_fu_934_p2(0) = '1') else 
        ap_sig_allocacmp_col_ptr_load;
    select_ln203_4_fu_1000_p3 <= 
        pixel_counter_2_fu_928_p2 when (icmp_ln205_fu_934_p2(0) = '1') else 
        ap_sig_allocacmp_pixel_counter_load;
    select_ln203_fu_940_p3 <= 
        ap_const_lv6_0 when (icmp_ln205_fu_934_p2(0) = '1') else 
        ap_sig_allocacmp_channel_load;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    temp_windows_elements_0_1_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    temp_windows_elements_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_0_1_ce0 <= ap_const_logic_1;
        else 
            temp_windows_elements_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_0_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_0_1_ce1 <= ap_const_logic_1;
        else 
            temp_windows_elements_0_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_0_1_we0 <= ap_const_logic_1;
        else 
            temp_windows_elements_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_windows_elements_0_2_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    temp_windows_elements_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_0_2_ce0 <= ap_const_logic_1;
        else 
            temp_windows_elements_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_0_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_0_2_ce1 <= ap_const_logic_1;
        else 
            temp_windows_elements_0_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_0_2_we0 <= ap_const_logic_1;
        else 
            temp_windows_elements_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_windows_elements_1_1_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    temp_windows_elements_1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_1_1_ce0 <= ap_const_logic_1;
        else 
            temp_windows_elements_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_1_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_1_1_ce1 <= ap_const_logic_1;
        else 
            temp_windows_elements_1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_1_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_1_1_we0 <= ap_const_logic_1;
        else 
            temp_windows_elements_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_windows_elements_1_2_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    temp_windows_elements_1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_1_2_ce0 <= ap_const_logic_1;
        else 
            temp_windows_elements_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_1_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_1_2_ce1 <= ap_const_logic_1;
        else 
            temp_windows_elements_1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_1_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_1_2_we0 <= ap_const_logic_1;
        else 
            temp_windows_elements_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_windows_elements_2_1_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    temp_windows_elements_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_2_1_ce0 <= ap_const_logic_1;
        else 
            temp_windows_elements_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_2_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_2_1_ce1 <= ap_const_logic_1;
        else 
            temp_windows_elements_2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_2_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_2_1_we0 <= ap_const_logic_1;
        else 
            temp_windows_elements_2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_windows_elements_2_2_address1 <= channel_1_cast_fu_1008_p1(5 - 1 downto 0);

    temp_windows_elements_2_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_2_2_ce0 <= ap_const_logic_1;
        else 
            temp_windows_elements_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_2_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_2_2_ce1 <= ap_const_logic_1;
        else 
            temp_windows_elements_2_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_windows_elements_2_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_windows_elements_2_2_we0 <= ap_const_logic_1;
        else 
            temp_windows_elements_2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_1072_p1 <= maxp2d_32_feature_map_stream124_dout;
    trunc_ln203_fu_996_p1 <= select_ln203_3_fu_988_p3(4 - 1 downto 0);
end behav;
