-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accel_softmax_10u_128u_Pipeline_VITIS_LOOP_463_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    biases_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    biases_ce0 : OUT STD_LOGIC;
    biases_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_9_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_9_out_ap_vld : OUT STD_LOGIC;
    sum_8_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_8_out_ap_vld : OUT STD_LOGIC;
    sum_7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_7_out_ap_vld : OUT STD_LOGIC;
    sum_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_6_out_ap_vld : OUT STD_LOGIC;
    sum_5_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_5_out_ap_vld : OUT STD_LOGIC;
    sum_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_4_out_ap_vld : OUT STD_LOGIC;
    sum_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_3_out_ap_vld : OUT STD_LOGIC;
    sum_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_2_out_ap_vld : OUT STD_LOGIC;
    sum_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_1_out_ap_vld : OUT STD_LOGIC;
    sum_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of accel_softmax_10u_128u_Pipeline_VITIS_LOOP_463_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln463_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal kernel_2_reg_378 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln464_cast_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal kernel_fu_64 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln463_fu_205_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_kernel_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_4_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_5_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_6_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_7_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_8_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_9_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    kernel_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln463_fu_199_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    kernel_fu_64 <= add_ln463_fu_205_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    kernel_fu_64 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                kernel_2_reg_378 <= ap_sig_allocacmp_kernel_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_2_reg_378 = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sum_1_fu_72 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_2_reg_378 = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sum_2_fu_76 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_2_reg_378 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sum_3_fu_80 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_2_reg_378 = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sum_4_fu_84 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_2_reg_378 = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sum_5_fu_88 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_2_reg_378 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sum_6_fu_92 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_2_reg_378 = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sum_7_fu_96 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_2_reg_378 = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sum_8_fu_100 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((kernel_2_reg_378 = ap_const_lv4_9) or ((kernel_2_reg_378 = ap_const_lv4_A) or ((kernel_2_reg_378 = ap_const_lv4_B) or ((kernel_2_reg_378 = ap_const_lv4_C) or ((kernel_2_reg_378 = ap_const_lv4_D) or ((kernel_2_reg_378 = ap_const_lv4_E) or (kernel_2_reg_378 = ap_const_lv4_F))))))))) then
                sum_9_fu_104 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_2_reg_378 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sum_fu_68 <= biases_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln463_fu_205_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_kernel_2) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln463_fu_199_p2)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_kernel_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, kernel_fu_64, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_kernel_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_kernel_2 <= kernel_fu_64;
        end if; 
    end process;

    biases_address0 <= trunc_ln464_cast_fu_211_p1(4 - 1 downto 0);

    biases_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            biases_ce0 <= ap_const_logic_1;
        else 
            biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln463_fu_199_p2 <= "1" when (ap_sig_allocacmp_kernel_2 = ap_const_lv4_A) else "0";
    sum_1_out <= sum_1_fu_72;

    sum_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_1_out_ap_vld <= ap_const_logic_1;
        else 
            sum_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_2_out <= sum_2_fu_76;

    sum_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_2_out_ap_vld <= ap_const_logic_1;
        else 
            sum_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_3_out <= sum_3_fu_80;

    sum_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_3_out_ap_vld <= ap_const_logic_1;
        else 
            sum_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_4_out <= sum_4_fu_84;

    sum_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_4_out_ap_vld <= ap_const_logic_1;
        else 
            sum_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_5_out <= sum_5_fu_88;

    sum_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_5_out_ap_vld <= ap_const_logic_1;
        else 
            sum_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_6_out <= sum_6_fu_92;

    sum_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_6_out_ap_vld <= ap_const_logic_1;
        else 
            sum_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_7_out <= sum_7_fu_96;

    sum_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_7_out_ap_vld <= ap_const_logic_1;
        else 
            sum_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_8_out <= sum_8_fu_100;

    sum_8_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_8_out_ap_vld <= ap_const_logic_1;
        else 
            sum_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_9_out <= sum_9_fu_104;

    sum_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_9_out_ap_vld <= ap_const_logic_1;
        else 
            sum_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_out <= sum_fu_68;

    sum_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln463_fu_199_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln463_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_out_ap_vld <= ap_const_logic_1;
        else 
            sum_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln464_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_kernel_2),64));
end behav;
