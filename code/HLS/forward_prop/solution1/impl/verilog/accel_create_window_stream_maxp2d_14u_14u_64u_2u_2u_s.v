// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accel_create_window_stream_maxp2d_14u_14u_64u_2u_2u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        conv2d_64_feature_map_stream125_dout,
        conv2d_64_feature_map_stream125_num_data_valid,
        conv2d_64_feature_map_stream125_fifo_cap,
        conv2d_64_feature_map_stream125_empty_n,
        conv2d_64_feature_map_stream125_read,
        maxp2d_64_window_stream_din,
        maxp2d_64_window_stream_num_data_valid,
        maxp2d_64_window_stream_fifo_cap,
        maxp2d_64_window_stream_full_n,
        maxp2d_64_window_stream_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] conv2d_64_feature_map_stream125_dout;
input  [2:0] conv2d_64_feature_map_stream125_num_data_valid;
input  [2:0] conv2d_64_feature_map_stream125_fifo_cap;
input   conv2d_64_feature_map_stream125_empty_n;
output   conv2d_64_feature_map_stream125_read;
output  [127:0] maxp2d_64_window_stream_din;
input  [2:0] maxp2d_64_window_stream_num_data_valid;
input  [2:0] maxp2d_64_window_stream_fifo_cap;
input   maxp2d_64_window_stream_full_n;
output   maxp2d_64_window_stream_write;
output   start_out;
output   start_write;

reg ap_idle;
reg conv2d_64_feature_map_stream125_read;
reg maxp2d_64_window_stream_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] select_ln351_12_reg_914;
reg   [0:0] select_ln351_12_reg_914_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln351_fu_280_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    conv2d_64_feature_map_stream125_blk_n;
wire    ap_block_pp0_stage0;
reg    maxp2d_64_window_stream_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] pos_y_0_fu_212_p2;
reg   [31:0] pos_y_0_reg_858;
reg   [0:0] tmp_28_reg_863;
reg   [0:0] tmp_28_reg_863_pp0_iter1_reg;
reg   [0:0] tmp_29_reg_868;
reg   [0:0] tmp_29_reg_868_pp0_iter1_reg;
reg   [0:0] tmp_30_reg_873;
reg   [0:0] tmp_31_reg_878;
wire   [31:0] row_ptr_10_fu_327_p3;
reg   [31:0] row_ptr_10_reg_887;
reg   [31:0] row_ptr_10_reg_887_pp0_iter1_reg;
wire   [31:0] col_ptr_14_fu_335_p3;
reg   [31:0] col_ptr_14_reg_893;
wire   [0:0] icmp_ln353_fu_343_p2;
reg   [0:0] icmp_ln353_reg_900;
reg   [0:0] icmp_ln353_reg_900_pp0_iter1_reg;
wire   [4:0] add_ln358_fu_415_p2;
reg   [4:0] add_ln358_reg_909;
wire   [0:0] select_ln351_12_fu_433_p3;
wire   [4:0] trunc_ln367_6_fu_441_p1;
reg   [4:0] trunc_ln367_6_reg_918;
wire   [31:0] add_ln364_2_fu_445_p2;
reg   [31:0] add_ln364_2_reg_923;
reg   [31:0] add_ln364_2_reg_923_pp0_iter1_reg;
wire   [4:0] trunc_ln367_8_fu_459_p1;
reg   [4:0] trunc_ln367_8_reg_929;
wire   [10:0] zext_ln358_5_fu_485_p1;
reg   [10:0] zext_ln358_5_reg_934;
wire   [31:0] pos_y_0_mid1_fu_539_p2;
reg   [31:0] pos_y_0_mid1_reg_946;
wire   [31:0] select_ln366_6_fu_685_p3;
reg   [31:0] select_ln366_6_reg_962;
wire   [31:0] select_ln366_fu_693_p3;
reg   [31:0] select_ln366_reg_967;
wire   [10:0] line_buffer_address0;
reg    line_buffer_ce0;
reg    line_buffer_we0;
wire   [10:0] line_buffer_address1;
reg    line_buffer_ce1;
wire   [31:0] line_buffer_q1;
wire   [10:0] line_buffer_address2;
reg    line_buffer_ce2;
wire   [31:0] line_buffer_q2;
wire   [10:0] line_buffer_address3;
reg    line_buffer_ce3;
wire   [31:0] line_buffer_q3;
wire   [63:0] zext_ln367_8_fu_495_p1;
wire   [63:0] zext_ln358_6_fu_655_p1;
wire   [63:0] zext_ln367_6_fu_665_p1;
wire   [63:0] zext_ln367_7_fu_675_p1;
reg   [6:0] channel_fu_72;
wire   [6:0] add_ln353_fu_500_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_channel_load;
reg   [31:0] temp_window_elements_load2_fu_76;
wire   [31:0] select_ln366_4_fu_753_p3;
reg   [31:0] temp_window_elements_load_206_fu_80;
wire   [31:0] select_ln366_5_fu_761_p3;
reg   [31:0] temp_window_elements_load_2110_fu_84;
reg   [31:0] temp_window_elements_load_2214_fu_88;
reg   [31:0] row_ptr_fu_92;
wire   [31:0] select_ln351_11_fu_399_p3;
reg   [31:0] ap_sig_allocacmp_row_ptr_8;
reg   [31:0] col_ptr_fu_96;
wire   [31:0] select_ln351_10_fu_361_p3;
reg   [31:0] ap_sig_allocacmp_col_ptr_8;
reg   [13:0] indvar_flatten_fu_100;
wire   [13:0] add_ln351_fu_286_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_fu_680_p1;
wire   [0:0] trunc_ln351_fu_196_p1;
wire   [0:0] cmp34_not_fu_200_p2;
wire   [31:0] add_ln364_fu_218_p2;
wire   [31:0] or_ln366_fu_224_p2;
wire   [31:0] or_ln366_4_fu_238_p2;
wire   [31:0] or_ln366_5_fu_252_p2;
wire   [31:0] or_ln366_6_fu_266_p2;
wire   [31:0] row_ptr_9_fu_295_p2;
wire   [31:0] col_ptr_12_fu_307_p2;
wire   [0:0] icmp_ln377_fu_313_p2;
wire   [0:0] icmp_ln373_fu_301_p2;
wire   [31:0] col_ptr_13_fu_319_p3;
wire   [35:0] tmp_13_fu_369_p3;
wire   [32:0] tmp_14_fu_381_p3;
wire   [36:0] zext_ln358_fu_377_p1;
wire   [36:0] zext_ln358_4_fu_389_p1;
wire   [36:0] sub_ln358_fu_393_p2;
wire   [4:0] trunc_ln358_fu_407_p1;
wire   [4:0] trunc_ln358_2_fu_411_p1;
wire   [0:0] trunc_ln351_2_fu_357_p1;
wire   [0:0] cmp34_not_mid1_fu_421_p2;
wire   [0:0] demorgan_mid1_fu_427_p2;
wire   [0:0] demorgan_fu_206_p2;
wire   [31:0] select_ln351_15_fu_451_p3;
wire   [4:0] trunc_ln367_9_fu_463_p1;
wire   [4:0] trunc_ln367_10_fu_467_p1;
wire   [4:0] add_ln367_7_fu_471_p2;
wire   [6:0] select_ln351_fu_349_p3;
wire   [10:0] tmp_20_fu_477_p3;
wire   [10:0] add_ln367_10_fu_489_p2;
wire   [31:0] select_ln351_13_fu_544_p3;
wire   [35:0] tmp_16_fu_550_p3;
wire   [32:0] tmp_17_fu_562_p3;
wire   [36:0] zext_ln367_fu_558_p1;
wire   [36:0] zext_ln367_5_fu_570_p1;
wire   [36:0] sub_ln367_fu_574_p2;
wire   [4:0] trunc_ln367_fu_580_p1;
wire   [4:0] add_ln367_fu_584_p2;
wire   [4:0] trunc_ln367_7_fu_597_p1;
wire   [4:0] add_ln367_6_fu_601_p2;
wire   [31:0] or_ln366_10_fu_614_p2;
wire   [0:0] tmp_34_fu_618_p3;
wire   [31:0] or_ln366_11_fu_632_p2;
wire   [0:0] tmp_35_fu_636_p3;
wire   [10:0] tmp_15_fu_532_p3;
wire   [10:0] add_ln358_2_fu_650_p2;
wire   [10:0] tmp_19_fu_606_p3;
wire   [10:0] add_ln367_8_fu_660_p2;
wire   [10:0] tmp_18_fu_589_p3;
wire   [10:0] add_ln367_9_fu_670_p2;
wire   [0:0] select_ln351_17_fu_626_p3;
wire   [0:0] select_ln351_18_fu_644_p3;
wire   [31:0] or_ln366_8_fu_717_p2;
wire   [0:0] tmp_32_fu_721_p3;
wire   [31:0] or_ln366_9_fu_735_p2;
wire   [0:0] tmp_33_fu_739_p3;
wire   [0:0] select_ln351_14_fu_729_p3;
wire   [0:0] select_ln351_16_fu_747_p3;
wire   [31:0] bitcast_ln174_261_fu_780_p1;
wire   [31:0] bitcast_ln174_260_fu_777_p1;
wire   [31:0] bitcast_ln174_259_fu_773_p1;
wire   [31:0] bitcast_ln174_fu_769_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_214;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

accel_create_window_stream_maxp2d_28u_28u_32u_2u_2u_s_line_buffer_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 1792 ),
    .AddressWidth( 11 ))
line_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_address0),
    .ce0(line_buffer_ce0),
    .we0(line_buffer_we0),
    .d0(tmp_fu_680_p1),
    .address1(line_buffer_address1),
    .ce1(line_buffer_ce1),
    .q1(line_buffer_q1),
    .address2(line_buffer_address2),
    .ce2(line_buffer_ce2),
    .q2(line_buffer_q2),
    .address3(line_buffer_address3),
    .ce3(line_buffer_ce3),
    .q3(line_buffer_q3)
);

accel_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_214)) begin
        if ((icmp_ln351_fu_280_p2 == 1'd0)) begin
            channel_fu_72 <= add_ln353_fu_500_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            channel_fu_72 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_214)) begin
        if ((icmp_ln351_fu_280_p2 == 1'd0)) begin
            col_ptr_fu_96 <= select_ln351_10_fu_361_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            col_ptr_fu_96 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_214)) begin
        if ((icmp_ln351_fu_280_p2 == 1'd0)) begin
            indvar_flatten_fu_100 <= add_ln351_fu_286_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_100 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_214)) begin
        if ((icmp_ln351_fu_280_p2 == 1'd0)) begin
            row_ptr_fu_92 <= select_ln351_11_fu_399_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            row_ptr_fu_92 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln351_fu_280_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln358_reg_909 <= add_ln358_fu_415_p2;
        add_ln364_2_reg_923 <= add_ln364_2_fu_445_p2;
        col_ptr_14_reg_893 <= col_ptr_14_fu_335_p3;
        icmp_ln353_reg_900 <= icmp_ln353_fu_343_p2;
        row_ptr_10_reg_887 <= row_ptr_10_fu_327_p3;
        select_ln351_12_reg_914 <= select_ln351_12_fu_433_p3;
        trunc_ln367_6_reg_918 <= trunc_ln367_6_fu_441_p1;
        trunc_ln367_8_reg_929 <= trunc_ln367_8_fu_459_p1;
        zext_ln358_5_reg_934[6 : 0] <= zext_ln358_5_fu_485_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln364_2_reg_923_pp0_iter1_reg <= add_ln364_2_reg_923;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln353_reg_900_pp0_iter1_reg <= icmp_ln353_reg_900;
        pos_y_0_mid1_reg_946 <= pos_y_0_mid1_fu_539_p2;
        pos_y_0_reg_858 <= pos_y_0_fu_212_p2;
        row_ptr_10_reg_887_pp0_iter1_reg <= row_ptr_10_reg_887;
        select_ln351_12_reg_914_pp0_iter1_reg <= select_ln351_12_reg_914;
        select_ln366_6_reg_962 <= select_ln366_6_fu_685_p3;
        select_ln366_reg_967 <= select_ln366_fu_693_p3;
        tmp_28_reg_863 <= or_ln366_fu_224_p2[32'd31];
        tmp_28_reg_863_pp0_iter1_reg <= tmp_28_reg_863;
        tmp_29_reg_868 <= or_ln366_4_fu_238_p2[32'd31];
        tmp_29_reg_868_pp0_iter1_reg <= tmp_29_reg_868;
        tmp_30_reg_873 <= or_ln366_5_fu_252_p2[32'd31];
        tmp_31_reg_878 <= or_ln366_6_fu_266_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_window_elements_load2_fu_76 <= select_ln366_4_fu_753_p3;
        temp_window_elements_load_206_fu_80 <= select_ln366_5_fu_761_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_window_elements_load_2110_fu_84 <= select_ln366_6_fu_685_p3;
        temp_window_elements_load_2214_fu_88 <= select_ln366_fu_693_p3;
    end
end

always @ (*) begin
    if (((icmp_ln351_fu_280_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_channel_load = 7'd0;
    end else begin
        ap_sig_allocacmp_channel_load = channel_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_col_ptr_8 = 32'd0;
    end else begin
        ap_sig_allocacmp_col_ptr_8 = col_ptr_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_row_ptr_8 = 32'd0;
    end else begin
        ap_sig_allocacmp_row_ptr_8 = row_ptr_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_64_feature_map_stream125_blk_n = conv2d_64_feature_map_stream125_empty_n;
    end else begin
        conv2d_64_feature_map_stream125_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_64_feature_map_stream125_read = 1'b1;
    end else begin
        conv2d_64_feature_map_stream125_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_ce0 = 1'b1;
    end else begin
        line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_ce1 = 1'b1;
    end else begin
        line_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_ce2 = 1'b1;
    end else begin
        line_buffer_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_ce3 = 1'b1;
    end else begin
        line_buffer_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_we0 = 1'b1;
    end else begin
        line_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln351_12_reg_914_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        maxp2d_64_window_stream_blk_n = maxp2d_64_window_stream_full_n;
    end else begin
        maxp2d_64_window_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln351_12_reg_914_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        maxp2d_64_window_stream_write = 1'b1;
    end else begin
        maxp2d_64_window_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln351_fu_286_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln353_fu_500_p2 = (select_ln351_fu_349_p3 + 7'd1);

assign add_ln358_2_fu_650_p2 = (tmp_15_fu_532_p3 + zext_ln358_5_reg_934);

assign add_ln358_fu_415_p2 = (trunc_ln358_fu_407_p1 + trunc_ln358_2_fu_411_p1);

assign add_ln364_2_fu_445_p2 = ($signed(row_ptr_10_fu_327_p3) + $signed(32'd4294967295));

assign add_ln364_fu_218_p2 = ($signed(ap_sig_allocacmp_row_ptr_8) + $signed(32'd4294967295));

assign add_ln367_10_fu_489_p2 = (tmp_20_fu_477_p3 + zext_ln358_5_fu_485_p1);

assign add_ln367_6_fu_601_p2 = (trunc_ln367_7_fu_597_p1 + trunc_ln367_8_reg_929);

assign add_ln367_7_fu_471_p2 = (trunc_ln367_9_fu_463_p1 + trunc_ln367_10_fu_467_p1);

assign add_ln367_8_fu_660_p2 = (tmp_19_fu_606_p3 + zext_ln358_5_reg_934);

assign add_ln367_9_fu_670_p2 = (tmp_18_fu_589_p3 + zext_ln358_5_reg_934);

assign add_ln367_fu_584_p2 = (trunc_ln367_fu_580_p1 + trunc_ln367_6_reg_918);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((select_ln351_12_reg_914_pp0_iter1_reg == 1'd1) & (maxp2d_64_window_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((conv2d_64_feature_map_stream125_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((select_ln351_12_reg_914_pp0_iter1_reg == 1'd1) & (maxp2d_64_window_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((conv2d_64_feature_map_stream125_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((select_ln351_12_reg_914_pp0_iter1_reg == 1'd1) & (maxp2d_64_window_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((conv2d_64_feature_map_stream125_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (conv2d_64_feature_map_stream125_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((select_ln351_12_reg_914_pp0_iter1_reg == 1'd1) & (maxp2d_64_window_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_214 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign bitcast_ln174_259_fu_773_p1 = select_ln366_5_fu_761_p3;

assign bitcast_ln174_260_fu_777_p1 = select_ln366_6_reg_962;

assign bitcast_ln174_261_fu_780_p1 = select_ln366_reg_967;

assign bitcast_ln174_fu_769_p1 = select_ln366_4_fu_753_p3;

assign cmp34_not_fu_200_p2 = ((ap_sig_allocacmp_col_ptr_8 == 32'd1) ? 1'b1 : 1'b0);

assign cmp34_not_mid1_fu_421_p2 = ((col_ptr_14_fu_335_p3 == 32'd1) ? 1'b1 : 1'b0);

assign col_ptr_12_fu_307_p2 = (ap_sig_allocacmp_col_ptr_8 + 32'd1);

assign col_ptr_13_fu_319_p3 = ((icmp_ln377_fu_313_p2[0:0] == 1'b1) ? 32'd0 : col_ptr_12_fu_307_p2);

assign col_ptr_14_fu_335_p3 = ((icmp_ln373_fu_301_p2[0:0] == 1'b1) ? col_ptr_13_fu_319_p3 : ap_sig_allocacmp_col_ptr_8);

assign demorgan_fu_206_p2 = (trunc_ln351_fu_196_p1 & cmp34_not_fu_200_p2);

assign demorgan_mid1_fu_427_p2 = (trunc_ln351_2_fu_357_p1 & cmp34_not_mid1_fu_421_p2);

assign icmp_ln351_fu_280_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln353_fu_343_p2 = ((ap_sig_allocacmp_channel_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln373_fu_301_p2 = ((row_ptr_9_fu_295_p2 == 32'd14) ? 1'b1 : 1'b0);

assign icmp_ln377_fu_313_p2 = ((col_ptr_12_fu_307_p2 == 32'd2) ? 1'b1 : 1'b0);

assign line_buffer_address0 = zext_ln358_6_fu_655_p1;

assign line_buffer_address1 = zext_ln367_7_fu_675_p1;

assign line_buffer_address2 = zext_ln367_6_fu_665_p1;

assign line_buffer_address3 = zext_ln367_8_fu_495_p1;

assign maxp2d_64_window_stream_din = {{{{bitcast_ln174_261_fu_780_p1}, {bitcast_ln174_260_fu_777_p1}}, {bitcast_ln174_259_fu_773_p1}}, {bitcast_ln174_fu_769_p1}};

assign or_ln366_10_fu_614_p2 = (col_ptr_14_reg_893 | add_ln364_2_reg_923);

assign or_ln366_11_fu_632_p2 = (row_ptr_10_reg_887 | col_ptr_14_reg_893);

assign or_ln366_4_fu_238_p2 = (pos_y_0_fu_212_p2 | ap_sig_allocacmp_row_ptr_8);

assign or_ln366_5_fu_252_p2 = (ap_sig_allocacmp_col_ptr_8 | add_ln364_fu_218_p2);

assign or_ln366_6_fu_266_p2 = (ap_sig_allocacmp_row_ptr_8 | ap_sig_allocacmp_col_ptr_8);

assign or_ln366_8_fu_717_p2 = (pos_y_0_mid1_reg_946 | add_ln364_2_reg_923_pp0_iter1_reg);

assign or_ln366_9_fu_735_p2 = (row_ptr_10_reg_887_pp0_iter1_reg | pos_y_0_mid1_reg_946);

assign or_ln366_fu_224_p2 = (pos_y_0_fu_212_p2 | add_ln364_fu_218_p2);

assign pos_y_0_fu_212_p2 = ($signed(ap_sig_allocacmp_col_ptr_8) + $signed(32'd4294967295));

assign pos_y_0_mid1_fu_539_p2 = ($signed(col_ptr_14_reg_893) + $signed(32'd4294967295));

assign row_ptr_10_fu_327_p3 = ((icmp_ln373_fu_301_p2[0:0] == 1'b1) ? 32'd0 : row_ptr_9_fu_295_p2);

assign row_ptr_9_fu_295_p2 = (ap_sig_allocacmp_row_ptr_8 + 32'd1);

assign select_ln351_10_fu_361_p3 = ((icmp_ln353_fu_343_p2[0:0] == 1'b1) ? col_ptr_14_fu_335_p3 : ap_sig_allocacmp_col_ptr_8);

assign select_ln351_11_fu_399_p3 = ((icmp_ln353_fu_343_p2[0:0] == 1'b1) ? row_ptr_10_fu_327_p3 : ap_sig_allocacmp_row_ptr_8);

assign select_ln351_12_fu_433_p3 = ((icmp_ln353_fu_343_p2[0:0] == 1'b1) ? demorgan_mid1_fu_427_p2 : demorgan_fu_206_p2);

assign select_ln351_13_fu_544_p3 = ((icmp_ln353_reg_900[0:0] == 1'b1) ? pos_y_0_mid1_fu_539_p2 : pos_y_0_reg_858);

assign select_ln351_14_fu_729_p3 = ((icmp_ln353_reg_900_pp0_iter1_reg[0:0] == 1'b1) ? tmp_32_fu_721_p3 : tmp_28_reg_863_pp0_iter1_reg);

assign select_ln351_15_fu_451_p3 = ((icmp_ln353_fu_343_p2[0:0] == 1'b1) ? add_ln364_2_fu_445_p2 : add_ln364_fu_218_p2);

assign select_ln351_16_fu_747_p3 = ((icmp_ln353_reg_900_pp0_iter1_reg[0:0] == 1'b1) ? tmp_33_fu_739_p3 : tmp_29_reg_868_pp0_iter1_reg);

assign select_ln351_17_fu_626_p3 = ((icmp_ln353_reg_900[0:0] == 1'b1) ? tmp_34_fu_618_p3 : tmp_30_reg_873);

assign select_ln351_18_fu_644_p3 = ((icmp_ln353_reg_900[0:0] == 1'b1) ? tmp_35_fu_636_p3 : tmp_31_reg_878);

assign select_ln351_fu_349_p3 = ((icmp_ln353_fu_343_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_channel_load);

assign select_ln366_4_fu_753_p3 = ((select_ln351_14_fu_729_p3[0:0] == 1'b1) ? temp_window_elements_load2_fu_76 : line_buffer_q2);

assign select_ln366_5_fu_761_p3 = ((select_ln351_16_fu_747_p3[0:0] == 1'b1) ? temp_window_elements_load_206_fu_80 : line_buffer_q1);

assign select_ln366_6_fu_685_p3 = ((select_ln351_17_fu_626_p3[0:0] == 1'b1) ? temp_window_elements_load_2110_fu_84 : line_buffer_q3);

assign select_ln366_fu_693_p3 = ((select_ln351_18_fu_644_p3[0:0] == 1'b1) ? temp_window_elements_load_2214_fu_88 : tmp_fu_680_p1);

assign start_out = real_start;

assign sub_ln358_fu_393_p2 = (zext_ln358_fu_377_p1 - zext_ln358_4_fu_389_p1);

assign sub_ln367_fu_574_p2 = (zext_ln367_fu_558_p1 - zext_ln367_5_fu_570_p1);

assign tmp_13_fu_369_p3 = {{select_ln351_10_fu_361_p3}, {4'd0}};

assign tmp_14_fu_381_p3 = {{select_ln351_10_fu_361_p3}, {1'd0}};

assign tmp_15_fu_532_p3 = {{add_ln358_reg_909}, {6'd0}};

assign tmp_16_fu_550_p3 = {{select_ln351_13_fu_544_p3}, {4'd0}};

assign tmp_17_fu_562_p3 = {{select_ln351_13_fu_544_p3}, {1'd0}};

assign tmp_18_fu_589_p3 = {{add_ln367_fu_584_p2}, {6'd0}};

assign tmp_19_fu_606_p3 = {{add_ln367_6_fu_601_p2}, {6'd0}};

assign tmp_20_fu_477_p3 = {{add_ln367_7_fu_471_p2}, {6'd0}};

assign tmp_32_fu_721_p3 = or_ln366_8_fu_717_p2[32'd31];

assign tmp_33_fu_739_p3 = or_ln366_9_fu_735_p2[32'd31];

assign tmp_34_fu_618_p3 = or_ln366_10_fu_614_p2[32'd31];

assign tmp_35_fu_636_p3 = or_ln366_11_fu_632_p2[32'd31];

assign tmp_fu_680_p1 = conv2d_64_feature_map_stream125_dout;

assign trunc_ln351_2_fu_357_p1 = row_ptr_10_fu_327_p3[0:0];

assign trunc_ln351_fu_196_p1 = ap_sig_allocacmp_row_ptr_8[0:0];

assign trunc_ln358_2_fu_411_p1 = select_ln351_11_fu_399_p3[4:0];

assign trunc_ln358_fu_407_p1 = sub_ln358_fu_393_p2[4:0];

assign trunc_ln367_10_fu_467_p1 = select_ln351_15_fu_451_p3[4:0];

assign trunc_ln367_6_fu_441_p1 = select_ln351_11_fu_399_p3[4:0];

assign trunc_ln367_7_fu_597_p1 = sub_ln367_fu_574_p2[4:0];

assign trunc_ln367_8_fu_459_p1 = select_ln351_15_fu_451_p3[4:0];

assign trunc_ln367_9_fu_463_p1 = sub_ln358_fu_393_p2[4:0];

assign trunc_ln367_fu_580_p1 = sub_ln367_fu_574_p2[4:0];

assign zext_ln358_4_fu_389_p1 = tmp_14_fu_381_p3;

assign zext_ln358_5_fu_485_p1 = select_ln351_fu_349_p3;

assign zext_ln358_6_fu_655_p1 = add_ln358_2_fu_650_p2;

assign zext_ln358_fu_377_p1 = tmp_13_fu_369_p3;

assign zext_ln367_5_fu_570_p1 = tmp_17_fu_562_p3;

assign zext_ln367_6_fu_665_p1 = add_ln367_8_fu_660_p2;

assign zext_ln367_7_fu_675_p1 = add_ln367_9_fu_670_p2;

assign zext_ln367_8_fu_495_p1 = add_ln367_10_fu_489_p2;

assign zext_ln367_fu_558_p1 = tmp_16_fu_550_p3;

always @ (posedge ap_clk) begin
    zext_ln358_5_reg_934[10:7] <= 4'b0000;
end

endmodule //accel_create_window_stream_maxp2d_14u_14u_64u_2u_2u_s
