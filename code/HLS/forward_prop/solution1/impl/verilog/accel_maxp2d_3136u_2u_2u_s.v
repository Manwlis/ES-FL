// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accel_maxp2d_3136u_2u_2u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        maxp2d_64_window_stream_dout,
        maxp2d_64_window_stream_num_data_valid,
        maxp2d_64_window_stream_fifo_cap,
        maxp2d_64_window_stream_empty_n,
        maxp2d_64_window_stream_read,
        maxp2d_64_feature_map_stream127_din,
        maxp2d_64_feature_map_stream127_num_data_valid,
        maxp2d_64_feature_map_stream127_fifo_cap,
        maxp2d_64_feature_map_stream127_full_n,
        maxp2d_64_feature_map_stream127_write,
        maxp2d_64_activations_window_stream_din,
        maxp2d_64_activations_window_stream_num_data_valid,
        maxp2d_64_activations_window_stream_fifo_cap,
        maxp2d_64_activations_window_stream_full_n,
        maxp2d_64_activations_window_stream_write,
        maxp2d_64_f_map_out133_din,
        maxp2d_64_f_map_out133_num_data_valid,
        maxp2d_64_f_map_out133_fifo_cap,
        maxp2d_64_f_map_out133_full_n,
        maxp2d_64_f_map_out133_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] maxp2d_64_window_stream_dout;
input  [2:0] maxp2d_64_window_stream_num_data_valid;
input  [2:0] maxp2d_64_window_stream_fifo_cap;
input   maxp2d_64_window_stream_empty_n;
output   maxp2d_64_window_stream_read;
output  [31:0] maxp2d_64_feature_map_stream127_din;
input  [2:0] maxp2d_64_feature_map_stream127_num_data_valid;
input  [2:0] maxp2d_64_feature_map_stream127_fifo_cap;
input   maxp2d_64_feature_map_stream127_full_n;
output   maxp2d_64_feature_map_stream127_write;
output  [3:0] maxp2d_64_activations_window_stream_din;
input  [12:0] maxp2d_64_activations_window_stream_num_data_valid;
input  [12:0] maxp2d_64_activations_window_stream_fifo_cap;
input   maxp2d_64_activations_window_stream_full_n;
output   maxp2d_64_activations_window_stream_write;
output  [31:0] maxp2d_64_f_map_out133_din;
input  [12:0] maxp2d_64_f_map_out133_num_data_valid;
input  [12:0] maxp2d_64_f_map_out133_fifo_cap;
input   maxp2d_64_f_map_out133_full_n;
output   maxp2d_64_f_map_out133_write;

reg ap_idle;
reg maxp2d_64_window_stream_read;
reg maxp2d_64_feature_map_stream127_write;
reg maxp2d_64_activations_window_stream_write;
reg maxp2d_64_f_map_out133_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln390_fu_132_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    maxp2d_64_window_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    maxp2d_64_feature_map_stream127_blk_n;
reg    maxp2d_64_activations_window_stream_blk_n;
reg    maxp2d_64_f_map_out133_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] trunc_ln145_s_reg_261;
reg   [31:0] trunc_ln145_2_reg_266;
reg   [31:0] trunc_ln145_2_reg_266_pp0_iter2_reg;
reg   [31:0] trunc_ln145_3_reg_271;
reg   [31:0] trunc_ln145_3_reg_271_pp0_iter2_reg;
reg   [31:0] trunc_ln145_3_reg_271_pp0_iter3_reg;
wire   [31:0] temp_window_elements_fu_183_p1;
reg   [31:0] temp_window_elements_reg_276;
reg   [31:0] temp_window_elements_reg_276_pp0_iter2_reg;
reg   [31:0] temp_window_elements_reg_276_pp0_iter3_reg;
reg   [31:0] temp_window_elements_reg_276_pp0_iter4_reg;
wire   [31:0] temp_window_elements_4_fu_188_p1;
reg   [31:0] temp_window_elements_4_reg_283;
reg   [31:0] temp_window_elements_4_reg_283_pp0_iter3_reg;
reg   [31:0] temp_window_elements_4_reg_283_pp0_iter4_reg;
wire   [31:0] max_8_fu_192_p3;
reg   [31:0] max_8_reg_290;
wire   [31:0] max_11_fu_200_p1;
reg   [31:0] max_11_reg_296;
reg   [31:0] max_11_reg_296_pp0_iter4_reg;
wire   [31:0] max_10_fu_204_p3;
reg   [31:0] max_10_reg_303;
wire   [31:0] max_13_fu_211_p1;
reg   [31:0] max_13_reg_309;
wire   [31:0] max_12_fu_215_p3;
reg   [31:0] max_12_reg_316;
wire   [31:0] max_14_fu_222_p3;
reg   [31:0] max_14_reg_322;
reg   [11:0] w_fu_60;
wire   [11:0] w_4_fu_138_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_w_3;
wire   [31:0] bitcast_ln174_fu_232_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_91_p0;
wire   [31:0] grp_fu_96_p0;
wire   [31:0] grp_fu_96_p1;
wire   [31:0] grp_fu_100_p0;
wire   [31:0] grp_fu_100_p1;
wire   [31:0] grp_fu_104_p0;
wire   [31:0] grp_fu_104_p1;
wire   [31:0] trunc_ln145_fu_149_p1;
wire   [0:0] grp_fu_91_p2;
wire   [0:0] grp_fu_96_p2;
wire   [0:0] grp_fu_100_p2;
wire   [0:0] grp_fu_104_p2;
wire   [0:0] grp_fu_120_p2;
wire   [0:0] grp_fu_116_p2;
wire   [0:0] grp_fu_112_p2;
wire   [0:0] grp_fu_108_p2;
reg    grp_fu_91_ce;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_96_ce;
reg    grp_fu_100_ce;
reg    grp_fu_104_ce;
reg    grp_fu_108_ce;
reg    grp_fu_112_ce;
reg    grp_fu_116_ce;
reg    grp_fu_120_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_176;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

accel_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U19763(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_91_p0),
    .din1(32'd4286578688),
    .ce(grp_fu_91_ce),
    .opcode(5'd2),
    .dout(grp_fu_91_p2)
);

accel_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U19764(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_96_p0),
    .din1(grp_fu_96_p1),
    .ce(grp_fu_96_ce),
    .opcode(5'd2),
    .dout(grp_fu_96_p2)
);

accel_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U19765(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_100_p0),
    .din1(grp_fu_100_p1),
    .ce(grp_fu_100_ce),
    .opcode(5'd2),
    .dout(grp_fu_100_p2)
);

accel_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U19766(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_104_p0),
    .din1(grp_fu_104_p1),
    .ce(grp_fu_104_ce),
    .opcode(5'd2),
    .dout(grp_fu_104_p2)
);

accel_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U19767(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_window_elements_reg_276_pp0_iter4_reg),
    .din1(max_14_fu_222_p3),
    .ce(grp_fu_108_ce),
    .opcode(5'd1),
    .dout(grp_fu_108_p2)
);

accel_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U19768(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_window_elements_4_reg_283_pp0_iter4_reg),
    .din1(max_14_fu_222_p3),
    .ce(grp_fu_112_ce),
    .opcode(5'd1),
    .dout(grp_fu_112_p2)
);

accel_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U19769(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_11_reg_296_pp0_iter4_reg),
    .din1(max_14_fu_222_p3),
    .ce(grp_fu_116_ce),
    .opcode(5'd1),
    .dout(grp_fu_116_p2)
);

accel_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U19770(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(max_13_reg_309),
    .din1(max_14_fu_222_p3),
    .ce(grp_fu_120_ce),
    .opcode(5'd1),
    .dout(grp_fu_120_p2)
);

accel_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_176)) begin
        if ((icmp_ln390_fu_132_p2 == 1'd0)) begin
            w_fu_60 <= w_4_fu_138_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            w_fu_60 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        temp_window_elements_reg_276 <= temp_window_elements_fu_183_p1;
        trunc_ln145_2_reg_266 <= {{maxp2d_64_window_stream_dout[95:64]}};
        trunc_ln145_3_reg_271 <= {{maxp2d_64_window_stream_dout[127:96]}};
        trunc_ln145_s_reg_261 <= {{maxp2d_64_window_stream_dout[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        max_10_reg_303 <= max_10_fu_204_p3;
        max_11_reg_296 <= max_11_fu_200_p1;
        max_11_reg_296_pp0_iter4_reg <= max_11_reg_296;
        max_12_reg_316 <= max_12_fu_215_p3;
        max_13_reg_309 <= max_13_fu_211_p1;
        max_14_reg_322 <= max_14_fu_222_p3;
        max_8_reg_290 <= max_8_fu_192_p3;
        temp_window_elements_4_reg_283 <= temp_window_elements_4_fu_188_p1;
        temp_window_elements_4_reg_283_pp0_iter3_reg <= temp_window_elements_4_reg_283;
        temp_window_elements_4_reg_283_pp0_iter4_reg <= temp_window_elements_4_reg_283_pp0_iter3_reg;
        temp_window_elements_reg_276_pp0_iter2_reg <= temp_window_elements_reg_276;
        temp_window_elements_reg_276_pp0_iter3_reg <= temp_window_elements_reg_276_pp0_iter2_reg;
        temp_window_elements_reg_276_pp0_iter4_reg <= temp_window_elements_reg_276_pp0_iter3_reg;
        trunc_ln145_2_reg_266_pp0_iter2_reg <= trunc_ln145_2_reg_266;
        trunc_ln145_3_reg_271_pp0_iter2_reg <= trunc_ln145_3_reg_271;
        trunc_ln145_3_reg_271_pp0_iter3_reg <= trunc_ln145_3_reg_271_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((icmp_ln390_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_w_3 = 12'd0;
    end else begin
        ap_sig_allocacmp_w_3 = w_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_100_ce = 1'b1;
    end else begin
        grp_fu_100_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_104_ce = 1'b1;
    end else begin
        grp_fu_104_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_108_ce = 1'b1;
    end else begin
        grp_fu_108_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_112_ce = 1'b1;
    end else begin
        grp_fu_112_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_116_ce = 1'b1;
    end else begin
        grp_fu_116_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_120_ce = 1'b1;
    end else begin
        grp_fu_120_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_91_ce = 1'b1;
    end else begin
        grp_fu_91_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_96_ce = 1'b1;
    end else begin
        grp_fu_96_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        maxp2d_64_activations_window_stream_blk_n = maxp2d_64_activations_window_stream_full_n;
    end else begin
        maxp2d_64_activations_window_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        maxp2d_64_activations_window_stream_write = 1'b1;
    end else begin
        maxp2d_64_activations_window_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        maxp2d_64_f_map_out133_blk_n = maxp2d_64_f_map_out133_full_n;
    end else begin
        maxp2d_64_f_map_out133_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        maxp2d_64_f_map_out133_write = 1'b1;
    end else begin
        maxp2d_64_f_map_out133_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        maxp2d_64_feature_map_stream127_blk_n = maxp2d_64_feature_map_stream127_full_n;
    end else begin
        maxp2d_64_feature_map_stream127_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        maxp2d_64_feature_map_stream127_write = 1'b1;
    end else begin
        maxp2d_64_feature_map_stream127_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        maxp2d_64_window_stream_blk_n = maxp2d_64_window_stream_empty_n;
    end else begin
        maxp2d_64_window_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        maxp2d_64_window_stream_read = 1'b1;
    end else begin
        maxp2d_64_window_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((maxp2d_64_f_map_out133_full_n == 1'b0) | (maxp2d_64_activations_window_stream_full_n == 1'b0) | (maxp2d_64_feature_map_stream127_full_n == 1'b0))) | ((maxp2d_64_window_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((maxp2d_64_f_map_out133_full_n == 1'b0) | (maxp2d_64_activations_window_stream_full_n == 1'b0) | (maxp2d_64_feature_map_stream127_full_n == 1'b0))) | ((maxp2d_64_window_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((maxp2d_64_f_map_out133_full_n == 1'b0) | (maxp2d_64_activations_window_stream_full_n == 1'b0) | (maxp2d_64_feature_map_stream127_full_n == 1'b0))) | ((maxp2d_64_window_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((maxp2d_64_f_map_out133_full_n == 1'b0) | (maxp2d_64_activations_window_stream_full_n == 1'b0) | (maxp2d_64_feature_map_stream127_full_n == 1'b0))) | ((maxp2d_64_window_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (maxp2d_64_window_stream_empty_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = ((maxp2d_64_f_map_out133_full_n == 1'b0) | (maxp2d_64_activations_window_stream_full_n == 1'b0) | (maxp2d_64_feature_map_stream127_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_176 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln174_fu_232_p1 = max_14_reg_322;

assign grp_fu_100_p0 = trunc_ln145_2_reg_266_pp0_iter2_reg;

assign grp_fu_100_p1 = ((grp_fu_96_p2[0:0] == 1'b1) ? temp_window_elements_4_reg_283 : max_8_reg_290);

assign grp_fu_104_p0 = trunc_ln145_3_reg_271_pp0_iter3_reg;

assign grp_fu_104_p1 = ((grp_fu_100_p2[0:0] == 1'b1) ? max_11_reg_296 : max_10_reg_303);

assign grp_fu_91_p0 = trunc_ln145_fu_149_p1;

assign grp_fu_96_p0 = trunc_ln145_s_reg_261;

assign grp_fu_96_p1 = ((grp_fu_91_p2[0:0] == 1'b1) ? temp_window_elements_reg_276 : 32'd4286578688);

assign icmp_ln390_fu_132_p2 = ((ap_sig_allocacmp_w_3 == 12'd3136) ? 1'b1 : 1'b0);

assign max_10_fu_204_p3 = ((grp_fu_96_p2[0:0] == 1'b1) ? temp_window_elements_4_reg_283 : max_8_reg_290);

assign max_11_fu_200_p1 = trunc_ln145_2_reg_266_pp0_iter2_reg;

assign max_12_fu_215_p3 = ((grp_fu_100_p2[0:0] == 1'b1) ? max_11_reg_296 : max_10_reg_303);

assign max_13_fu_211_p1 = trunc_ln145_3_reg_271_pp0_iter3_reg;

assign max_14_fu_222_p3 = ((grp_fu_104_p2[0:0] == 1'b1) ? max_13_reg_309 : max_12_reg_316);

assign max_8_fu_192_p3 = ((grp_fu_91_p2[0:0] == 1'b1) ? temp_window_elements_reg_276 : 32'd4286578688);

assign maxp2d_64_activations_window_stream_din = {{{{grp_fu_120_p2}, {grp_fu_116_p2}}, {grp_fu_112_p2}}, {grp_fu_108_p2}};

assign maxp2d_64_f_map_out133_din = bitcast_ln174_fu_232_p1;

assign maxp2d_64_feature_map_stream127_din = bitcast_ln174_fu_232_p1;

assign temp_window_elements_4_fu_188_p1 = trunc_ln145_s_reg_261;

assign temp_window_elements_fu_183_p1 = trunc_ln145_fu_149_p1;

assign trunc_ln145_fu_149_p1 = maxp2d_64_window_stream_dout[31:0];

assign w_4_fu_138_p2 = (ap_sig_allocacmp_w_3 + 12'd1);

endmodule //accel_maxp2d_3136u_2u_2u_s
