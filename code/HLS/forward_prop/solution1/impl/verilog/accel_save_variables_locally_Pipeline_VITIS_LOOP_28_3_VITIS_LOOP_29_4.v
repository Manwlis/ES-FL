// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accel_save_variables_locally_Pipeline_VITIS_LOOP_28_3_VITIS_LOOP_29_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln28,
        conv2d_64_weights_0_address1,
        conv2d_64_weights_0_ce1,
        conv2d_64_weights_0_we1,
        conv2d_64_weights_0_d1,
        conv2d_64_weights_1_address1,
        conv2d_64_weights_1_ce1,
        conv2d_64_weights_1_we1,
        conv2d_64_weights_1_d1,
        conv2d_64_weights_2_address1,
        conv2d_64_weights_2_ce1,
        conv2d_64_weights_2_we1,
        conv2d_64_weights_2_d1,
        conv2d_64_weights_3_address1,
        conv2d_64_weights_3_ce1,
        conv2d_64_weights_3_we1,
        conv2d_64_weights_3_d1,
        conv2d_64_weights_4_address1,
        conv2d_64_weights_4_ce1,
        conv2d_64_weights_4_we1,
        conv2d_64_weights_4_d1,
        conv2d_64_weights_5_address1,
        conv2d_64_weights_5_ce1,
        conv2d_64_weights_5_we1,
        conv2d_64_weights_5_d1,
        conv2d_64_weights_6_address1,
        conv2d_64_weights_6_ce1,
        conv2d_64_weights_6_we1,
        conv2d_64_weights_6_d1,
        conv2d_64_weights_7_address1,
        conv2d_64_weights_7_ce1,
        conv2d_64_weights_7_we1,
        conv2d_64_weights_7_d1,
        conv2d_64_weights_8_address1,
        conv2d_64_weights_8_ce1,
        conv2d_64_weights_8_we1,
        conv2d_64_weights_8_d1,
        conv2d_64_weights_9_address1,
        conv2d_64_weights_9_ce1,
        conv2d_64_weights_9_we1,
        conv2d_64_weights_9_d1,
        conv2d_64_weights_10_address1,
        conv2d_64_weights_10_ce1,
        conv2d_64_weights_10_we1,
        conv2d_64_weights_10_d1,
        conv2d_64_weights_11_address1,
        conv2d_64_weights_11_ce1,
        conv2d_64_weights_11_we1,
        conv2d_64_weights_11_d1,
        conv2d_64_weights_12_address1,
        conv2d_64_weights_12_ce1,
        conv2d_64_weights_12_we1,
        conv2d_64_weights_12_d1,
        conv2d_64_weights_13_address1,
        conv2d_64_weights_13_ce1,
        conv2d_64_weights_13_we1,
        conv2d_64_weights_13_d1,
        conv2d_64_weights_14_address1,
        conv2d_64_weights_14_ce1,
        conv2d_64_weights_14_we1,
        conv2d_64_weights_14_d1,
        conv2d_64_weights_15_address1,
        conv2d_64_weights_15_ce1,
        conv2d_64_weights_15_we1,
        conv2d_64_weights_15_d1,
        conv2d_64_weights_16_address1,
        conv2d_64_weights_16_ce1,
        conv2d_64_weights_16_we1,
        conv2d_64_weights_16_d1,
        conv2d_64_weights_17_address1,
        conv2d_64_weights_17_ce1,
        conv2d_64_weights_17_we1,
        conv2d_64_weights_17_d1,
        conv2d_64_weights_18_address1,
        conv2d_64_weights_18_ce1,
        conv2d_64_weights_18_we1,
        conv2d_64_weights_18_d1,
        conv2d_64_weights_19_address1,
        conv2d_64_weights_19_ce1,
        conv2d_64_weights_19_we1,
        conv2d_64_weights_19_d1,
        conv2d_64_weights_20_address1,
        conv2d_64_weights_20_ce1,
        conv2d_64_weights_20_we1,
        conv2d_64_weights_20_d1,
        conv2d_64_weights_21_address1,
        conv2d_64_weights_21_ce1,
        conv2d_64_weights_21_we1,
        conv2d_64_weights_21_d1,
        conv2d_64_weights_22_address1,
        conv2d_64_weights_22_ce1,
        conv2d_64_weights_22_we1,
        conv2d_64_weights_22_d1,
        conv2d_64_weights_23_address1,
        conv2d_64_weights_23_ce1,
        conv2d_64_weights_23_we1,
        conv2d_64_weights_23_d1,
        conv2d_64_weights_24_address1,
        conv2d_64_weights_24_ce1,
        conv2d_64_weights_24_we1,
        conv2d_64_weights_24_d1,
        conv2d_64_weights_25_address1,
        conv2d_64_weights_25_ce1,
        conv2d_64_weights_25_we1,
        conv2d_64_weights_25_d1,
        conv2d_64_weights_26_address1,
        conv2d_64_weights_26_ce1,
        conv2d_64_weights_26_we1,
        conv2d_64_weights_26_d1,
        conv2d_64_weights_27_address1,
        conv2d_64_weights_27_ce1,
        conv2d_64_weights_27_we1,
        conv2d_64_weights_27_d1,
        conv2d_64_weights_28_address1,
        conv2d_64_weights_28_ce1,
        conv2d_64_weights_28_we1,
        conv2d_64_weights_28_d1,
        conv2d_64_weights_29_address1,
        conv2d_64_weights_29_ce1,
        conv2d_64_weights_29_we1,
        conv2d_64_weights_29_d1,
        conv2d_64_weights_30_address1,
        conv2d_64_weights_30_ce1,
        conv2d_64_weights_30_we1,
        conv2d_64_weights_30_d1,
        conv2d_64_weights_31_address1,
        conv2d_64_weights_31_ce1,
        conv2d_64_weights_31_we1,
        conv2d_64_weights_31_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [57:0] sext_ln28;
output  [9:0] conv2d_64_weights_0_address1;
output   conv2d_64_weights_0_ce1;
output   conv2d_64_weights_0_we1;
output  [31:0] conv2d_64_weights_0_d1;
output  [9:0] conv2d_64_weights_1_address1;
output   conv2d_64_weights_1_ce1;
output   conv2d_64_weights_1_we1;
output  [31:0] conv2d_64_weights_1_d1;
output  [9:0] conv2d_64_weights_2_address1;
output   conv2d_64_weights_2_ce1;
output   conv2d_64_weights_2_we1;
output  [31:0] conv2d_64_weights_2_d1;
output  [9:0] conv2d_64_weights_3_address1;
output   conv2d_64_weights_3_ce1;
output   conv2d_64_weights_3_we1;
output  [31:0] conv2d_64_weights_3_d1;
output  [9:0] conv2d_64_weights_4_address1;
output   conv2d_64_weights_4_ce1;
output   conv2d_64_weights_4_we1;
output  [31:0] conv2d_64_weights_4_d1;
output  [9:0] conv2d_64_weights_5_address1;
output   conv2d_64_weights_5_ce1;
output   conv2d_64_weights_5_we1;
output  [31:0] conv2d_64_weights_5_d1;
output  [9:0] conv2d_64_weights_6_address1;
output   conv2d_64_weights_6_ce1;
output   conv2d_64_weights_6_we1;
output  [31:0] conv2d_64_weights_6_d1;
output  [9:0] conv2d_64_weights_7_address1;
output   conv2d_64_weights_7_ce1;
output   conv2d_64_weights_7_we1;
output  [31:0] conv2d_64_weights_7_d1;
output  [9:0] conv2d_64_weights_8_address1;
output   conv2d_64_weights_8_ce1;
output   conv2d_64_weights_8_we1;
output  [31:0] conv2d_64_weights_8_d1;
output  [9:0] conv2d_64_weights_9_address1;
output   conv2d_64_weights_9_ce1;
output   conv2d_64_weights_9_we1;
output  [31:0] conv2d_64_weights_9_d1;
output  [9:0] conv2d_64_weights_10_address1;
output   conv2d_64_weights_10_ce1;
output   conv2d_64_weights_10_we1;
output  [31:0] conv2d_64_weights_10_d1;
output  [9:0] conv2d_64_weights_11_address1;
output   conv2d_64_weights_11_ce1;
output   conv2d_64_weights_11_we1;
output  [31:0] conv2d_64_weights_11_d1;
output  [9:0] conv2d_64_weights_12_address1;
output   conv2d_64_weights_12_ce1;
output   conv2d_64_weights_12_we1;
output  [31:0] conv2d_64_weights_12_d1;
output  [9:0] conv2d_64_weights_13_address1;
output   conv2d_64_weights_13_ce1;
output   conv2d_64_weights_13_we1;
output  [31:0] conv2d_64_weights_13_d1;
output  [9:0] conv2d_64_weights_14_address1;
output   conv2d_64_weights_14_ce1;
output   conv2d_64_weights_14_we1;
output  [31:0] conv2d_64_weights_14_d1;
output  [9:0] conv2d_64_weights_15_address1;
output   conv2d_64_weights_15_ce1;
output   conv2d_64_weights_15_we1;
output  [31:0] conv2d_64_weights_15_d1;
output  [9:0] conv2d_64_weights_16_address1;
output   conv2d_64_weights_16_ce1;
output   conv2d_64_weights_16_we1;
output  [31:0] conv2d_64_weights_16_d1;
output  [9:0] conv2d_64_weights_17_address1;
output   conv2d_64_weights_17_ce1;
output   conv2d_64_weights_17_we1;
output  [31:0] conv2d_64_weights_17_d1;
output  [9:0] conv2d_64_weights_18_address1;
output   conv2d_64_weights_18_ce1;
output   conv2d_64_weights_18_we1;
output  [31:0] conv2d_64_weights_18_d1;
output  [9:0] conv2d_64_weights_19_address1;
output   conv2d_64_weights_19_ce1;
output   conv2d_64_weights_19_we1;
output  [31:0] conv2d_64_weights_19_d1;
output  [9:0] conv2d_64_weights_20_address1;
output   conv2d_64_weights_20_ce1;
output   conv2d_64_weights_20_we1;
output  [31:0] conv2d_64_weights_20_d1;
output  [9:0] conv2d_64_weights_21_address1;
output   conv2d_64_weights_21_ce1;
output   conv2d_64_weights_21_we1;
output  [31:0] conv2d_64_weights_21_d1;
output  [9:0] conv2d_64_weights_22_address1;
output   conv2d_64_weights_22_ce1;
output   conv2d_64_weights_22_we1;
output  [31:0] conv2d_64_weights_22_d1;
output  [9:0] conv2d_64_weights_23_address1;
output   conv2d_64_weights_23_ce1;
output   conv2d_64_weights_23_we1;
output  [31:0] conv2d_64_weights_23_d1;
output  [9:0] conv2d_64_weights_24_address1;
output   conv2d_64_weights_24_ce1;
output   conv2d_64_weights_24_we1;
output  [31:0] conv2d_64_weights_24_d1;
output  [9:0] conv2d_64_weights_25_address1;
output   conv2d_64_weights_25_ce1;
output   conv2d_64_weights_25_we1;
output  [31:0] conv2d_64_weights_25_d1;
output  [9:0] conv2d_64_weights_26_address1;
output   conv2d_64_weights_26_ce1;
output   conv2d_64_weights_26_we1;
output  [31:0] conv2d_64_weights_26_d1;
output  [9:0] conv2d_64_weights_27_address1;
output   conv2d_64_weights_27_ce1;
output   conv2d_64_weights_27_we1;
output  [31:0] conv2d_64_weights_27_d1;
output  [9:0] conv2d_64_weights_28_address1;
output   conv2d_64_weights_28_ce1;
output   conv2d_64_weights_28_we1;
output  [31:0] conv2d_64_weights_28_d1;
output  [9:0] conv2d_64_weights_29_address1;
output   conv2d_64_weights_29_ce1;
output   conv2d_64_weights_29_we1;
output  [31:0] conv2d_64_weights_29_d1;
output  [9:0] conv2d_64_weights_30_address1;
output   conv2d_64_weights_30_ce1;
output   conv2d_64_weights_30_we1;
output  [31:0] conv2d_64_weights_30_d1;
output  [9:0] conv2d_64_weights_31_address1;
output   conv2d_64_weights_31_ce1;
output   conv2d_64_weights_31_we1;
output  [31:0] conv2d_64_weights_31_d1;

reg ap_idle;
reg m_axi_gmem_RREADY;
reg conv2d_64_weights_0_ce1;
reg conv2d_64_weights_0_we1;
reg conv2d_64_weights_1_ce1;
reg conv2d_64_weights_1_we1;
reg conv2d_64_weights_2_ce1;
reg conv2d_64_weights_2_we1;
reg conv2d_64_weights_3_ce1;
reg conv2d_64_weights_3_we1;
reg conv2d_64_weights_4_ce1;
reg conv2d_64_weights_4_we1;
reg conv2d_64_weights_5_ce1;
reg conv2d_64_weights_5_we1;
reg conv2d_64_weights_6_ce1;
reg conv2d_64_weights_6_we1;
reg conv2d_64_weights_7_ce1;
reg conv2d_64_weights_7_we1;
reg conv2d_64_weights_8_ce1;
reg conv2d_64_weights_8_we1;
reg conv2d_64_weights_9_ce1;
reg conv2d_64_weights_9_we1;
reg conv2d_64_weights_10_ce1;
reg conv2d_64_weights_10_we1;
reg conv2d_64_weights_11_ce1;
reg conv2d_64_weights_11_we1;
reg conv2d_64_weights_12_ce1;
reg conv2d_64_weights_12_we1;
reg conv2d_64_weights_13_ce1;
reg conv2d_64_weights_13_we1;
reg conv2d_64_weights_14_ce1;
reg conv2d_64_weights_14_we1;
reg conv2d_64_weights_15_ce1;
reg conv2d_64_weights_15_we1;
reg conv2d_64_weights_16_ce1;
reg conv2d_64_weights_16_we1;
reg conv2d_64_weights_17_ce1;
reg conv2d_64_weights_17_we1;
reg conv2d_64_weights_18_ce1;
reg conv2d_64_weights_18_we1;
reg conv2d_64_weights_19_ce1;
reg conv2d_64_weights_19_we1;
reg conv2d_64_weights_20_ce1;
reg conv2d_64_weights_20_we1;
reg conv2d_64_weights_21_ce1;
reg conv2d_64_weights_21_we1;
reg conv2d_64_weights_22_ce1;
reg conv2d_64_weights_22_we1;
reg conv2d_64_weights_23_ce1;
reg conv2d_64_weights_23_we1;
reg conv2d_64_weights_24_ce1;
reg conv2d_64_weights_24_we1;
reg conv2d_64_weights_25_ce1;
reg conv2d_64_weights_25_we1;
reg conv2d_64_weights_26_ce1;
reg conv2d_64_weights_26_we1;
reg conv2d_64_weights_27_ce1;
reg conv2d_64_weights_27_we1;
reg conv2d_64_weights_28_ce1;
reg conv2d_64_weights_28_we1;
reg conv2d_64_weights_29_ce1;
reg conv2d_64_weights_29_we1;
reg conv2d_64_weights_30_ce1;
reg conv2d_64_weights_30_we1;
reg conv2d_64_weights_31_ce1;
reg conv2d_64_weights_31_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln28_reg_1035;
reg   [0:0] icmp_ln30_reg_1050;
reg    ap_predicate_op128_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln28_fu_811_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln28_reg_1035_pp0_iter1_reg;
wire   [0:0] icmp_ln29_fu_826_p2;
reg   [0:0] icmp_ln29_reg_1039;
reg   [0:0] icmp_ln29_reg_1039_pp0_iter1_reg;
wire   [9:0] select_ln28_fu_832_p3;
reg   [9:0] select_ln28_reg_1045;
reg   [9:0] select_ln28_reg_1045_pp0_iter1_reg;
wire   [0:0] icmp_ln30_fu_844_p2;
reg   [0:0] icmp_ln30_reg_1050_pp0_iter1_reg;
reg   [511:0] gmem_addr_read_reg_1054;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [511:0] ap_phi_mux_empty_phi_fu_778_p4;
wire   [511:0] ap_phi_reg_pp0_iter2_empty_reg_775;
wire   [511:0] shiftreg10_cast_fu_902_p1;
wire   [63:0] i_18_cast19_fu_907_p1;
reg   [479:0] shiftreg10_fu_204;
wire    ap_loop_init;
reg   [9:0] i_fu_208;
wire   [9:0] add_ln29_fu_850_p2;
reg   [9:0] ap_sig_allocacmp_i_load;
reg   [5:0] channel_fu_212;
wire   [5:0] select_ln28_2_fu_891_p3;
reg   [14:0] indvar_flatten_fu_216;
wire   [14:0] add_ln28_1_fu_817_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [4:0] trunc_ln28_fu_898_p1;
wire   [31:0] bitcast_ln30_fu_946_p1;
wire   [3:0] empty_140_fu_840_p1;
wire   [5:0] add_ln28_fu_878_p2;
wire   [479:0] select_ln28_1_fu_884_p3;
wire   [31:0] trunc_ln30_fu_942_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            channel_fu_212 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            channel_fu_212 <= select_ln28_2_fu_891_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln28_fu_811_p2 == 1'd0))) begin
            i_fu_208 <= add_ln29_fu_850_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_208 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln28_fu_811_p2 == 1'd0))) begin
            indvar_flatten_fu_216 <= add_ln28_1_fu_817_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_216 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            shiftreg10_fu_204 <= 480'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            shiftreg10_fu_204 <= {{ap_phi_mux_empty_phi_fu_778_p4[511:32]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln28_reg_1035 <= icmp_ln28_fu_811_p2;
        icmp_ln28_reg_1035_pp0_iter1_reg <= icmp_ln28_reg_1035;
        icmp_ln29_reg_1039_pp0_iter1_reg <= icmp_ln29_reg_1039;
        icmp_ln30_reg_1050_pp0_iter1_reg <= icmp_ln30_reg_1050;
        select_ln28_reg_1045_pp0_iter1_reg <= select_ln28_reg_1045;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op128_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_1054 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln28_fu_811_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln29_reg_1039 <= icmp_ln29_fu_826_p2;
        icmp_ln30_reg_1050 <= icmp_ln30_fu_844_p2;
        select_ln28_reg_1045 <= select_ln28_fu_832_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln28_fu_811_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_1035 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln28_reg_1035_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln30_reg_1050_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_778_p4 = shiftreg10_cast_fu_902_p1;
        end else if ((icmp_ln30_reg_1050_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_778_p4 = gmem_addr_read_reg_1054;
        end else begin
            ap_phi_mux_empty_phi_fu_778_p4 = ap_phi_reg_pp0_iter2_empty_reg_775;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_778_p4 = ap_phi_reg_pp0_iter2_empty_reg_775;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 10'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_208;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_216;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_0_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_0_we1 = 1'b1;
    end else begin
        conv2d_64_weights_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_10_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd10) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_10_we1 = 1'b1;
    end else begin
        conv2d_64_weights_10_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_11_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd11) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_11_we1 = 1'b1;
    end else begin
        conv2d_64_weights_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_12_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd12) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_12_we1 = 1'b1;
    end else begin
        conv2d_64_weights_12_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_13_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd13) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_13_we1 = 1'b1;
    end else begin
        conv2d_64_weights_13_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_14_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_14_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_14_we1 = 1'b1;
    end else begin
        conv2d_64_weights_14_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_15_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_15_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd15) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_15_we1 = 1'b1;
    end else begin
        conv2d_64_weights_15_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_16_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_16_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd16) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_16_we1 = 1'b1;
    end else begin
        conv2d_64_weights_16_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_17_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_17_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd17) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_17_we1 = 1'b1;
    end else begin
        conv2d_64_weights_17_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_18_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_18_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd18) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_18_we1 = 1'b1;
    end else begin
        conv2d_64_weights_18_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_19_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_19_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd19) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_19_we1 = 1'b1;
    end else begin
        conv2d_64_weights_19_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_1_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_1_we1 = 1'b1;
    end else begin
        conv2d_64_weights_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_20_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_20_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd20) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_20_we1 = 1'b1;
    end else begin
        conv2d_64_weights_20_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_21_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_21_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd21) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_21_we1 = 1'b1;
    end else begin
        conv2d_64_weights_21_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_22_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_22_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd22) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_22_we1 = 1'b1;
    end else begin
        conv2d_64_weights_22_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_23_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_23_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd23) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_23_we1 = 1'b1;
    end else begin
        conv2d_64_weights_23_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_24_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_24_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd24) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_24_we1 = 1'b1;
    end else begin
        conv2d_64_weights_24_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_25_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_25_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd25) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_25_we1 = 1'b1;
    end else begin
        conv2d_64_weights_25_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_26_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_26_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd26) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_26_we1 = 1'b1;
    end else begin
        conv2d_64_weights_26_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_27_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_27_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd27) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_27_we1 = 1'b1;
    end else begin
        conv2d_64_weights_27_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_28_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_28_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd28) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_28_we1 = 1'b1;
    end else begin
        conv2d_64_weights_28_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_29_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_29_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd29) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_29_we1 = 1'b1;
    end else begin
        conv2d_64_weights_29_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_2_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_2_we1 = 1'b1;
    end else begin
        conv2d_64_weights_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_30_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_30_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd30) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_30_we1 = 1'b1;
    end else begin
        conv2d_64_weights_30_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_31_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_31_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd31) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_31_we1 = 1'b1;
    end else begin
        conv2d_64_weights_31_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_3_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_3_we1 = 1'b1;
    end else begin
        conv2d_64_weights_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_4_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_4_we1 = 1'b1;
    end else begin
        conv2d_64_weights_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_5_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_5_we1 = 1'b1;
    end else begin
        conv2d_64_weights_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_6_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_6_we1 = 1'b1;
    end else begin
        conv2d_64_weights_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_7_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_7_we1 = 1'b1;
    end else begin
        conv2d_64_weights_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_8_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_8_we1 = 1'b1;
    end else begin
        conv2d_64_weights_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_9_ce1 = 1'b1;
    end else begin
        conv2d_64_weights_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln28_fu_898_p1 == 5'd9) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv2d_64_weights_9_we1 = 1'b1;
    end else begin
        conv2d_64_weights_9_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op128_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op128_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_1_fu_817_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign add_ln28_fu_878_p2 = (channel_fu_212 + 6'd1);

assign add_ln29_fu_850_p2 = (select_ln28_fu_832_p3 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_predicate_op128_read_state2 == 1'b1) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_predicate_op128_read_state2 == 1'b1) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op128_read_state2 == 1'b1) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter2_empty_reg_775 = 'bx;

always @ (*) begin
    ap_predicate_op128_read_state2 = ((icmp_ln30_reg_1050 == 1'd1) & (icmp_ln28_reg_1035 == 1'd0));
end

assign bitcast_ln30_fu_946_p1 = trunc_ln30_fu_942_p1;

assign conv2d_64_weights_0_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_0_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_10_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_10_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_11_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_11_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_12_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_12_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_13_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_13_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_14_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_14_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_15_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_15_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_16_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_16_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_17_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_17_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_18_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_18_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_19_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_19_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_1_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_1_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_20_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_20_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_21_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_21_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_22_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_22_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_23_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_23_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_24_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_24_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_25_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_25_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_26_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_26_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_27_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_27_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_28_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_28_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_29_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_29_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_2_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_2_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_30_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_30_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_31_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_31_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_3_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_3_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_4_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_4_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_5_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_5_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_6_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_6_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_7_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_7_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_8_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_8_d1 = bitcast_ln30_fu_946_p1;

assign conv2d_64_weights_9_address1 = i_18_cast19_fu_907_p1;

assign conv2d_64_weights_9_d1 = bitcast_ln30_fu_946_p1;

assign empty_140_fu_840_p1 = select_ln28_fu_832_p3[3:0];

assign i_18_cast19_fu_907_p1 = select_ln28_reg_1045_pp0_iter1_reg;

assign icmp_ln28_fu_811_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd18432) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_826_p2 = ((ap_sig_allocacmp_i_load == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_844_p2 = ((empty_140_fu_840_p1 == 4'd0) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign select_ln28_1_fu_884_p3 = ((icmp_ln29_reg_1039_pp0_iter1_reg[0:0] == 1'b1) ? 480'd0 : shiftreg10_fu_204);

assign select_ln28_2_fu_891_p3 = ((icmp_ln29_reg_1039_pp0_iter1_reg[0:0] == 1'b1) ? add_ln28_fu_878_p2 : channel_fu_212);

assign select_ln28_fu_832_p3 = ((icmp_ln29_fu_826_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_i_load);

assign shiftreg10_cast_fu_902_p1 = select_ln28_1_fu_884_p3;

assign trunc_ln28_fu_898_p1 = select_ln28_2_fu_891_p3[4:0];

assign trunc_ln30_fu_942_p1 = ap_phi_mux_empty_phi_fu_778_p4[31:0];

endmodule //accel_save_variables_locally_Pipeline_VITIS_LOOP_28_3_VITIS_LOOP_29_4
