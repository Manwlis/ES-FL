// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accel_create_window_stream_maxp2d_28u_28u_32u_2u_2u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        conv2d_32_feature_map_stream122_dout,
        conv2d_32_feature_map_stream122_num_data_valid,
        conv2d_32_feature_map_stream122_fifo_cap,
        conv2d_32_feature_map_stream122_empty_n,
        conv2d_32_feature_map_stream122_read,
        maxp2d_32_window_stream_din,
        maxp2d_32_window_stream_num_data_valid,
        maxp2d_32_window_stream_fifo_cap,
        maxp2d_32_window_stream_full_n,
        maxp2d_32_window_stream_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] conv2d_32_feature_map_stream122_dout;
input  [2:0] conv2d_32_feature_map_stream122_num_data_valid;
input  [2:0] conv2d_32_feature_map_stream122_fifo_cap;
input   conv2d_32_feature_map_stream122_empty_n;
output   conv2d_32_feature_map_stream122_read;
output  [127:0] maxp2d_32_window_stream_din;
input  [2:0] maxp2d_32_window_stream_num_data_valid;
input  [2:0] maxp2d_32_window_stream_fifo_cap;
input   maxp2d_32_window_stream_full_n;
output   maxp2d_32_window_stream_write;
output   start_out;
output   start_write;

reg ap_idle;
reg conv2d_32_feature_map_stream122_read;
reg maxp2d_32_window_stream_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] select_ln351_3_reg_912;
reg   [0:0] select_ln351_3_reg_912_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln351_fu_278_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    conv2d_32_feature_map_stream122_blk_n;
wire    ap_block_pp0_stage0;
reg    maxp2d_32_window_stream_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] pos_y_0_fu_210_p2;
reg   [31:0] pos_y_0_reg_856;
reg   [0:0] tmp_18_reg_861;
reg   [0:0] tmp_18_reg_861_pp0_iter1_reg;
reg   [0:0] tmp_19_reg_866;
reg   [0:0] tmp_19_reg_866_pp0_iter1_reg;
reg   [0:0] tmp_20_reg_871;
reg   [0:0] tmp_23_reg_876;
wire   [31:0] row_ptr_5_fu_325_p3;
reg   [31:0] row_ptr_5_reg_885;
reg   [31:0] row_ptr_5_reg_885_pp0_iter1_reg;
wire   [31:0] col_ptr_7_fu_333_p3;
reg   [31:0] col_ptr_7_reg_891;
wire   [0:0] icmp_ln353_fu_341_p2;
reg   [0:0] icmp_ln353_reg_898;
reg   [0:0] icmp_ln353_reg_898_pp0_iter1_reg;
wire   [5:0] add_ln358_fu_413_p2;
reg   [5:0] add_ln358_reg_907;
wire   [0:0] select_ln351_3_fu_431_p3;
wire   [5:0] trunc_ln367_1_fu_439_p1;
reg   [5:0] trunc_ln367_1_reg_916;
wire   [31:0] add_ln364_1_fu_443_p2;
reg   [31:0] add_ln364_1_reg_921;
reg   [31:0] add_ln364_1_reg_921_pp0_iter1_reg;
wire   [5:0] trunc_ln367_3_fu_457_p1;
reg   [5:0] trunc_ln367_3_reg_927;
wire   [10:0] zext_ln358_2_fu_483_p1;
reg   [10:0] zext_ln358_2_reg_932;
wire   [31:0] pos_y_0_mid1_fu_537_p2;
reg   [31:0] pos_y_0_mid1_reg_944;
wire   [31:0] select_ln366_3_fu_683_p3;
reg   [31:0] select_ln366_3_reg_960;
wire   [31:0] select_ln366_fu_691_p3;
reg   [31:0] select_ln366_reg_965;
wire   [10:0] line_buffer_address0;
reg    line_buffer_ce0;
reg    line_buffer_we0;
wire   [10:0] line_buffer_address1;
reg    line_buffer_ce1;
wire   [31:0] line_buffer_q1;
wire   [10:0] line_buffer_address2;
reg    line_buffer_ce2;
wire   [31:0] line_buffer_q2;
wire   [10:0] line_buffer_address3;
reg    line_buffer_ce3;
wire   [31:0] line_buffer_q3;
wire   [63:0] zext_ln367_4_fu_493_p1;
wire   [63:0] zext_ln358_3_fu_653_p1;
wire   [63:0] zext_ln367_2_fu_663_p1;
wire   [63:0] zext_ln367_3_fu_673_p1;
reg   [5:0] channel_fu_70;
wire   [5:0] add_ln353_fu_498_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_channel_load;
reg   [31:0] temp_window_elements_load2_fu_74;
wire   [31:0] select_ln366_1_fu_751_p3;
reg   [31:0] temp_window_elements_load_176_fu_78;
wire   [31:0] select_ln366_2_fu_759_p3;
reg   [31:0] temp_window_elements_load_1810_fu_82;
reg   [31:0] temp_window_elements_load_1914_fu_86;
reg   [31:0] row_ptr_fu_90;
wire   [31:0] select_ln351_2_fu_397_p3;
reg   [31:0] ap_sig_allocacmp_row_ptr_1;
reg   [31:0] col_ptr_fu_94;
wire   [31:0] select_ln351_1_fu_359_p3;
reg   [31:0] ap_sig_allocacmp_col_ptr_1;
reg   [14:0] indvar_flatten_fu_98;
wire   [14:0] add_ln351_fu_284_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_fu_678_p1;
wire   [0:0] trunc_ln351_fu_194_p1;
wire   [0:0] cmp34_not_fu_198_p2;
wire   [31:0] add_ln364_fu_216_p2;
wire   [31:0] or_ln366_fu_222_p2;
wire   [31:0] or_ln366_1_fu_236_p2;
wire   [31:0] or_ln366_2_fu_250_p2;
wire   [31:0] or_ln366_3_fu_264_p2;
wire   [31:0] row_ptr_4_fu_293_p2;
wire   [31:0] col_ptr_5_fu_305_p2;
wire   [0:0] icmp_ln377_fu_311_p2;
wire   [0:0] icmp_ln373_fu_299_p2;
wire   [31:0] col_ptr_6_fu_317_p3;
wire   [36:0] tmp_5_fu_367_p3;
wire   [33:0] tmp_6_fu_379_p3;
wire   [37:0] zext_ln358_fu_375_p1;
wire   [37:0] zext_ln358_1_fu_387_p1;
wire   [37:0] sub_ln358_fu_391_p2;
wire   [5:0] trunc_ln358_fu_405_p1;
wire   [5:0] trunc_ln358_1_fu_409_p1;
wire   [0:0] trunc_ln351_1_fu_355_p1;
wire   [0:0] cmp34_not_mid1_fu_419_p2;
wire   [0:0] demorgan_mid1_fu_425_p2;
wire   [0:0] demorgan_fu_204_p2;
wire   [31:0] select_ln351_6_fu_449_p3;
wire   [5:0] trunc_ln367_4_fu_461_p1;
wire   [5:0] trunc_ln367_5_fu_465_p1;
wire   [5:0] add_ln367_2_fu_469_p2;
wire   [5:0] select_ln351_fu_347_p3;
wire   [10:0] tmp_12_fu_475_p3;
wire   [10:0] add_ln367_5_fu_487_p2;
wire   [31:0] select_ln351_4_fu_542_p3;
wire   [36:0] tmp_8_fu_548_p3;
wire   [33:0] tmp_9_fu_560_p3;
wire   [37:0] zext_ln367_fu_556_p1;
wire   [37:0] zext_ln367_1_fu_568_p1;
wire   [37:0] sub_ln367_fu_572_p2;
wire   [5:0] trunc_ln367_fu_578_p1;
wire   [5:0] add_ln367_fu_582_p2;
wire   [5:0] trunc_ln367_2_fu_595_p1;
wire   [5:0] add_ln367_1_fu_599_p2;
wire   [31:0] or_ln366_6_fu_612_p2;
wire   [0:0] tmp_26_fu_616_p3;
wire   [31:0] or_ln366_7_fu_630_p2;
wire   [0:0] tmp_27_fu_634_p3;
wire   [10:0] tmp_7_fu_530_p3;
wire   [10:0] add_ln358_1_fu_648_p2;
wire   [10:0] tmp_11_fu_604_p3;
wire   [10:0] add_ln367_3_fu_658_p2;
wire   [10:0] tmp_10_fu_587_p3;
wire   [10:0] add_ln367_4_fu_668_p2;
wire   [0:0] select_ln351_8_fu_624_p3;
wire   [0:0] select_ln351_9_fu_642_p3;
wire   [31:0] or_ln366_4_fu_715_p2;
wire   [0:0] tmp_24_fu_719_p3;
wire   [31:0] or_ln366_5_fu_733_p2;
wire   [0:0] tmp_25_fu_737_p3;
wire   [0:0] select_ln351_5_fu_727_p3;
wire   [0:0] select_ln351_7_fu_745_p3;
wire   [31:0] bitcast_ln174_258_fu_778_p1;
wire   [31:0] bitcast_ln174_257_fu_775_p1;
wire   [31:0] bitcast_ln174_256_fu_771_p1;
wire   [31:0] bitcast_ln174_fu_767_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_214;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

accel_create_window_stream_maxp2d_28u_28u_32u_2u_2u_s_line_buffer_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 1792 ),
    .AddressWidth( 11 ))
line_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_address0),
    .ce0(line_buffer_ce0),
    .we0(line_buffer_we0),
    .d0(tmp_fu_678_p1),
    .address1(line_buffer_address1),
    .ce1(line_buffer_ce1),
    .q1(line_buffer_q1),
    .address2(line_buffer_address2),
    .ce2(line_buffer_ce2),
    .q2(line_buffer_q2),
    .address3(line_buffer_address3),
    .ce3(line_buffer_ce3),
    .q3(line_buffer_q3)
);

accel_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_214)) begin
        if ((icmp_ln351_fu_278_p2 == 1'd0)) begin
            channel_fu_70 <= add_ln353_fu_498_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            channel_fu_70 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_214)) begin
        if ((icmp_ln351_fu_278_p2 == 1'd0)) begin
            col_ptr_fu_94 <= select_ln351_1_fu_359_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            col_ptr_fu_94 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_214)) begin
        if ((icmp_ln351_fu_278_p2 == 1'd0)) begin
            indvar_flatten_fu_98 <= add_ln351_fu_284_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_98 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_214)) begin
        if ((icmp_ln351_fu_278_p2 == 1'd0)) begin
            row_ptr_fu_90 <= select_ln351_2_fu_397_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            row_ptr_fu_90 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln351_fu_278_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln358_reg_907 <= add_ln358_fu_413_p2;
        add_ln364_1_reg_921 <= add_ln364_1_fu_443_p2;
        col_ptr_7_reg_891 <= col_ptr_7_fu_333_p3;
        icmp_ln353_reg_898 <= icmp_ln353_fu_341_p2;
        row_ptr_5_reg_885 <= row_ptr_5_fu_325_p3;
        select_ln351_3_reg_912 <= select_ln351_3_fu_431_p3;
        trunc_ln367_1_reg_916 <= trunc_ln367_1_fu_439_p1;
        trunc_ln367_3_reg_927 <= trunc_ln367_3_fu_457_p1;
        zext_ln358_2_reg_932[5 : 0] <= zext_ln358_2_fu_483_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln364_1_reg_921_pp0_iter1_reg <= add_ln364_1_reg_921;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln353_reg_898_pp0_iter1_reg <= icmp_ln353_reg_898;
        pos_y_0_mid1_reg_944 <= pos_y_0_mid1_fu_537_p2;
        pos_y_0_reg_856 <= pos_y_0_fu_210_p2;
        row_ptr_5_reg_885_pp0_iter1_reg <= row_ptr_5_reg_885;
        select_ln351_3_reg_912_pp0_iter1_reg <= select_ln351_3_reg_912;
        select_ln366_3_reg_960 <= select_ln366_3_fu_683_p3;
        select_ln366_reg_965 <= select_ln366_fu_691_p3;
        tmp_18_reg_861 <= or_ln366_fu_222_p2[32'd31];
        tmp_18_reg_861_pp0_iter1_reg <= tmp_18_reg_861;
        tmp_19_reg_866 <= or_ln366_1_fu_236_p2[32'd31];
        tmp_19_reg_866_pp0_iter1_reg <= tmp_19_reg_866;
        tmp_20_reg_871 <= or_ln366_2_fu_250_p2[32'd31];
        tmp_23_reg_876 <= or_ln366_3_fu_264_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_window_elements_load2_fu_74 <= select_ln366_1_fu_751_p3;
        temp_window_elements_load_176_fu_78 <= select_ln366_2_fu_759_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_window_elements_load_1810_fu_82 <= select_ln366_3_fu_683_p3;
        temp_window_elements_load_1914_fu_86 <= select_ln366_fu_691_p3;
    end
end

always @ (*) begin
    if (((icmp_ln351_fu_278_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_channel_load = 6'd0;
    end else begin
        ap_sig_allocacmp_channel_load = channel_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_col_ptr_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_col_ptr_1 = col_ptr_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_row_ptr_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_row_ptr_1 = row_ptr_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_32_feature_map_stream122_blk_n = conv2d_32_feature_map_stream122_empty_n;
    end else begin
        conv2d_32_feature_map_stream122_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_32_feature_map_stream122_read = 1'b1;
    end else begin
        conv2d_32_feature_map_stream122_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_ce0 = 1'b1;
    end else begin
        line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_ce1 = 1'b1;
    end else begin
        line_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_ce2 = 1'b1;
    end else begin
        line_buffer_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_ce3 = 1'b1;
    end else begin
        line_buffer_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_we0 = 1'b1;
    end else begin
        line_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln351_3_reg_912_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        maxp2d_32_window_stream_blk_n = maxp2d_32_window_stream_full_n;
    end else begin
        maxp2d_32_window_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln351_3_reg_912_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        maxp2d_32_window_stream_write = 1'b1;
    end else begin
        maxp2d_32_window_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln351_fu_284_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign add_ln353_fu_498_p2 = (select_ln351_fu_347_p3 + 6'd1);

assign add_ln358_1_fu_648_p2 = (tmp_7_fu_530_p3 + zext_ln358_2_reg_932);

assign add_ln358_fu_413_p2 = (trunc_ln358_fu_405_p1 + trunc_ln358_1_fu_409_p1);

assign add_ln364_1_fu_443_p2 = ($signed(row_ptr_5_fu_325_p3) + $signed(32'd4294967295));

assign add_ln364_fu_216_p2 = ($signed(ap_sig_allocacmp_row_ptr_1) + $signed(32'd4294967295));

assign add_ln367_1_fu_599_p2 = (trunc_ln367_2_fu_595_p1 + trunc_ln367_3_reg_927);

assign add_ln367_2_fu_469_p2 = (trunc_ln367_4_fu_461_p1 + trunc_ln367_5_fu_465_p1);

assign add_ln367_3_fu_658_p2 = (tmp_11_fu_604_p3 + zext_ln358_2_reg_932);

assign add_ln367_4_fu_668_p2 = (tmp_10_fu_587_p3 + zext_ln358_2_reg_932);

assign add_ln367_5_fu_487_p2 = (tmp_12_fu_475_p3 + zext_ln358_2_fu_483_p1);

assign add_ln367_fu_582_p2 = (trunc_ln367_fu_578_p1 + trunc_ln367_1_reg_916);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((select_ln351_3_reg_912_pp0_iter1_reg == 1'd1) & (maxp2d_32_window_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((conv2d_32_feature_map_stream122_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((select_ln351_3_reg_912_pp0_iter1_reg == 1'd1) & (maxp2d_32_window_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((conv2d_32_feature_map_stream122_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((select_ln351_3_reg_912_pp0_iter1_reg == 1'd1) & (maxp2d_32_window_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((conv2d_32_feature_map_stream122_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (conv2d_32_feature_map_stream122_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((select_ln351_3_reg_912_pp0_iter1_reg == 1'd1) & (maxp2d_32_window_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_214 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign bitcast_ln174_256_fu_771_p1 = select_ln366_2_fu_759_p3;

assign bitcast_ln174_257_fu_775_p1 = select_ln366_3_reg_960;

assign bitcast_ln174_258_fu_778_p1 = select_ln366_reg_965;

assign bitcast_ln174_fu_767_p1 = select_ln366_1_fu_751_p3;

assign cmp34_not_fu_198_p2 = ((ap_sig_allocacmp_col_ptr_1 == 32'd1) ? 1'b1 : 1'b0);

assign cmp34_not_mid1_fu_419_p2 = ((col_ptr_7_fu_333_p3 == 32'd1) ? 1'b1 : 1'b0);

assign col_ptr_5_fu_305_p2 = (ap_sig_allocacmp_col_ptr_1 + 32'd1);

assign col_ptr_6_fu_317_p3 = ((icmp_ln377_fu_311_p2[0:0] == 1'b1) ? 32'd0 : col_ptr_5_fu_305_p2);

assign col_ptr_7_fu_333_p3 = ((icmp_ln373_fu_299_p2[0:0] == 1'b1) ? col_ptr_6_fu_317_p3 : ap_sig_allocacmp_col_ptr_1);

assign demorgan_fu_204_p2 = (trunc_ln351_fu_194_p1 & cmp34_not_fu_198_p2);

assign demorgan_mid1_fu_425_p2 = (trunc_ln351_1_fu_355_p1 & cmp34_not_mid1_fu_419_p2);

assign icmp_ln351_fu_278_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd25088) ? 1'b1 : 1'b0);

assign icmp_ln353_fu_341_p2 = ((ap_sig_allocacmp_channel_load == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln373_fu_299_p2 = ((row_ptr_4_fu_293_p2 == 32'd28) ? 1'b1 : 1'b0);

assign icmp_ln377_fu_311_p2 = ((col_ptr_5_fu_305_p2 == 32'd2) ? 1'b1 : 1'b0);

assign line_buffer_address0 = zext_ln358_3_fu_653_p1;

assign line_buffer_address1 = zext_ln367_3_fu_673_p1;

assign line_buffer_address2 = zext_ln367_2_fu_663_p1;

assign line_buffer_address3 = zext_ln367_4_fu_493_p1;

assign maxp2d_32_window_stream_din = {{{{bitcast_ln174_258_fu_778_p1}, {bitcast_ln174_257_fu_775_p1}}, {bitcast_ln174_256_fu_771_p1}}, {bitcast_ln174_fu_767_p1}};

assign or_ln366_1_fu_236_p2 = (pos_y_0_fu_210_p2 | ap_sig_allocacmp_row_ptr_1);

assign or_ln366_2_fu_250_p2 = (ap_sig_allocacmp_col_ptr_1 | add_ln364_fu_216_p2);

assign or_ln366_3_fu_264_p2 = (ap_sig_allocacmp_row_ptr_1 | ap_sig_allocacmp_col_ptr_1);

assign or_ln366_4_fu_715_p2 = (pos_y_0_mid1_reg_944 | add_ln364_1_reg_921_pp0_iter1_reg);

assign or_ln366_5_fu_733_p2 = (row_ptr_5_reg_885_pp0_iter1_reg | pos_y_0_mid1_reg_944);

assign or_ln366_6_fu_612_p2 = (col_ptr_7_reg_891 | add_ln364_1_reg_921);

assign or_ln366_7_fu_630_p2 = (row_ptr_5_reg_885 | col_ptr_7_reg_891);

assign or_ln366_fu_222_p2 = (pos_y_0_fu_210_p2 | add_ln364_fu_216_p2);

assign pos_y_0_fu_210_p2 = ($signed(ap_sig_allocacmp_col_ptr_1) + $signed(32'd4294967295));

assign pos_y_0_mid1_fu_537_p2 = ($signed(col_ptr_7_reg_891) + $signed(32'd4294967295));

assign row_ptr_4_fu_293_p2 = (ap_sig_allocacmp_row_ptr_1 + 32'd1);

assign row_ptr_5_fu_325_p3 = ((icmp_ln373_fu_299_p2[0:0] == 1'b1) ? 32'd0 : row_ptr_4_fu_293_p2);

assign select_ln351_1_fu_359_p3 = ((icmp_ln353_fu_341_p2[0:0] == 1'b1) ? col_ptr_7_fu_333_p3 : ap_sig_allocacmp_col_ptr_1);

assign select_ln351_2_fu_397_p3 = ((icmp_ln353_fu_341_p2[0:0] == 1'b1) ? row_ptr_5_fu_325_p3 : ap_sig_allocacmp_row_ptr_1);

assign select_ln351_3_fu_431_p3 = ((icmp_ln353_fu_341_p2[0:0] == 1'b1) ? demorgan_mid1_fu_425_p2 : demorgan_fu_204_p2);

assign select_ln351_4_fu_542_p3 = ((icmp_ln353_reg_898[0:0] == 1'b1) ? pos_y_0_mid1_fu_537_p2 : pos_y_0_reg_856);

assign select_ln351_5_fu_727_p3 = ((icmp_ln353_reg_898_pp0_iter1_reg[0:0] == 1'b1) ? tmp_24_fu_719_p3 : tmp_18_reg_861_pp0_iter1_reg);

assign select_ln351_6_fu_449_p3 = ((icmp_ln353_fu_341_p2[0:0] == 1'b1) ? add_ln364_1_fu_443_p2 : add_ln364_fu_216_p2);

assign select_ln351_7_fu_745_p3 = ((icmp_ln353_reg_898_pp0_iter1_reg[0:0] == 1'b1) ? tmp_25_fu_737_p3 : tmp_19_reg_866_pp0_iter1_reg);

assign select_ln351_8_fu_624_p3 = ((icmp_ln353_reg_898[0:0] == 1'b1) ? tmp_26_fu_616_p3 : tmp_20_reg_871);

assign select_ln351_9_fu_642_p3 = ((icmp_ln353_reg_898[0:0] == 1'b1) ? tmp_27_fu_634_p3 : tmp_23_reg_876);

assign select_ln351_fu_347_p3 = ((icmp_ln353_fu_341_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_channel_load);

assign select_ln366_1_fu_751_p3 = ((select_ln351_5_fu_727_p3[0:0] == 1'b1) ? temp_window_elements_load2_fu_74 : line_buffer_q2);

assign select_ln366_2_fu_759_p3 = ((select_ln351_7_fu_745_p3[0:0] == 1'b1) ? temp_window_elements_load_176_fu_78 : line_buffer_q1);

assign select_ln366_3_fu_683_p3 = ((select_ln351_8_fu_624_p3[0:0] == 1'b1) ? temp_window_elements_load_1810_fu_82 : line_buffer_q3);

assign select_ln366_fu_691_p3 = ((select_ln351_9_fu_642_p3[0:0] == 1'b1) ? temp_window_elements_load_1914_fu_86 : tmp_fu_678_p1);

assign start_out = real_start;

assign sub_ln358_fu_391_p2 = (zext_ln358_fu_375_p1 - zext_ln358_1_fu_387_p1);

assign sub_ln367_fu_572_p2 = (zext_ln367_fu_556_p1 - zext_ln367_1_fu_568_p1);

assign tmp_10_fu_587_p3 = {{add_ln367_fu_582_p2}, {5'd0}};

assign tmp_11_fu_604_p3 = {{add_ln367_1_fu_599_p2}, {5'd0}};

assign tmp_12_fu_475_p3 = {{add_ln367_2_fu_469_p2}, {5'd0}};

assign tmp_24_fu_719_p3 = or_ln366_4_fu_715_p2[32'd31];

assign tmp_25_fu_737_p3 = or_ln366_5_fu_733_p2[32'd31];

assign tmp_26_fu_616_p3 = or_ln366_6_fu_612_p2[32'd31];

assign tmp_27_fu_634_p3 = or_ln366_7_fu_630_p2[32'd31];

assign tmp_5_fu_367_p3 = {{select_ln351_1_fu_359_p3}, {5'd0}};

assign tmp_6_fu_379_p3 = {{select_ln351_1_fu_359_p3}, {2'd0}};

assign tmp_7_fu_530_p3 = {{add_ln358_reg_907}, {5'd0}};

assign tmp_8_fu_548_p3 = {{select_ln351_4_fu_542_p3}, {5'd0}};

assign tmp_9_fu_560_p3 = {{select_ln351_4_fu_542_p3}, {2'd0}};

assign tmp_fu_678_p1 = conv2d_32_feature_map_stream122_dout;

assign trunc_ln351_1_fu_355_p1 = row_ptr_5_fu_325_p3[0:0];

assign trunc_ln351_fu_194_p1 = ap_sig_allocacmp_row_ptr_1[0:0];

assign trunc_ln358_1_fu_409_p1 = select_ln351_2_fu_397_p3[5:0];

assign trunc_ln358_fu_405_p1 = sub_ln358_fu_391_p2[5:0];

assign trunc_ln367_1_fu_439_p1 = select_ln351_2_fu_397_p3[5:0];

assign trunc_ln367_2_fu_595_p1 = sub_ln367_fu_572_p2[5:0];

assign trunc_ln367_3_fu_457_p1 = select_ln351_6_fu_449_p3[5:0];

assign trunc_ln367_4_fu_461_p1 = sub_ln358_fu_391_p2[5:0];

assign trunc_ln367_5_fu_465_p1 = select_ln351_6_fu_449_p3[5:0];

assign trunc_ln367_fu_578_p1 = sub_ln367_fu_572_p2[5:0];

assign zext_ln358_1_fu_387_p1 = tmp_6_fu_379_p3;

assign zext_ln358_2_fu_483_p1 = select_ln351_fu_347_p3;

assign zext_ln358_3_fu_653_p1 = add_ln358_1_fu_648_p2;

assign zext_ln358_fu_375_p1 = tmp_5_fu_367_p3;

assign zext_ln367_1_fu_568_p1 = tmp_9_fu_560_p3;

assign zext_ln367_2_fu_663_p1 = add_ln367_3_fu_658_p2;

assign zext_ln367_3_fu_673_p1 = add_ln367_4_fu_668_p2;

assign zext_ln367_4_fu_493_p1 = add_ln367_5_fu_487_p2;

assign zext_ln367_fu_556_p1 = tmp_8_fu_548_p3;

always @ (posedge ap_clk) begin
    zext_ln358_2_reg_932[10:6] <= 5'b00000;
end

endmodule //accel_create_window_stream_maxp2d_28u_28u_32u_2u_2u_s
