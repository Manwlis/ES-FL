// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accel_pad_windows_1c_float_28u_28u_3u_3u_32u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        conv2d_32_window_stream_dout,
        conv2d_32_window_stream_num_data_valid,
        conv2d_32_window_stream_fifo_cap,
        conv2d_32_window_stream_empty_n,
        conv2d_32_window_stream_read,
        conv2d_32_padded_window_stream_din,
        conv2d_32_padded_window_stream_num_data_valid,
        conv2d_32_padded_window_stream_fifo_cap,
        conv2d_32_padded_window_stream_full_n,
        conv2d_32_padded_window_stream_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [287:0] conv2d_32_window_stream_dout;
input  [2:0] conv2d_32_window_stream_num_data_valid;
input  [2:0] conv2d_32_window_stream_fifo_cap;
input   conv2d_32_window_stream_empty_n;
output   conv2d_32_window_stream_read;
output  [287:0] conv2d_32_padded_window_stream_din;
input  [2:0] conv2d_32_padded_window_stream_num_data_valid;
input  [2:0] conv2d_32_padded_window_stream_fifo_cap;
input   conv2d_32_padded_window_stream_full_n;
output   conv2d_32_padded_window_stream_write;

reg ap_idle;
reg conv2d_32_window_stream_read;
reg conv2d_32_padded_window_stream_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln111_fu_164_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    conv2d_32_window_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    conv2d_32_padded_window_stream_blk_n;
wire   [0:0] select_ln111_1_fu_209_p3;
reg   [0:0] select_ln111_1_reg_495;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] select_ln111_2_fu_229_p3;
reg   [0:0] select_ln111_2_reg_502;
wire   [0:0] icmp_ln121_fu_255_p2;
reg   [0:0] icmp_ln121_reg_509;
wire   [0:0] icmp_ln121_1_fu_267_p2;
reg   [0:0] icmp_ln121_1_reg_516;
reg   [4:0] in_x_fu_90;
wire   [4:0] add_ln121_1_fu_261_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_in_x_load;
reg   [4:0] in_y_fu_94;
wire   [4:0] select_ln111_3_fu_237_p3;
reg   [4:0] ap_sig_allocacmp_in_y_2;
reg   [9:0] indvar_flatten_fu_98;
wire   [9:0] add_ln111_fu_170_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] in_y_cast_fu_136_p1;
wire   [5:0] empty_fu_140_p2;
wire   [4:0] empty_156_fu_152_p2;
wire   [0:0] icmp_ln112_fu_179_p2;
wire   [5:0] in_y_cast_mid1_fu_193_p1;
wire   [5:0] p_mid1_fu_197_p2;
wire   [0:0] p_mid15_fu_203_p2;
wire   [0:0] empty_155_fu_146_p2;
wire   [4:0] p_mid17_fu_217_p2;
wire   [0:0] p_mid19_fu_223_p2;
wire   [0:0] empty_157_fu_158_p2;
wire   [4:0] select_ln111_fu_185_p3;
wire   [5:0] zext_ln121_fu_245_p1;
wire   [5:0] add_ln121_fu_249_p2;
wire   [0:0] or_ln121_fu_372_p2;
wire   [31:0] trunc_ln145_fu_288_p1;
wire   [31:0] trunc_ln145_1_fu_292_p4;
wire   [0:0] or_ln121_1_fu_376_p2;
wire   [31:0] trunc_ln145_2_fu_302_p4;
wire   [31:0] trunc_ln145_3_fu_312_p4;
wire   [31:0] trunc_ln145_5_fu_332_p4;
wire   [0:0] or_ln121_2_fu_380_p2;
wire   [31:0] trunc_ln145_6_fu_342_p4;
wire   [31:0] trunc_ln145_7_fu_352_p4;
wire   [0:0] or_ln121_3_fu_384_p2;
wire   [31:0] trunc_ln145_8_fu_362_p4;
wire   [31:0] select_ln174_7_fu_440_p3;
wire   [31:0] select_ln174_6_fu_433_p3;
wire   [31:0] select_ln174_5_fu_425_p3;
wire   [31:0] select_ln174_4_fu_418_p3;
wire   [31:0] trunc_ln145_4_fu_322_p4;
wire   [31:0] select_ln174_3_fu_411_p3;
wire   [31:0] select_ln174_2_fu_403_p3;
wire   [31:0] select_ln174_1_fu_396_p3;
wire   [31:0] select_ln174_fu_388_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_99;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

accel_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_99)) begin
        if ((icmp_ln111_fu_164_p2 == 1'd0)) begin
            in_x_fu_90 <= add_ln121_1_fu_261_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            in_x_fu_90 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_99)) begin
        if ((icmp_ln111_fu_164_p2 == 1'd0)) begin
            in_y_fu_94 <= select_ln111_3_fu_237_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            in_y_fu_94 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_99)) begin
        if ((icmp_ln111_fu_164_p2 == 1'd0)) begin
            indvar_flatten_fu_98 <= add_ln111_fu_170_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_98 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_fu_164_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln121_1_reg_516 <= icmp_ln121_1_fu_267_p2;
        icmp_ln121_reg_509 <= icmp_ln121_fu_255_p2;
        select_ln111_1_reg_495 <= select_ln111_1_fu_209_p3;
        select_ln111_2_reg_502 <= select_ln111_2_fu_229_p3;
    end
end

always @ (*) begin
    if (((icmp_ln111_fu_164_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_in_x_load = 5'd0;
    end else begin
        ap_sig_allocacmp_in_x_load = in_x_fu_90;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_in_y_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_in_y_2 = in_y_fu_94;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_32_padded_window_stream_blk_n = conv2d_32_padded_window_stream_full_n;
    end else begin
        conv2d_32_padded_window_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_32_padded_window_stream_write = 1'b1;
    end else begin
        conv2d_32_padded_window_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_32_window_stream_blk_n = conv2d_32_window_stream_empty_n;
    end else begin
        conv2d_32_window_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_32_window_stream_read = 1'b1;
    end else begin
        conv2d_32_window_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln111_fu_170_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln121_1_fu_261_p2 = (select_ln111_fu_185_p3 + 5'd1);

assign add_ln121_fu_249_p2 = ($signed(zext_ln121_fu_245_p1) + $signed(6'd63));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((conv2d_32_padded_window_stream_full_n == 1'b0) | (conv2d_32_window_stream_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((conv2d_32_padded_window_stream_full_n == 1'b0) | (conv2d_32_window_stream_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((conv2d_32_padded_window_stream_full_n == 1'b0) | (conv2d_32_window_stream_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((conv2d_32_padded_window_stream_full_n == 1'b0) | (conv2d_32_window_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_99 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv2d_32_padded_window_stream_din = {{{{{{{{{select_ln174_7_fu_440_p3}, {select_ln174_6_fu_433_p3}}, {select_ln174_5_fu_425_p3}}, {select_ln174_4_fu_418_p3}}, {trunc_ln145_4_fu_322_p4}}, {select_ln174_3_fu_411_p3}}, {select_ln174_2_fu_403_p3}}, {select_ln174_1_fu_396_p3}}, {select_ln174_fu_388_p3}};

assign empty_155_fu_146_p2 = ((empty_fu_140_p2 > 6'd27) ? 1'b1 : 1'b0);

assign empty_156_fu_152_p2 = (ap_sig_allocacmp_in_y_2 + 5'd1);

assign empty_157_fu_158_p2 = ((empty_156_fu_152_p2 > 5'd27) ? 1'b1 : 1'b0);

assign empty_fu_140_p2 = ($signed(in_y_cast_fu_136_p1) + $signed(6'd63));

assign icmp_ln111_fu_164_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_179_p2 = ((ap_sig_allocacmp_in_x_load == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln121_1_fu_267_p2 = ((add_ln121_1_fu_261_p2 > 5'd27) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_255_p2 = ((add_ln121_fu_249_p2 > 6'd27) ? 1'b1 : 1'b0);

assign in_y_cast_fu_136_p1 = ap_sig_allocacmp_in_y_2;

assign in_y_cast_mid1_fu_193_p1 = empty_156_fu_152_p2;

assign or_ln121_1_fu_376_p2 = (select_ln111_1_reg_495 | icmp_ln121_1_reg_516);

assign or_ln121_2_fu_380_p2 = (select_ln111_2_reg_502 | icmp_ln121_reg_509);

assign or_ln121_3_fu_384_p2 = (select_ln111_2_reg_502 | icmp_ln121_1_reg_516);

assign or_ln121_fu_372_p2 = (select_ln111_1_reg_495 | icmp_ln121_reg_509);

assign p_mid15_fu_203_p2 = ((p_mid1_fu_197_p2 > 6'd27) ? 1'b1 : 1'b0);

assign p_mid17_fu_217_p2 = (ap_sig_allocacmp_in_y_2 + 5'd2);

assign p_mid19_fu_223_p2 = ((p_mid17_fu_217_p2 > 5'd27) ? 1'b1 : 1'b0);

assign p_mid1_fu_197_p2 = ($signed(in_y_cast_mid1_fu_193_p1) + $signed(6'd63));

assign select_ln111_1_fu_209_p3 = ((icmp_ln112_fu_179_p2[0:0] == 1'b1) ? p_mid15_fu_203_p2 : empty_155_fu_146_p2);

assign select_ln111_2_fu_229_p3 = ((icmp_ln112_fu_179_p2[0:0] == 1'b1) ? p_mid19_fu_223_p2 : empty_157_fu_158_p2);

assign select_ln111_3_fu_237_p3 = ((icmp_ln112_fu_179_p2[0:0] == 1'b1) ? empty_156_fu_152_p2 : ap_sig_allocacmp_in_y_2);

assign select_ln111_fu_185_p3 = ((icmp_ln112_fu_179_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_in_x_load);

assign select_ln174_1_fu_396_p3 = ((select_ln111_1_reg_495[0:0] == 1'b1) ? 32'd0 : trunc_ln145_1_fu_292_p4);

assign select_ln174_2_fu_403_p3 = ((or_ln121_1_fu_376_p2[0:0] == 1'b1) ? 32'd0 : trunc_ln145_2_fu_302_p4);

assign select_ln174_3_fu_411_p3 = ((icmp_ln121_reg_509[0:0] == 1'b1) ? 32'd0 : trunc_ln145_3_fu_312_p4);

assign select_ln174_4_fu_418_p3 = ((icmp_ln121_1_reg_516[0:0] == 1'b1) ? 32'd0 : trunc_ln145_5_fu_332_p4);

assign select_ln174_5_fu_425_p3 = ((or_ln121_2_fu_380_p2[0:0] == 1'b1) ? 32'd0 : trunc_ln145_6_fu_342_p4);

assign select_ln174_6_fu_433_p3 = ((select_ln111_2_reg_502[0:0] == 1'b1) ? 32'd0 : trunc_ln145_7_fu_352_p4);

assign select_ln174_7_fu_440_p3 = ((or_ln121_3_fu_384_p2[0:0] == 1'b1) ? 32'd0 : trunc_ln145_8_fu_362_p4);

assign select_ln174_fu_388_p3 = ((or_ln121_fu_372_p2[0:0] == 1'b1) ? 32'd0 : trunc_ln145_fu_288_p1);

assign trunc_ln145_1_fu_292_p4 = {{conv2d_32_window_stream_dout[63:32]}};

assign trunc_ln145_2_fu_302_p4 = {{conv2d_32_window_stream_dout[95:64]}};

assign trunc_ln145_3_fu_312_p4 = {{conv2d_32_window_stream_dout[127:96]}};

assign trunc_ln145_4_fu_322_p4 = {{conv2d_32_window_stream_dout[159:128]}};

assign trunc_ln145_5_fu_332_p4 = {{conv2d_32_window_stream_dout[191:160]}};

assign trunc_ln145_6_fu_342_p4 = {{conv2d_32_window_stream_dout[223:192]}};

assign trunc_ln145_7_fu_352_p4 = {{conv2d_32_window_stream_dout[255:224]}};

assign trunc_ln145_8_fu_362_p4 = {{conv2d_32_window_stream_dout[287:256]}};

assign trunc_ln145_fu_288_p1 = conv2d_32_window_stream_dout[31:0];

assign zext_ln121_fu_245_p1 = select_ln111_fu_185_p3;

endmodule //accel_pad_windows_1c_float_28u_28u_3u_3u_32u_s
