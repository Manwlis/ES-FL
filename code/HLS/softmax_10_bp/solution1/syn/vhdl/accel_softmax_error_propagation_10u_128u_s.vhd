-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accel_softmax_error_propagation_10u_128u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    softmax_output_error_stream15_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    softmax_output_error_stream15_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    softmax_output_error_stream15_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    softmax_output_error_stream15_empty_n : IN STD_LOGIC;
    softmax_output_error_stream15_read : OUT STD_LOGIC;
    weights_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (319 downto 0);
    softmax_input_error_stream16_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    softmax_input_error_stream16_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    softmax_input_error_stream16_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    softmax_input_error_stream16_full_n : IN STD_LOGIC;
    softmax_input_error_stream16_write : OUT STD_LOGIC );
end;


architecture behav of accel_softmax_error_propagation_10u_128u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_error_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_error_load_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_error_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_error_load_1_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_error_load_2_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal output_error_load_3_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_error_load_4_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal output_error_load_5_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_error_load_6_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal output_error_load_7_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_error_load_8_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal output_error_load_9_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_error_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_error_ce0 : STD_LOGIC;
    signal output_error_we0 : STD_LOGIC;
    signal output_error_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_error_ce1 : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_start : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_done : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_idle : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_ready : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_softmax_output_error_stream15_read : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_ce0 : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_we0 : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_start : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_idle : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_ready : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_softmax_input_error_stream16_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_softmax_input_error_stream16_write : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_weights_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_weights_ce0 : STD_LOGIC;
    signal grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call5 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accel_softmax_error_propagation_10u_128u_Pipeline_store_output_error IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        softmax_output_error_stream15_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        softmax_output_error_stream15_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        softmax_output_error_stream15_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        softmax_output_error_stream15_empty_n : IN STD_LOGIC;
        softmax_output_error_stream15_read : OUT STD_LOGIC;
        output_error_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_error_ce0 : OUT STD_LOGIC;
        output_error_we0 : OUT STD_LOGIC;
        output_error_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accel_softmax_error_propagation_10u_128u_Pipeline_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        softmax_input_error_stream16_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        softmax_input_error_stream16_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        softmax_input_error_stream16_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        softmax_input_error_stream16_full_n : IN STD_LOGIC;
        softmax_input_error_stream16_write : OUT STD_LOGIC;
        weights_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (319 downto 0);
        output_error_load : IN STD_LOGIC_VECTOR (31 downto 0);
        output_error_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_error_load_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_error_load_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_error_load_4 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_error_load_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_error_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_error_load_7 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_error_load_8 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_error_load_9 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accel_softmax_error_propagation_10u_128u_s_output_error_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    output_error_U : component accel_softmax_error_propagation_10u_128u_s_output_error_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_error_address0,
        ce0 => output_error_ce0,
        we0 => output_error_we0,
        d0 => grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_d0,
        q0 => output_error_q0,
        address1 => output_error_address1,
        ce1 => output_error_ce1,
        q1 => output_error_q1);

    grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137 : component accel_softmax_error_propagation_10u_128u_Pipeline_store_output_error
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_start,
        ap_done => grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_done,
        ap_idle => grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_idle,
        ap_ready => grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_ready,
        softmax_output_error_stream15_dout => softmax_output_error_stream15_dout,
        softmax_output_error_stream15_num_data_valid => ap_const_lv4_0,
        softmax_output_error_stream15_fifo_cap => ap_const_lv4_0,
        softmax_output_error_stream15_empty_n => softmax_output_error_stream15_empty_n,
        softmax_output_error_stream15_read => grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_softmax_output_error_stream15_read,
        output_error_address0 => grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_address0,
        output_error_ce0 => grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_ce0,
        output_error_we0 => grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_we0,
        output_error_d0 => grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_d0);

    grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145 : component accel_softmax_error_propagation_10u_128u_Pipeline_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_start,
        ap_done => grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done,
        ap_idle => grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_idle,
        ap_ready => grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_ready,
        softmax_input_error_stream16_din => grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_softmax_input_error_stream16_din,
        softmax_input_error_stream16_num_data_valid => ap_const_lv2_0,
        softmax_input_error_stream16_fifo_cap => ap_const_lv2_0,
        softmax_input_error_stream16_full_n => softmax_input_error_stream16_full_n,
        softmax_input_error_stream16_write => grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_softmax_input_error_stream16_write,
        weights_address0 => grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_weights_address0,
        weights_ce0 => grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_weights_ce0,
        weights_q0 => weights_q0,
        output_error_load => output_error_load_reg_175,
        output_error_load_1 => output_error_load_1_reg_180,
        output_error_load_2 => output_error_load_2_reg_195,
        output_error_load_3 => output_error_load_3_reg_200,
        output_error_load_4 => output_error_load_4_reg_215,
        output_error_load_5 => output_error_load_5_reg_220,
        output_error_load_6 => output_error_load_6_reg_235,
        output_error_load_7 => output_error_load_7_reg_240,
        output_error_load_8 => output_error_load_8_reg_255,
        output_error_load_9 => output_error_load_9_reg_260);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_ready = ap_const_logic_1)) then 
                    grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_ready = ap_const_logic_1)) then 
                    grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_error_load_1_reg_180 <= output_error_q0;
                output_error_load_reg_175 <= output_error_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                output_error_load_2_reg_195 <= output_error_q1;
                output_error_load_3_reg_200 <= output_error_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                output_error_load_4_reg_215 <= output_error_q1;
                output_error_load_5_reg_220 <= output_error_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                output_error_load_6_reg_235 <= output_error_q1;
                output_error_load_7_reg_240 <= output_error_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                output_error_load_8_reg_255 <= output_error_q1;
                output_error_load_9_reg_260 <= output_error_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_done, grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_done)
    begin
        if ((grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done)
    begin
        if ((grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call5_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call5 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_start <= grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_ap_start_reg;
    grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_start <= grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_ap_start_reg;

    output_error_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_error_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_error_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_error_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_error_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_error_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_error_address0 <= grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_address0;
        else 
            output_error_address0 <= "XXXX";
        end if; 
    end process;


    output_error_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_error_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_error_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_error_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_error_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_error_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            output_error_address1 <= "XXXX";
        end if; 
    end process;


    output_error_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_error_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_error_ce0 <= grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_ce0;
        else 
            output_error_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_error_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_error_ce1 <= ap_const_logic_1;
        else 
            output_error_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_error_we0_assign_proc : process(grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_error_we0 <= grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_output_error_we0;
        else 
            output_error_we0 <= ap_const_logic_0;
        end if; 
    end process;

    softmax_input_error_stream16_din <= grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_softmax_input_error_stream16_din;

    softmax_input_error_stream16_write_assign_proc : process(grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_softmax_input_error_stream16_write, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            softmax_input_error_stream16_write <= grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_softmax_input_error_stream16_write;
        else 
            softmax_input_error_stream16_write <= ap_const_logic_0;
        end if; 
    end process;


    softmax_output_error_stream15_read_assign_proc : process(grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_softmax_output_error_stream15_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            softmax_output_error_stream15_read <= grp_softmax_error_propagation_10u_128u_Pipeline_store_output_error_fu_137_softmax_output_error_stream15_read;
        else 
            softmax_output_error_stream15_read <= ap_const_logic_0;
        end if; 
    end process;

    weights_address0 <= grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_weights_address0;
    weights_ce0 <= grp_softmax_error_propagation_10u_128u_Pipeline_input_fu_145_weights_ce0;
end behav;
