// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accel_softmax_error_propagation_10u_128u_Pipeline_input (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        softmax_input_error_stream16_din,
        softmax_input_error_stream16_num_data_valid,
        softmax_input_error_stream16_fifo_cap,
        softmax_input_error_stream16_full_n,
        softmax_input_error_stream16_write,
        weights_address0,
        weights_ce0,
        weights_q0,
        output_error_load,
        output_error_load_1,
        output_error_load_2,
        output_error_load_3,
        output_error_load_4,
        output_error_load_5,
        output_error_load_6,
        output_error_load_7,
        output_error_load_8,
        output_error_load_9
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] softmax_input_error_stream16_din;
input  [1:0] softmax_input_error_stream16_num_data_valid;
input  [1:0] softmax_input_error_stream16_fifo_cap;
input   softmax_input_error_stream16_full_n;
output   softmax_input_error_stream16_write;
output  [6:0] weights_address0;
output   weights_ce0;
input  [319:0] weights_q0;
input  [31:0] output_error_load;
input  [31:0] output_error_load_1;
input  [31:0] output_error_load_2;
input  [31:0] output_error_load_3;
input  [31:0] output_error_load_4;
input  [31:0] output_error_load_5;
input  [31:0] output_error_load_6;
input  [31:0] output_error_load_7;
input  [31:0] output_error_load_8;
input  [31:0] output_error_load_9;

reg ap_idle;
reg softmax_input_error_stream16_write;
reg weights_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
reg    ap_block_state22_pp0_stage0_iter21;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln39_fu_266_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    softmax_input_error_stream16_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] trunc_ln45_fu_288_p1;
reg   [31:0] trunc_ln45_reg_492;
reg   [31:0] tmp_s_reg_497;
reg   [31:0] tmp_1_reg_502;
reg   [31:0] tmp_2_reg_507;
reg   [31:0] tmp_3_reg_512;
reg   [31:0] tmp_4_reg_517;
reg   [31:0] tmp_5_reg_522;
reg   [31:0] tmp_6_reg_527;
reg   [31:0] tmp_7_reg_532;
reg   [31:0] tmp_8_reg_537;
wire   [31:0] grp_fu_218_p2;
reg   [31:0] sum_reg_592;
wire   [31:0] grp_fu_222_p2;
reg   [31:0] mul_1_reg_597;
wire   [31:0] grp_fu_226_p2;
reg   [31:0] mul_2_reg_602;
reg   [31:0] mul_2_reg_602_pp0_iter5_reg;
reg   [31:0] mul_2_reg_602_pp0_iter6_reg;
reg   [31:0] mul_2_reg_602_pp0_iter7_reg;
reg   [31:0] mul_2_reg_602_pp0_iter8_reg;
wire   [31:0] grp_fu_230_p2;
reg   [31:0] mul_3_reg_607;
wire   [31:0] grp_fu_234_p2;
reg   [31:0] mul_4_reg_612;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] mul_5_reg_617;
wire   [31:0] grp_fu_242_p2;
reg   [31:0] mul_6_reg_622;
wire   [31:0] grp_fu_246_p2;
reg   [31:0] mul_7_reg_627;
reg   [31:0] mul_7_reg_627_pp0_iter5_reg;
reg   [31:0] mul_7_reg_627_pp0_iter6_reg;
reg   [31:0] mul_7_reg_627_pp0_iter7_reg;
reg   [31:0] mul_7_reg_627_pp0_iter8_reg;
wire   [31:0] grp_fu_250_p2;
reg   [31:0] mul_8_reg_632;
wire   [31:0] grp_fu_254_p2;
reg   [31:0] mul_9_reg_637;
wire   [31:0] grp_fu_182_p2;
reg   [31:0] tmp2_reg_642;
reg   [31:0] tmp2_reg_642_pp0_iter9_reg;
reg   [31:0] tmp2_reg_642_pp0_iter10_reg;
reg   [31:0] tmp2_reg_642_pp0_iter11_reg;
reg   [31:0] tmp2_reg_642_pp0_iter12_reg;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] tmp4_reg_647;
wire   [31:0] grp_fu_190_p2;
reg   [31:0] tmp6_reg_652;
reg   [31:0] tmp6_reg_652_pp0_iter9_reg;
reg   [31:0] tmp6_reg_652_pp0_iter10_reg;
reg   [31:0] tmp6_reg_652_pp0_iter11_reg;
reg   [31:0] tmp6_reg_652_pp0_iter12_reg;
wire   [31:0] grp_fu_194_p2;
reg   [31:0] tmp8_reg_657;
wire   [31:0] grp_fu_198_p2;
reg   [31:0] tmp3_reg_662;
wire   [31:0] grp_fu_202_p2;
reg   [31:0] tmp7_reg_667;
wire   [31:0] grp_fu_206_p2;
reg   [31:0] tmp1_reg_672;
wire   [31:0] grp_fu_210_p2;
reg   [31:0] tmp5_reg_677;
wire   [31:0] grp_fu_214_p2;
reg   [31:0] sum_1_reg_682;
wire   [63:0] zext_ln39_fu_278_p1;
reg   [7:0] input_fu_98;
wire   [7:0] add_ln39_fu_272_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_input_1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_218_p1;
wire   [31:0] grp_fu_222_p1;
wire   [31:0] grp_fu_226_p1;
wire   [31:0] grp_fu_230_p1;
wire   [31:0] grp_fu_234_p1;
wire   [31:0] grp_fu_238_p1;
wire   [31:0] grp_fu_242_p1;
wire   [31:0] grp_fu_246_p1;
wire   [31:0] grp_fu_250_p1;
wire   [31:0] grp_fu_254_p1;
reg    grp_fu_182_ce;
reg    grp_fu_186_ce;
reg    grp_fu_190_ce;
reg    grp_fu_194_ce;
reg    grp_fu_198_ce;
reg    grp_fu_202_ce;
reg    grp_fu_206_ce;
reg    grp_fu_210_ce;
reg    grp_fu_214_ce;
reg    grp_fu_218_ce;
reg    grp_fu_222_ce;
reg    grp_fu_226_ce;
reg    grp_fu_230_ce;
reg    grp_fu_234_ce;
reg    grp_fu_238_ce;
reg    grp_fu_242_ce;
reg    grp_fu_246_ce;
reg    grp_fu_250_ce;
reg    grp_fu_254_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_done_reg = 1'b0;
end

accel_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_592),
    .din1(mul_1_reg_597),
    .ce(grp_fu_182_ce),
    .dout(grp_fu_182_p2)
);

accel_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_3_reg_607),
    .din1(mul_4_reg_612),
    .ce(grp_fu_186_ce),
    .dout(grp_fu_186_p2)
);

accel_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_5_reg_617),
    .din1(mul_6_reg_622),
    .ce(grp_fu_190_ce),
    .dout(grp_fu_190_p2)
);

accel_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_8_reg_632),
    .din1(mul_9_reg_637),
    .ce(grp_fu_194_ce),
    .dout(grp_fu_194_p2)
);

accel_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp4_reg_647),
    .din1(mul_2_reg_602_pp0_iter8_reg),
    .ce(grp_fu_198_ce),
    .dout(grp_fu_198_p2)
);

accel_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp8_reg_657),
    .din1(mul_7_reg_627_pp0_iter8_reg),
    .ce(grp_fu_202_ce),
    .dout(grp_fu_202_p2)
);

accel_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp3_reg_662),
    .din1(tmp2_reg_642_pp0_iter12_reg),
    .ce(grp_fu_206_ce),
    .dout(grp_fu_206_p2)
);

accel_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp7_reg_667),
    .din1(tmp6_reg_652_pp0_iter12_reg),
    .ce(grp_fu_210_ce),
    .dout(grp_fu_210_p2)
);

accel_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp5_reg_677),
    .din1(tmp1_reg_672),
    .ce(grp_fu_214_ce),
    .dout(grp_fu_214_p2)
);

accel_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_error_load),
    .din1(grp_fu_218_p1),
    .ce(grp_fu_218_ce),
    .dout(grp_fu_218_p2)
);

accel_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_error_load_1),
    .din1(grp_fu_222_p1),
    .ce(grp_fu_222_ce),
    .dout(grp_fu_222_p2)
);

accel_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_error_load_2),
    .din1(grp_fu_226_p1),
    .ce(grp_fu_226_ce),
    .dout(grp_fu_226_p2)
);

accel_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_error_load_3),
    .din1(grp_fu_230_p1),
    .ce(grp_fu_230_ce),
    .dout(grp_fu_230_p2)
);

accel_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_error_load_4),
    .din1(grp_fu_234_p1),
    .ce(grp_fu_234_ce),
    .dout(grp_fu_234_p2)
);

accel_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_error_load_5),
    .din1(grp_fu_238_p1),
    .ce(grp_fu_238_ce),
    .dout(grp_fu_238_p2)
);

accel_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_error_load_6),
    .din1(grp_fu_242_p1),
    .ce(grp_fu_242_ce),
    .dout(grp_fu_242_p2)
);

accel_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_error_load_7),
    .din1(grp_fu_246_p1),
    .ce(grp_fu_246_ce),
    .dout(grp_fu_246_p2)
);

accel_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_error_load_8),
    .din1(grp_fu_250_p1),
    .ce(grp_fu_250_ce),
    .dout(grp_fu_250_p2)
);

accel_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_error_load_9),
    .din1(grp_fu_254_p1),
    .ce(grp_fu_254_ce),
    .dout(grp_fu_254_p2)
);

accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter20_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln39_fu_266_p2 == 1'd0))) begin
            input_fu_98 <= add_ln39_fu_272_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            input_fu_98 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        mul_1_reg_597 <= grp_fu_222_p2;
        mul_2_reg_602 <= grp_fu_226_p2;
        mul_2_reg_602_pp0_iter5_reg <= mul_2_reg_602;
        mul_2_reg_602_pp0_iter6_reg <= mul_2_reg_602_pp0_iter5_reg;
        mul_2_reg_602_pp0_iter7_reg <= mul_2_reg_602_pp0_iter6_reg;
        mul_2_reg_602_pp0_iter8_reg <= mul_2_reg_602_pp0_iter7_reg;
        mul_3_reg_607 <= grp_fu_230_p2;
        mul_4_reg_612 <= grp_fu_234_p2;
        mul_5_reg_617 <= grp_fu_238_p2;
        mul_6_reg_622 <= grp_fu_242_p2;
        mul_7_reg_627 <= grp_fu_246_p2;
        mul_7_reg_627_pp0_iter5_reg <= mul_7_reg_627;
        mul_7_reg_627_pp0_iter6_reg <= mul_7_reg_627_pp0_iter5_reg;
        mul_7_reg_627_pp0_iter7_reg <= mul_7_reg_627_pp0_iter6_reg;
        mul_7_reg_627_pp0_iter8_reg <= mul_7_reg_627_pp0_iter7_reg;
        mul_8_reg_632 <= grp_fu_250_p2;
        mul_9_reg_637 <= grp_fu_254_p2;
        sum_1_reg_682 <= grp_fu_214_p2;
        sum_reg_592 <= grp_fu_218_p2;
        tmp1_reg_672 <= grp_fu_206_p2;
        tmp2_reg_642 <= grp_fu_182_p2;
        tmp2_reg_642_pp0_iter10_reg <= tmp2_reg_642_pp0_iter9_reg;
        tmp2_reg_642_pp0_iter11_reg <= tmp2_reg_642_pp0_iter10_reg;
        tmp2_reg_642_pp0_iter12_reg <= tmp2_reg_642_pp0_iter11_reg;
        tmp2_reg_642_pp0_iter9_reg <= tmp2_reg_642;
        tmp3_reg_662 <= grp_fu_198_p2;
        tmp4_reg_647 <= grp_fu_186_p2;
        tmp5_reg_677 <= grp_fu_210_p2;
        tmp6_reg_652 <= grp_fu_190_p2;
        tmp6_reg_652_pp0_iter10_reg <= tmp6_reg_652_pp0_iter9_reg;
        tmp6_reg_652_pp0_iter11_reg <= tmp6_reg_652_pp0_iter10_reg;
        tmp6_reg_652_pp0_iter12_reg <= tmp6_reg_652_pp0_iter11_reg;
        tmp6_reg_652_pp0_iter9_reg <= tmp6_reg_652;
        tmp7_reg_667 <= grp_fu_202_p2;
        tmp8_reg_657 <= grp_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp_1_reg_502 <= {{weights_q0[95:64]}};
        tmp_2_reg_507 <= {{weights_q0[127:96]}};
        tmp_3_reg_512 <= {{weights_q0[159:128]}};
        tmp_4_reg_517 <= {{weights_q0[191:160]}};
        tmp_5_reg_522 <= {{weights_q0[223:192]}};
        tmp_6_reg_527 <= {{weights_q0[255:224]}};
        tmp_7_reg_532 <= {{weights_q0[287:256]}};
        tmp_8_reg_537 <= {{weights_q0[319:288]}};
        tmp_s_reg_497 <= {{weights_q0[63:32]}};
        trunc_ln45_reg_492 <= trunc_ln45_fu_288_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln39_fu_266_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter20_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_input_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_input_1 = input_fu_98;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_182_ce = 1'b1;
    end else begin
        grp_fu_182_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_186_ce = 1'b1;
    end else begin
        grp_fu_186_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_190_ce = 1'b1;
    end else begin
        grp_fu_190_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_194_ce = 1'b1;
    end else begin
        grp_fu_194_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_198_ce = 1'b1;
    end else begin
        grp_fu_198_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_202_ce = 1'b1;
    end else begin
        grp_fu_202_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_206_ce = 1'b1;
    end else begin
        grp_fu_206_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_210_ce = 1'b1;
    end else begin
        grp_fu_210_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_214_ce = 1'b1;
    end else begin
        grp_fu_214_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_218_ce = 1'b1;
    end else begin
        grp_fu_218_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_222_ce = 1'b1;
    end else begin
        grp_fu_222_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_226_ce = 1'b1;
    end else begin
        grp_fu_226_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_230_ce = 1'b1;
    end else begin
        grp_fu_230_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_234_ce = 1'b1;
    end else begin
        grp_fu_234_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_238_ce = 1'b1;
    end else begin
        grp_fu_238_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_242_ce = 1'b1;
    end else begin
        grp_fu_242_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_246_ce = 1'b1;
    end else begin
        grp_fu_246_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_250_ce = 1'b1;
    end else begin
        grp_fu_250_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_254_ce = 1'b1;
    end else begin
        grp_fu_254_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        softmax_input_error_stream16_blk_n = softmax_input_error_stream16_full_n;
    end else begin
        softmax_input_error_stream16_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        softmax_input_error_stream16_write = 1'b1;
    end else begin
        softmax_input_error_stream16_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln39_fu_272_p2 = (ap_sig_allocacmp_input_1 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter21 == 1'b1) & (softmax_input_error_stream16_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter21 == 1'b1) & (softmax_input_error_stream16_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter21 == 1'b1) & (softmax_input_error_stream16_full_n == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp0_stage0_iter21 = (softmax_input_error_stream16_full_n == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_218_p1 = trunc_ln45_reg_492;

assign grp_fu_222_p1 = tmp_s_reg_497;

assign grp_fu_226_p1 = tmp_1_reg_502;

assign grp_fu_230_p1 = tmp_2_reg_507;

assign grp_fu_234_p1 = tmp_3_reg_512;

assign grp_fu_238_p1 = tmp_4_reg_517;

assign grp_fu_242_p1 = tmp_5_reg_522;

assign grp_fu_246_p1 = tmp_6_reg_527;

assign grp_fu_250_p1 = tmp_7_reg_532;

assign grp_fu_254_p1 = tmp_8_reg_537;

assign icmp_ln39_fu_266_p2 = ((ap_sig_allocacmp_input_1 == 8'd128) ? 1'b1 : 1'b0);

assign softmax_input_error_stream16_din = sum_1_reg_682;

assign trunc_ln45_fu_288_p1 = weights_q0[31:0];

assign weights_address0 = zext_ln39_fu_278_p1;

assign zext_ln39_fu_278_p1 = ap_sig_allocacmp_input_1;

endmodule //accel_softmax_error_propagation_10u_128u_Pipeline_input
