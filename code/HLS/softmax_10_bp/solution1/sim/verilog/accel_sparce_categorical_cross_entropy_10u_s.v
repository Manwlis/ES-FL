// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module accel_sparce_categorical_cross_entropy_10u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        softmax_f_map_stream14_dout,
        softmax_f_map_stream14_num_data_valid,
        softmax_f_map_stream14_fifo_cap,
        softmax_f_map_stream14_empty_n,
        softmax_f_map_stream14_read,
        label_r_dout,
        label_r_num_data_valid,
        label_r_fifo_cap,
        label_r_empty_n,
        label_r_read,
        softmax_output_error_stream15_din,
        softmax_output_error_stream15_num_data_valid,
        softmax_output_error_stream15_fifo_cap,
        softmax_output_error_stream15_full_n,
        softmax_output_error_stream15_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] softmax_f_map_stream14_dout;
input  [1:0] softmax_f_map_stream14_num_data_valid;
input  [1:0] softmax_f_map_stream14_fifo_cap;
input   softmax_f_map_stream14_empty_n;
output   softmax_f_map_stream14_read;
input  [31:0] label_r_dout;
input  [2:0] label_r_num_data_valid;
input  [2:0] label_r_fifo_cap;
input   label_r_empty_n;
output   label_r_read;
output  [31:0] softmax_output_error_stream15_din;
input  [3:0] softmax_output_error_stream15_num_data_valid;
input  [3:0] softmax_output_error_stream15_fifo_cap;
input   softmax_output_error_stream15_full_n;
output   softmax_output_error_stream15_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg softmax_f_map_stream14_read;
reg label_r_read;
reg softmax_output_error_stream15_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    label_r_blk_n;
reg   [31:0] label_read_reg_47;
wire    grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_start;
wire    grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_done;
wire    grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_idle;
wire    grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_ready;
wire    grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_softmax_f_map_stream14_read;
wire   [31:0] grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_softmax_output_error_stream15_din;
wire    grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_softmax_output_error_stream15_write;
reg    grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_start_reg = 1'b0;
end

accel_sparce_categorical_cross_entropy_10u_Pipeline_output_error grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_start),
    .ap_done(grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_done),
    .ap_idle(grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_idle),
    .ap_ready(grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_ready),
    .softmax_f_map_stream14_dout(softmax_f_map_stream14_dout),
    .softmax_f_map_stream14_num_data_valid(2'd0),
    .softmax_f_map_stream14_fifo_cap(2'd0),
    .softmax_f_map_stream14_empty_n(softmax_f_map_stream14_empty_n),
    .softmax_f_map_stream14_read(grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_softmax_f_map_stream14_read),
    .softmax_output_error_stream15_din(grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_softmax_output_error_stream15_din),
    .softmax_output_error_stream15_num_data_valid(4'd0),
    .softmax_output_error_stream15_fifo_cap(4'd0),
    .softmax_output_error_stream15_full_n(softmax_output_error_stream15_full_n),
    .softmax_output_error_stream15_write(grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_softmax_output_error_stream15_write),
    .label_load(label_read_reg_47)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_start_reg <= 1'b1;
        end else if ((grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_ready == 1'b1)) begin
            grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        label_read_reg_47 <= label_r_dout;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (label_r_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        label_r_blk_n = label_r_empty_n;
    end else begin
        label_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (label_r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        label_r_read = 1'b1;
    end else begin
        label_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        softmax_f_map_stream14_read = grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_softmax_f_map_stream14_read;
    end else begin
        softmax_f_map_stream14_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        softmax_output_error_stream15_write = grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_softmax_output_error_stream15_write;
    end else begin
        softmax_output_error_stream15_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (label_r_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (label_r_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_start = grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_ap_start_reg;

assign softmax_output_error_stream15_din = grp_sparce_categorical_cross_entropy_10u_Pipeline_output_error_fu_38_softmax_output_error_stream15_din;

endmodule //accel_sparce_categorical_cross_entropy_10u_s
